// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extensions.proto

#include "extensions.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseVirtualChannelRequest_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseVirtualChannelResponse_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Event_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDcvInfoRequest_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDcvInfoResponse_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetManifestRequest_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetManifestResponse_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStreamingViewsRequest_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamingViewsResponse_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsPointInsideStreamingViewsResponse_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Request_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Response_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetCursorPointRequest_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCursorPointResponse_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupVirtualChannelRequest_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupVirtualChannelResponse_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoftwareInfo_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareInfo_VersionNumber_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingViews_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamingViews_StreamingView_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingViewsChangedEvent_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualChannelClosedEvent_extensions_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_extensions_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualChannelReadyEvent_extensions_2eproto;
namespace dcv {
namespace extensions {
class SoftwareInfo_VersionNumberDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareInfo_VersionNumber> _instance;
} _SoftwareInfo_VersionNumber_default_instance_;
class SoftwareInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SoftwareInfo> _instance;
} _SoftwareInfo_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
class RectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Rect> _instance;
} _Rect_default_instance_;
class StreamingViews_StreamingViewDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingViews_StreamingView> _instance;
} _StreamingViews_StreamingView_default_instance_;
class StreamingViewsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingViews> _instance;
} _StreamingViews_default_instance_;
class GetDcvInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDcvInfoRequest> _instance;
} _GetDcvInfoRequest_default_instance_;
class GetManifestRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetManifestRequest> _instance;
} _GetManifestRequest_default_instance_;
class SetupVirtualChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupVirtualChannelRequest> _instance;
} _SetupVirtualChannelRequest_default_instance_;
class CloseVirtualChannelRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseVirtualChannelRequest> _instance;
} _CloseVirtualChannelRequest_default_instance_;
class SetCursorPointRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCursorPointRequest> _instance;
} _SetCursorPointRequest_default_instance_;
class GetStreamingViewsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamingViewsRequest> _instance;
} _GetStreamingViewsRequest_default_instance_;
class IsPointInsideStreamingViewsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsPointInsideStreamingViewsRequest> _instance;
} _IsPointInsideStreamingViewsRequest_default_instance_;
class GetDcvInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDcvInfoResponse> _instance;
} _GetDcvInfoResponse_default_instance_;
class GetManifestResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetManifestResponse> _instance;
} _GetManifestResponse_default_instance_;
class SetupVirtualChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupVirtualChannelResponse> _instance;
} _SetupVirtualChannelResponse_default_instance_;
class CloseVirtualChannelResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CloseVirtualChannelResponse> _instance;
} _CloseVirtualChannelResponse_default_instance_;
class SetCursorPointResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetCursorPointResponse> _instance;
} _SetCursorPointResponse_default_instance_;
class GetStreamingViewsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStreamingViewsResponse> _instance;
} _GetStreamingViewsResponse_default_instance_;
class IsPointInsideStreamingViewsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IsPointInsideStreamingViewsResponse> _instance;
} _IsPointInsideStreamingViewsResponse_default_instance_;
class VirtualChannelReadyEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtualChannelReadyEvent> _instance;
} _VirtualChannelReadyEvent_default_instance_;
class VirtualChannelClosedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VirtualChannelClosedEvent> _instance;
} _VirtualChannelClosedEvent_default_instance_;
class StreamingViewsChangedEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingViewsChangedEvent> _instance;
} _StreamingViewsChangedEvent_default_instance_;
class RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Request> _instance;
  const ::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request_;
  const ::dcv::extensions::GetManifestRequest* get_manifest_request_;
  const ::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request_;
  const ::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request_;
  const ::dcv::extensions::SetCursorPointRequest* set_cursor_point_request_;
  const ::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request_;
  const ::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request_;
} _Request_default_instance_;
class ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Response> _instance;
  const ::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response_;
  const ::dcv::extensions::GetManifestResponse* get_manifest_response_;
  const ::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response_;
  const ::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response_;
  const ::dcv::extensions::SetCursorPointResponse* set_cursor_point_response_;
  const ::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response_;
  const ::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response_;
} _Response_default_instance_;
class EventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Event> _instance;
  const ::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event_;
  const ::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event_;
  const ::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event_;
} _Event_default_instance_;
class ExtensionMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExtensionMessage> _instance;
  const ::dcv::extensions::Request* request_;
} _ExtensionMessage_default_instance_;
class DcvMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DcvMessage> _instance;
  const ::dcv::extensions::Response* response_;
  const ::dcv::extensions::Event* event_;
} _DcvMessage_default_instance_;
}  // namespace extensions
}  // namespace dcv
static void InitDefaultsscc_info_CloseVirtualChannelRequest_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_CloseVirtualChannelRequest_default_instance_;
    new (ptr) ::dcv::extensions::CloseVirtualChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::CloseVirtualChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseVirtualChannelRequest_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseVirtualChannelRequest_extensions_2eproto}, {}};

static void InitDefaultsscc_info_CloseVirtualChannelResponse_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_CloseVirtualChannelResponse_default_instance_;
    new (ptr) ::dcv::extensions::CloseVirtualChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::CloseVirtualChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CloseVirtualChannelResponse_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CloseVirtualChannelResponse_extensions_2eproto}, {}};

static void InitDefaultsscc_info_DcvMessage_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_DcvMessage_default_instance_;
    new (ptr) ::dcv::extensions::DcvMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::DcvMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DcvMessage_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DcvMessage_extensions_2eproto}, {
      &scc_info_Response_extensions_2eproto.base,
      &scc_info_Event_extensions_2eproto.base,}};

static void InitDefaultsscc_info_Event_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_Event_default_instance_;
    new (ptr) ::dcv::extensions::Event();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::Event::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Event_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Event_extensions_2eproto}, {
      &scc_info_VirtualChannelReadyEvent_extensions_2eproto.base,
      &scc_info_VirtualChannelClosedEvent_extensions_2eproto.base,
      &scc_info_StreamingViewsChangedEvent_extensions_2eproto.base,}};

static void InitDefaultsscc_info_ExtensionMessage_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_ExtensionMessage_default_instance_;
    new (ptr) ::dcv::extensions::ExtensionMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::ExtensionMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExtensionMessage_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExtensionMessage_extensions_2eproto}, {
      &scc_info_Request_extensions_2eproto.base,}};

static void InitDefaultsscc_info_GetDcvInfoRequest_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_GetDcvInfoRequest_default_instance_;
    new (ptr) ::dcv::extensions::GetDcvInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::GetDcvInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDcvInfoRequest_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDcvInfoRequest_extensions_2eproto}, {}};

static void InitDefaultsscc_info_GetDcvInfoResponse_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_GetDcvInfoResponse_default_instance_;
    new (ptr) ::dcv::extensions::GetDcvInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::GetDcvInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetDcvInfoResponse_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetDcvInfoResponse_extensions_2eproto}, {
      &scc_info_SoftwareInfo_extensions_2eproto.base,}};

static void InitDefaultsscc_info_GetManifestRequest_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_GetManifestRequest_default_instance_;
    new (ptr) ::dcv::extensions::GetManifestRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::GetManifestRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetManifestRequest_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetManifestRequest_extensions_2eproto}, {}};

static void InitDefaultsscc_info_GetManifestResponse_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_GetManifestResponse_default_instance_;
    new (ptr) ::dcv::extensions::GetManifestResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::GetManifestResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetManifestResponse_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetManifestResponse_extensions_2eproto}, {}};

static void InitDefaultsscc_info_GetStreamingViewsRequest_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_GetStreamingViewsRequest_default_instance_;
    new (ptr) ::dcv::extensions::GetStreamingViewsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::GetStreamingViewsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetStreamingViewsRequest_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetStreamingViewsRequest_extensions_2eproto}, {}};

static void InitDefaultsscc_info_GetStreamingViewsResponse_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_GetStreamingViewsResponse_default_instance_;
    new (ptr) ::dcv::extensions::GetStreamingViewsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::GetStreamingViewsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStreamingViewsResponse_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStreamingViewsResponse_extensions_2eproto}, {
      &scc_info_StreamingViews_extensions_2eproto.base,}};

static void InitDefaultsscc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_IsPointInsideStreamingViewsRequest_default_instance_;
    new (ptr) ::dcv::extensions::IsPointInsideStreamingViewsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::IsPointInsideStreamingViewsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto}, {
      &scc_info_Point_extensions_2eproto.base,}};

static void InitDefaultsscc_info_IsPointInsideStreamingViewsResponse_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_IsPointInsideStreamingViewsResponse_default_instance_;
    new (ptr) ::dcv::extensions::IsPointInsideStreamingViewsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::IsPointInsideStreamingViewsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_IsPointInsideStreamingViewsResponse_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_IsPointInsideStreamingViewsResponse_extensions_2eproto}, {}};

static void InitDefaultsscc_info_Point_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_Point_default_instance_;
    new (ptr) ::dcv::extensions::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_extensions_2eproto}, {}};

static void InitDefaultsscc_info_Rect_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_Rect_default_instance_;
    new (ptr) ::dcv::extensions::Rect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::Rect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Rect_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Rect_extensions_2eproto}, {}};

static void InitDefaultsscc_info_Request_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_Request_default_instance_;
    new (ptr) ::dcv::extensions::Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Request_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Request_extensions_2eproto}, {
      &scc_info_GetDcvInfoRequest_extensions_2eproto.base,
      &scc_info_GetManifestRequest_extensions_2eproto.base,
      &scc_info_SetupVirtualChannelRequest_extensions_2eproto.base,
      &scc_info_CloseVirtualChannelRequest_extensions_2eproto.base,
      &scc_info_SetCursorPointRequest_extensions_2eproto.base,
      &scc_info_GetStreamingViewsRequest_extensions_2eproto.base,
      &scc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto.base,}};

static void InitDefaultsscc_info_Response_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_Response_default_instance_;
    new (ptr) ::dcv::extensions::Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_Response_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_Response_extensions_2eproto}, {
      &scc_info_GetDcvInfoResponse_extensions_2eproto.base,
      &scc_info_GetManifestResponse_extensions_2eproto.base,
      &scc_info_SetupVirtualChannelResponse_extensions_2eproto.base,
      &scc_info_CloseVirtualChannelResponse_extensions_2eproto.base,
      &scc_info_SetCursorPointResponse_extensions_2eproto.base,
      &scc_info_GetStreamingViewsResponse_extensions_2eproto.base,
      &scc_info_IsPointInsideStreamingViewsResponse_extensions_2eproto.base,}};

static void InitDefaultsscc_info_SetCursorPointRequest_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_SetCursorPointRequest_default_instance_;
    new (ptr) ::dcv::extensions::SetCursorPointRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::SetCursorPointRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SetCursorPointRequest_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SetCursorPointRequest_extensions_2eproto}, {
      &scc_info_Point_extensions_2eproto.base,}};

static void InitDefaultsscc_info_SetCursorPointResponse_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_SetCursorPointResponse_default_instance_;
    new (ptr) ::dcv::extensions::SetCursorPointResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::SetCursorPointResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetCursorPointResponse_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetCursorPointResponse_extensions_2eproto}, {}};

static void InitDefaultsscc_info_SetupVirtualChannelRequest_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_SetupVirtualChannelRequest_default_instance_;
    new (ptr) ::dcv::extensions::SetupVirtualChannelRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::SetupVirtualChannelRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupVirtualChannelRequest_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupVirtualChannelRequest_extensions_2eproto}, {}};

static void InitDefaultsscc_info_SetupVirtualChannelResponse_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_SetupVirtualChannelResponse_default_instance_;
    new (ptr) ::dcv::extensions::SetupVirtualChannelResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::SetupVirtualChannelResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetupVirtualChannelResponse_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetupVirtualChannelResponse_extensions_2eproto}, {}};

static void InitDefaultsscc_info_SoftwareInfo_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_SoftwareInfo_default_instance_;
    new (ptr) ::dcv::extensions::SoftwareInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::SoftwareInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SoftwareInfo_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SoftwareInfo_extensions_2eproto}, {
      &scc_info_SoftwareInfo_VersionNumber_extensions_2eproto.base,}};

static void InitDefaultsscc_info_SoftwareInfo_VersionNumber_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_SoftwareInfo_VersionNumber_default_instance_;
    new (ptr) ::dcv::extensions::SoftwareInfo_VersionNumber();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::SoftwareInfo_VersionNumber::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SoftwareInfo_VersionNumber_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SoftwareInfo_VersionNumber_extensions_2eproto}, {}};

static void InitDefaultsscc_info_StreamingViews_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_StreamingViews_default_instance_;
    new (ptr) ::dcv::extensions::StreamingViews();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::StreamingViews::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingViews_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamingViews_extensions_2eproto}, {
      &scc_info_StreamingViews_StreamingView_extensions_2eproto.base,}};

static void InitDefaultsscc_info_StreamingViews_StreamingView_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_StreamingViews_StreamingView_default_instance_;
    new (ptr) ::dcv::extensions::StreamingViews_StreamingView();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::StreamingViews_StreamingView::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StreamingViews_StreamingView_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StreamingViews_StreamingView_extensions_2eproto}, {
      &scc_info_Rect_extensions_2eproto.base,
      &scc_info_Point_extensions_2eproto.base,}};

static void InitDefaultsscc_info_StreamingViewsChangedEvent_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_StreamingViewsChangedEvent_default_instance_;
    new (ptr) ::dcv::extensions::StreamingViewsChangedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::StreamingViewsChangedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingViewsChangedEvent_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamingViewsChangedEvent_extensions_2eproto}, {
      &scc_info_StreamingViews_extensions_2eproto.base,}};

static void InitDefaultsscc_info_VirtualChannelClosedEvent_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_VirtualChannelClosedEvent_default_instance_;
    new (ptr) ::dcv::extensions::VirtualChannelClosedEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::VirtualChannelClosedEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualChannelClosedEvent_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VirtualChannelClosedEvent_extensions_2eproto}, {}};

static void InitDefaultsscc_info_VirtualChannelReadyEvent_extensions_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::dcv::extensions::_VirtualChannelReadyEvent_default_instance_;
    new (ptr) ::dcv::extensions::VirtualChannelReadyEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::dcv::extensions::VirtualChannelReadyEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VirtualChannelReadyEvent_extensions_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VirtualChannelReadyEvent_extensions_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_extensions_2eproto[28];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_extensions_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_extensions_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_extensions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, major_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, minor_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo_VersionNumber, revision_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, name_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, version_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, os_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, arch_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SoftwareInfo, hostname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Point, x_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, x_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, y_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, width_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Rect, height_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, view_id_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, local_area_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, zoom_factor_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews_StreamingView, remote_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViews, streaming_view_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetManifestRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelRequest, virtual_channel_name_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelRequest, relay_client_process_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelRequest, virtual_channel_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetCursorPointRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetCursorPointRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetStreamingViewsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsRequest, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, dcv_role_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, dcv_process_id_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, server_info_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetDcvInfoResponse, client_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetManifestResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetManifestResponse, manifest_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, virtual_channel_name_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, relay_path_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, relay_server_process_id_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetupVirtualChannelResponse, virtual_channel_auth_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::CloseVirtualChannelResponse, virtual_channel_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::SetCursorPointResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetStreamingViewsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::GetStreamingViewsResponse, streaming_views_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::IsPointInsideStreamingViewsResponse, view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelReadyEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelReadyEvent, virtual_channel_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelClosedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::VirtualChannelClosedEvent, virtual_channel_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViewsChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::StreamingViewsChangedEvent, streaming_views_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, request_id_),
  offsetof(::dcv::extensions::RequestDefaultTypeInternal, get_dcv_info_request_),
  offsetof(::dcv::extensions::RequestDefaultTypeInternal, get_manifest_request_),
  offsetof(::dcv::extensions::RequestDefaultTypeInternal, setup_virtual_channel_request_),
  offsetof(::dcv::extensions::RequestDefaultTypeInternal, close_virtual_channel_request_),
  offsetof(::dcv::extensions::RequestDefaultTypeInternal, set_cursor_point_request_),
  offsetof(::dcv::extensions::RequestDefaultTypeInternal, get_streaming_views_request_),
  offsetof(::dcv::extensions::RequestDefaultTypeInternal, is_point_inside_streaming_views_request_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Request, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, request_id_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, status_),
  offsetof(::dcv::extensions::ResponseDefaultTypeInternal, get_dcv_info_response_),
  offsetof(::dcv::extensions::ResponseDefaultTypeInternal, get_manifest_response_),
  offsetof(::dcv::extensions::ResponseDefaultTypeInternal, setup_virtual_channel_response_),
  offsetof(::dcv::extensions::ResponseDefaultTypeInternal, close_virtual_channel_response_),
  offsetof(::dcv::extensions::ResponseDefaultTypeInternal, set_cursor_point_response_),
  offsetof(::dcv::extensions::ResponseDefaultTypeInternal, get_streaming_views_response_),
  offsetof(::dcv::extensions::ResponseDefaultTypeInternal, is_point_inside_streaming_views_response_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Response, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Event, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::dcv::extensions::EventDefaultTypeInternal, virtual_channel_ready_event_),
  offsetof(::dcv::extensions::EventDefaultTypeInternal, virtual_channel_closed_event_),
  offsetof(::dcv::extensions::EventDefaultTypeInternal, streaming_views_changed_event_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::Event, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::ExtensionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::ExtensionMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::dcv::extensions::ExtensionMessageDefaultTypeInternal, request_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::ExtensionMessage, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::DcvMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::DcvMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::dcv::extensions::DcvMessageDefaultTypeInternal, response_),
  offsetof(::dcv::extensions::DcvMessageDefaultTypeInternal, event_),
  PROTOBUF_FIELD_OFFSET(::dcv::extensions::DcvMessage, msg_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::dcv::extensions::SoftwareInfo_VersionNumber)},
  { 8, -1, sizeof(::dcv::extensions::SoftwareInfo)},
  { 18, -1, sizeof(::dcv::extensions::Point)},
  { 25, -1, sizeof(::dcv::extensions::Rect)},
  { 34, -1, sizeof(::dcv::extensions::StreamingViews_StreamingView)},
  { 43, -1, sizeof(::dcv::extensions::StreamingViews)},
  { 49, -1, sizeof(::dcv::extensions::GetDcvInfoRequest)},
  { 54, -1, sizeof(::dcv::extensions::GetManifestRequest)},
  { 59, -1, sizeof(::dcv::extensions::SetupVirtualChannelRequest)},
  { 66, -1, sizeof(::dcv::extensions::CloseVirtualChannelRequest)},
  { 72, -1, sizeof(::dcv::extensions::SetCursorPointRequest)},
  { 78, -1, sizeof(::dcv::extensions::GetStreamingViewsRequest)},
  { 83, -1, sizeof(::dcv::extensions::IsPointInsideStreamingViewsRequest)},
  { 89, -1, sizeof(::dcv::extensions::GetDcvInfoResponse)},
  { 98, -1, sizeof(::dcv::extensions::GetManifestResponse)},
  { 104, -1, sizeof(::dcv::extensions::SetupVirtualChannelResponse)},
  { 113, -1, sizeof(::dcv::extensions::CloseVirtualChannelResponse)},
  { 119, -1, sizeof(::dcv::extensions::SetCursorPointResponse)},
  { 124, -1, sizeof(::dcv::extensions::GetStreamingViewsResponse)},
  { 130, -1, sizeof(::dcv::extensions::IsPointInsideStreamingViewsResponse)},
  { 136, -1, sizeof(::dcv::extensions::VirtualChannelReadyEvent)},
  { 142, -1, sizeof(::dcv::extensions::VirtualChannelClosedEvent)},
  { 148, -1, sizeof(::dcv::extensions::StreamingViewsChangedEvent)},
  { 154, -1, sizeof(::dcv::extensions::Request)},
  { 168, -1, sizeof(::dcv::extensions::Response)},
  { 183, -1, sizeof(::dcv::extensions::Event)},
  { 192, -1, sizeof(::dcv::extensions::ExtensionMessage)},
  { 199, -1, sizeof(::dcv::extensions::DcvMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_SoftwareInfo_VersionNumber_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_SoftwareInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_Rect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_StreamingViews_StreamingView_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_StreamingViews_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_GetDcvInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_GetManifestRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_SetupVirtualChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_CloseVirtualChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_SetCursorPointRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_GetStreamingViewsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_IsPointInsideStreamingViewsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_GetDcvInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_GetManifestResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_SetupVirtualChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_CloseVirtualChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_SetCursorPointResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_GetStreamingViewsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_IsPointInsideStreamingViewsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_VirtualChannelReadyEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_VirtualChannelClosedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_StreamingViewsChangedEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_Event_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_ExtensionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::dcv::extensions::_DcvMessage_default_instance_),
};

const char descriptor_table_protodef_extensions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020extensions.proto\022\016dcv.extensions\"\306\001\n\014S"
  "oftwareInfo\022\014\n\004name\030\001 \001(\t\022;\n\007version\030\002 \001"
  "(\0132*.dcv.extensions.SoftwareInfo.Version"
  "Number\022\n\n\002os\030\003 \001(\t\022\014\n\004arch\030\004 \001(\t\022\020\n\010host"
  "name\030\005 \001(\t\032\?\n\rVersionNumber\022\r\n\005major\030\001 \001"
  "(\r\022\r\n\005minor\030\002 \001(\r\022\020\n\010revision\030\003 \001(\r\"\035\n\005P"
  "oint\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\";\n\004Rect\022\t\n\001x\030"
  "\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005width\030\003 \001(\r\022\016\n\006heigh"
  "t\030\004 \001(\r\"\346\001\n\016StreamingViews\022D\n\016streaming_"
  "view\030\001 \003(\0132,.dcv.extensions.StreamingVie"
  "ws.StreamingView\032\215\001\n\rStreamingView\022\017\n\007vi"
  "ew_id\030\001 \001(\005\022(\n\nlocal_area\030\002 \001(\0132\024.dcv.ex"
  "tensions.Rect\022\023\n\013zoom_factor\030\003 \001(\001\022,\n\rre"
  "mote_offset\030\004 \001(\0132\025.dcv.extensions.Point"
  "\"\023\n\021GetDcvInfoRequest\"\024\n\022GetManifestRequ"
  "est\"[\n\032SetupVirtualChannelRequest\022\034\n\024vir"
  "tual_channel_name\030\001 \001(\t\022\037\n\027relay_client_"
  "process_id\030\002 \001(\003\":\n\032CloseVirtualChannelR"
  "equest\022\034\n\024virtual_channel_name\030\001 \001(\t\"=\n\025"
  "SetCursorPointRequest\022$\n\005point\030\001 \001(\0132\025.d"
  "cv.extensions.Point\"\032\n\030GetStreamingViews"
  "Request\"J\n\"IsPointInsideStreamingViewsRe"
  "quest\022$\n\005point\030\001 \001(\0132\025.dcv.extensions.Po"
  "int\"\363\001\n\022GetDcvInfoResponse\022<\n\010dcv_role\030\001"
  " \001(\0162*.dcv.extensions.GetDcvInfoResponse"
  ".DcvRole\022\026\n\016dcv_process_id\030\002 \001(\003\0221\n\013serv"
  "er_info\030\003 \001(\0132\034.dcv.extensions.SoftwareI"
  "nfo\0221\n\013client_info\030\004 \001(\0132\034.dcv.extension"
  "s.SoftwareInfo\"!\n\007DcvRole\022\n\n\006Server\020\000\022\n\n"
  "\006Client\020\001\",\n\023GetManifestResponse\022\025\n\rmani"
  "fest_path\030\001 \001(\t\"\224\001\n\033SetupVirtualChannelR"
  "esponse\022\034\n\024virtual_channel_name\030\001 \001(\t\022\022\n"
  "\nrelay_path\030\002 \001(\t\022\037\n\027relay_server_proces"
  "s_id\030\003 \001(\003\022\"\n\032virtual_channel_auth_token"
  "\030\004 \001(\014\";\n\033CloseVirtualChannelResponse\022\034\n"
  "\024virtual_channel_name\030\001 \001(\t\"\030\n\026SetCursor"
  "PointResponse\"T\n\031GetStreamingViewsRespon"
  "se\0227\n\017streaming_views\030\001 \001(\0132\036.dcv.extens"
  "ions.StreamingViews\"6\n#IsPointInsideStre"
  "amingViewsResponse\022\017\n\007view_id\030\001 \001(\005\"8\n\030V"
  "irtualChannelReadyEvent\022\034\n\024virtual_chann"
  "el_name\030\001 \001(\t\"9\n\031VirtualChannelClosedEve"
  "nt\022\034\n\024virtual_channel_name\030\001 \001(\t\"U\n\032Stre"
  "amingViewsChangedEvent\0227\n\017streaming_view"
  "s\030\001 \001(\0132\036.dcv.extensions.StreamingViews\""
  "\334\004\n\007Request\022\022\n\nrequest_id\030\001 \001(\t\022A\n\024get_d"
  "cv_info_request\030\n \001(\0132!.dcv.extensions.G"
  "etDcvInfoRequestH\000\022B\n\024get_manifest_reque"
  "st\030\013 \001(\0132\".dcv.extensions.GetManifestReq"
  "uestH\000\022S\n\035setup_virtual_channel_request\030"
  "\024 \001(\0132*.dcv.extensions.SetupVirtualChann"
  "elRequestH\000\022S\n\035close_virtual_channel_req"
  "uest\030\025 \001(\0132*.dcv.extensions.CloseVirtual"
  "ChannelRequestH\000\022I\n\030set_cursor_point_req"
  "uest\030\036 \001(\0132%.dcv.extensions.SetCursorPoi"
  "ntRequestH\000\022O\n\033get_streaming_views_reque"
  "st\030\037 \001(\0132(.dcv.extensions.GetStreamingVi"
  "ewsRequestH\000\022e\n\'is_point_inside_streamin"
  "g_views_request\030  \001(\01322.dcv.extensions.I"
  "sPointInsideStreamingViewsRequestH\000B\t\n\007r"
  "equest\"\201\007\n\010Response\022\022\n\nrequest_id\030\001 \001(\t\022"
  "/\n\006status\030\002 \001(\0162\037.dcv.extensions.Respons"
  "e.Status\022C\n\025get_dcv_info_response\030\n \001(\0132"
  "\".dcv.extensions.GetDcvInfoResponseH\000\022D\n"
  "\025get_manifest_response\030\013 \001(\0132#.dcv.exten"
  "sions.GetManifestResponseH\000\022U\n\036setup_vir"
  "tual_channel_response\030\024 \001(\0132+.dcv.extens"
  "ions.SetupVirtualChannelResponseH\000\022U\n\036cl"
  "ose_virtual_channel_response\030\025 \001(\0132+.dcv"
  ".extensions.CloseVirtualChannelResponseH"
  "\000\022K\n\031set_cursor_point_response\030\036 \001(\0132&.d"
  "cv.extensions.SetCursorPointResponseH\000\022Q"
  "\n\034get_streaming_views_response\030\037 \001(\0132).d"
  "cv.extensions.GetStreamingViewsResponseH"
  "\000\022g\n(is_point_inside_streaming_views_res"
  "ponse\030  \001(\01323.dcv.extensions.IsPointInsi"
  "deStreamingViewsResponseH\000\"\341\001\n\006Status\022\010\n"
  "\004NONE\020\000\022\013\n\007SUCCESS\020\001\022\021\n\rERROR_GENERIC\020\n\022"
  "\027\n\023ERROR_ACCESS_DENIED\020\013\022\031\n\025ERROR_NOT_IM"
  "PLEMENTED\020\014\022\033\n\027ERROR_INVALID_PARAMETER\020\r"
  "\0227\n3ERROR_INVALID_VIRTUAL_CHANNEL_NAMESP"
  "ACE_IN_MANIFEST\020\016\022#\n\037ERROR_TOO_MANY_VIRT"
  "UAL_CHANNELS\020\017B\n\n\010response\"\211\002\n\005Event\022O\n\033"
  "virtual_channel_ready_event\030\n \001(\0132(.dcv."
  "extensions.VirtualChannelReadyEventH\000\022Q\n"
  "\034virtual_channel_closed_event\030\024 \001(\0132).dc"
  "v.extensions.VirtualChannelClosedEventH\000"
  "\022S\n\035streaming_views_changed_event\030\036 \001(\0132"
  "*.dcv.extensions.StreamingViewsChangedEv"
  "entH\000B\007\n\005event\"E\n\020ExtensionMessage\022*\n\007re"
  "quest\030\001 \001(\0132\027.dcv.extensions.RequestH\000B\005"
  "\n\003msg\"i\n\nDcvMessage\022,\n\010response\030\002 \001(\0132\030."
  "dcv.extensions.ResponseH\000\022&\n\005event\030\003 \001(\013"
  "2\025.dcv.extensions.EventH\000B\005\n\003msgb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_extensions_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_extensions_2eproto_sccs[28] = {
  &scc_info_CloseVirtualChannelRequest_extensions_2eproto.base,
  &scc_info_CloseVirtualChannelResponse_extensions_2eproto.base,
  &scc_info_DcvMessage_extensions_2eproto.base,
  &scc_info_Event_extensions_2eproto.base,
  &scc_info_ExtensionMessage_extensions_2eproto.base,
  &scc_info_GetDcvInfoRequest_extensions_2eproto.base,
  &scc_info_GetDcvInfoResponse_extensions_2eproto.base,
  &scc_info_GetManifestRequest_extensions_2eproto.base,
  &scc_info_GetManifestResponse_extensions_2eproto.base,
  &scc_info_GetStreamingViewsRequest_extensions_2eproto.base,
  &scc_info_GetStreamingViewsResponse_extensions_2eproto.base,
  &scc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto.base,
  &scc_info_IsPointInsideStreamingViewsResponse_extensions_2eproto.base,
  &scc_info_Point_extensions_2eproto.base,
  &scc_info_Rect_extensions_2eproto.base,
  &scc_info_Request_extensions_2eproto.base,
  &scc_info_Response_extensions_2eproto.base,
  &scc_info_SetCursorPointRequest_extensions_2eproto.base,
  &scc_info_SetCursorPointResponse_extensions_2eproto.base,
  &scc_info_SetupVirtualChannelRequest_extensions_2eproto.base,
  &scc_info_SetupVirtualChannelResponse_extensions_2eproto.base,
  &scc_info_SoftwareInfo_extensions_2eproto.base,
  &scc_info_SoftwareInfo_VersionNumber_extensions_2eproto.base,
  &scc_info_StreamingViews_extensions_2eproto.base,
  &scc_info_StreamingViews_StreamingView_extensions_2eproto.base,
  &scc_info_StreamingViewsChangedEvent_extensions_2eproto.base,
  &scc_info_VirtualChannelClosedEvent_extensions_2eproto.base,
  &scc_info_VirtualChannelReadyEvent_extensions_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_extensions_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extensions_2eproto = {
  false, false, descriptor_table_protodef_extensions_2eproto, "extensions.proto", 3760,
  &descriptor_table_extensions_2eproto_once, descriptor_table_extensions_2eproto_sccs, descriptor_table_extensions_2eproto_deps, 28, 0,
  schemas, file_default_instances, TableStruct_extensions_2eproto::offsets,
  file_level_metadata_extensions_2eproto, 28, file_level_enum_descriptors_extensions_2eproto, file_level_service_descriptors_extensions_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_extensions_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_extensions_2eproto)), true);
namespace dcv {
namespace extensions {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetDcvInfoResponse_DcvRole_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_extensions_2eproto);
  return file_level_enum_descriptors_extensions_2eproto[0];
}
bool GetDcvInfoResponse_DcvRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::Server;
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::Client;
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::DcvRole_MIN;
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse::DcvRole_MAX;
constexpr int GetDcvInfoResponse::DcvRole_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_extensions_2eproto);
  return file_level_enum_descriptors_extensions_2eproto[1];
}
bool Response_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Response_Status Response::NONE;
constexpr Response_Status Response::SUCCESS;
constexpr Response_Status Response::ERROR_GENERIC;
constexpr Response_Status Response::ERROR_ACCESS_DENIED;
constexpr Response_Status Response::ERROR_NOT_IMPLEMENTED;
constexpr Response_Status Response::ERROR_INVALID_PARAMETER;
constexpr Response_Status Response::ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST;
constexpr Response_Status Response::ERROR_TOO_MANY_VIRTUAL_CHANNELS;
constexpr Response_Status Response::Status_MIN;
constexpr Response_Status Response::Status_MAX;
constexpr int Response::Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SoftwareInfo_VersionNumber::InitAsDefaultInstance() {
}
class SoftwareInfo_VersionNumber::_Internal {
 public:
};

SoftwareInfo_VersionNumber::SoftwareInfo_VersionNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SoftwareInfo.VersionNumber)
}
SoftwareInfo_VersionNumber::SoftwareInfo_VersionNumber(const SoftwareInfo_VersionNumber& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&revision_) -
    reinterpret_cast<char*>(&major_)) + sizeof(revision_));
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SoftwareInfo.VersionNumber)
}

void SoftwareInfo_VersionNumber::SharedCtor() {
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&major_)) + sizeof(revision_));
}

SoftwareInfo_VersionNumber::~SoftwareInfo_VersionNumber() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SoftwareInfo.VersionNumber)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftwareInfo_VersionNumber::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SoftwareInfo_VersionNumber::ArenaDtor(void* object) {
  SoftwareInfo_VersionNumber* _this = reinterpret_cast< SoftwareInfo_VersionNumber* >(object);
  (void)_this;
}
void SoftwareInfo_VersionNumber::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftwareInfo_VersionNumber::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftwareInfo_VersionNumber& SoftwareInfo_VersionNumber::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftwareInfo_VersionNumber_extensions_2eproto.base);
  return *internal_default_instance();
}


void SoftwareInfo_VersionNumber::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SoftwareInfo.VersionNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revision_) -
      reinterpret_cast<char*>(&major_)) + sizeof(revision_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareInfo_VersionNumber::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 revision = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareInfo_VersionNumber::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SoftwareInfo.VersionNumber)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 revision = 3;
  if (this->revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_revision(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SoftwareInfo.VersionNumber)
  return target;
}

size_t SoftwareInfo_VersionNumber::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SoftwareInfo.VersionNumber)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor());
  }

  // uint32 revision = 3;
  if (this->revision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_revision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareInfo_VersionNumber::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareInfo_VersionNumber* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareInfo_VersionNumber>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SoftwareInfo.VersionNumber)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SoftwareInfo.VersionNumber)
    MergeFrom(*source);
  }
}

void SoftwareInfo_VersionNumber::MergeFrom(const SoftwareInfo_VersionNumber& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from.minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from.revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
}

void SoftwareInfo_VersionNumber::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo_VersionNumber::CopyFrom(const SoftwareInfo_VersionNumber& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SoftwareInfo.VersionNumber)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo_VersionNumber::IsInitialized() const {
  return true;
}

void SoftwareInfo_VersionNumber::InternalSwap(SoftwareInfo_VersionNumber* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, revision_)
      + sizeof(SoftwareInfo_VersionNumber::revision_)
      - PROTOBUF_FIELD_OFFSET(SoftwareInfo_VersionNumber, major_)>(
          reinterpret_cast<char*>(&major_),
          reinterpret_cast<char*>(&other->major_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareInfo_VersionNumber::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SoftwareInfo::InitAsDefaultInstance() {
  ::dcv::extensions::_SoftwareInfo_default_instance_._instance.get_mutable()->version_ = const_cast< ::dcv::extensions::SoftwareInfo_VersionNumber*>(
      ::dcv::extensions::SoftwareInfo_VersionNumber::internal_default_instance());
}
class SoftwareInfo::_Internal {
 public:
  static const ::dcv::extensions::SoftwareInfo_VersionNumber& version(const SoftwareInfo* msg);
};

const ::dcv::extensions::SoftwareInfo_VersionNumber&
SoftwareInfo::_Internal::version(const SoftwareInfo* msg) {
  return *msg->version_;
}
SoftwareInfo::SoftwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SoftwareInfo)
}
SoftwareInfo::SoftwareInfo(const SoftwareInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_os().empty()) {
    os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_os(),
      GetArena());
  }
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_arch().empty()) {
    arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_arch(),
      GetArena());
  }
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hostname().empty()) {
    hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_hostname(),
      GetArena());
  }
  if (from._internal_has_version()) {
    version_ = new ::dcv::extensions::SoftwareInfo_VersionNumber(*from.version_);
  } else {
    version_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SoftwareInfo)
}

void SoftwareInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SoftwareInfo_extensions_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_ = nullptr;
}

SoftwareInfo::~SoftwareInfo() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SoftwareInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SoftwareInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  os_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hostname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete version_;
}

void SoftwareInfo::ArenaDtor(void* object) {
  SoftwareInfo* _this = reinterpret_cast< SoftwareInfo* >(object);
  (void)_this;
}
void SoftwareInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SoftwareInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SoftwareInfo& SoftwareInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SoftwareInfo_extensions_2eproto.base);
  return *internal_default_instance();
}


void SoftwareInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SoftwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  arch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SoftwareInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.SoftwareInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string os = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_os();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.SoftwareInfo.os"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string arch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_arch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.SoftwareInfo.arch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hostname = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_hostname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.SoftwareInfo.hostname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SoftwareInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SoftwareInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  if (this->has_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::version(this), target, stream);
  }

  // string os = 3;
  if (this->os().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_os().data(), static_cast<int>(this->_internal_os().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.os");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_os(), target);
  }

  // string arch = 4;
  if (this->arch().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_arch().data(), static_cast<int>(this->_internal_arch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.arch");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_arch(), target);
  }

  // string hostname = 5;
  if (this->hostname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SoftwareInfo.hostname");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SoftwareInfo)
  return target;
}

size_t SoftwareInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SoftwareInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string os = 3;
  if (this->os().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_os());
  }

  // string arch = 4;
  if (this->arch().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_arch());
  }

  // string hostname = 5;
  if (this->hostname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  if (this->has_version()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SoftwareInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const SoftwareInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SoftwareInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SoftwareInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SoftwareInfo)
    MergeFrom(*source);
  }
}

void SoftwareInfo::MergeFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SoftwareInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.os().size() > 0) {
    _internal_set_os(from._internal_os());
  }
  if (from.arch().size() > 0) {
    _internal_set_arch(from._internal_arch());
  }
  if (from.hostname().size() > 0) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (from.has_version()) {
    _internal_mutable_version()->::dcv::extensions::SoftwareInfo_VersionNumber::MergeFrom(from._internal_version());
  }
}

void SoftwareInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoftwareInfo::CopyFrom(const SoftwareInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SoftwareInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoftwareInfo::IsInitialized() const {
  return true;
}

void SoftwareInfo::InternalSwap(SoftwareInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  os_.Swap(&other->os_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  arch_.Swap(&other->arch_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  hostname_.Swap(&other->hostname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SoftwareInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_extensions_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Rect::InitAsDefaultInstance() {
}
class Rect::_Internal {
 public:
};

Rect::Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Rect)
}
Rect::Rect(const Rect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Rect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rect::ArenaDtor(void* object) {
  Rect* _this = reinterpret_cast< Rect* >(object);
  (void)_this;
}
void Rect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Rect& Rect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Rect_extensions_2eproto.base);
  return *internal_default_instance();
}


void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&x_)) + sizeof(height_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Rect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_width(), target);
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Rect)
  return target;
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Rect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // uint32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  // uint32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  const Rect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Rect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Rect)
    MergeFrom(*source);
  }
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
}

void Rect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::InternalSwap(Rect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rect, height_)
      + sizeof(Rect::height_)
      - PROTOBUF_FIELD_OFFSET(Rect, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingViews_StreamingView::InitAsDefaultInstance() {
  ::dcv::extensions::_StreamingViews_StreamingView_default_instance_._instance.get_mutable()->local_area_ = const_cast< ::dcv::extensions::Rect*>(
      ::dcv::extensions::Rect::internal_default_instance());
  ::dcv::extensions::_StreamingViews_StreamingView_default_instance_._instance.get_mutable()->remote_offset_ = const_cast< ::dcv::extensions::Point*>(
      ::dcv::extensions::Point::internal_default_instance());
}
class StreamingViews_StreamingView::_Internal {
 public:
  static const ::dcv::extensions::Rect& local_area(const StreamingViews_StreamingView* msg);
  static const ::dcv::extensions::Point& remote_offset(const StreamingViews_StreamingView* msg);
};

const ::dcv::extensions::Rect&
StreamingViews_StreamingView::_Internal::local_area(const StreamingViews_StreamingView* msg) {
  return *msg->local_area_;
}
const ::dcv::extensions::Point&
StreamingViews_StreamingView::_Internal::remote_offset(const StreamingViews_StreamingView* msg) {
  return *msg->remote_offset_;
}
StreamingViews_StreamingView::StreamingViews_StreamingView(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.StreamingViews.StreamingView)
}
StreamingViews_StreamingView::StreamingViews_StreamingView(const StreamingViews_StreamingView& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_local_area()) {
    local_area_ = new ::dcv::extensions::Rect(*from.local_area_);
  } else {
    local_area_ = nullptr;
  }
  if (from._internal_has_remote_offset()) {
    remote_offset_ = new ::dcv::extensions::Point(*from.remote_offset_);
  } else {
    remote_offset_ = nullptr;
  }
  ::memcpy(&zoom_factor_, &from.zoom_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&view_id_) -
    reinterpret_cast<char*>(&zoom_factor_)) + sizeof(view_id_));
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViews.StreamingView)
}

void StreamingViews_StreamingView::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingViews_StreamingView_extensions_2eproto.base);
  ::memset(&local_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_id_) -
      reinterpret_cast<char*>(&local_area_)) + sizeof(view_id_));
}

StreamingViews_StreamingView::~StreamingViews_StreamingView() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViews.StreamingView)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingViews_StreamingView::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete local_area_;
  if (this != internal_default_instance()) delete remote_offset_;
}

void StreamingViews_StreamingView::ArenaDtor(void* object) {
  StreamingViews_StreamingView* _this = reinterpret_cast< StreamingViews_StreamingView* >(object);
  (void)_this;
}
void StreamingViews_StreamingView::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingViews_StreamingView::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingViews_StreamingView& StreamingViews_StreamingView::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingViews_StreamingView_extensions_2eproto.base);
  return *internal_default_instance();
}


void StreamingViews_StreamingView::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViews.StreamingView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && local_area_ != nullptr) {
    delete local_area_;
  }
  local_area_ = nullptr;
  if (GetArena() == nullptr && remote_offset_ != nullptr) {
    delete remote_offset_;
  }
  remote_offset_ = nullptr;
  ::memset(&zoom_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&view_id_) -
      reinterpret_cast<char*>(&zoom_factor_)) + sizeof(view_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingViews_StreamingView::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.Rect local_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double zoom_factor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          zoom_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.Point remote_offset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingViews_StreamingView::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViews.StreamingView)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_view_id(), target);
  }

  // .dcv.extensions.Rect local_area = 2;
  if (this->has_local_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::local_area(this), target, stream);
  }

  // double zoom_factor = 3;
  if (!(this->zoom_factor() <= 0 && this->zoom_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_zoom_factor(), target);
  }

  // .dcv.extensions.Point remote_offset = 4;
  if (this->has_remote_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::remote_offset(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViews.StreamingView)
  return target;
}

size_t StreamingViews_StreamingView::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViews.StreamingView)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.Rect local_area = 2;
  if (this->has_local_area()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *local_area_);
  }

  // .dcv.extensions.Point remote_offset = 4;
  if (this->has_remote_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *remote_offset_);
  }

  // double zoom_factor = 3;
  if (!(this->zoom_factor() <= 0 && this->zoom_factor() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_view_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingViews_StreamingView::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.StreamingViews.StreamingView)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingViews_StreamingView* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingViews_StreamingView>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.StreamingViews.StreamingView)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.StreamingViews.StreamingView)
    MergeFrom(*source);
  }
}

void StreamingViews_StreamingView::MergeFrom(const StreamingViews_StreamingView& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViews.StreamingView)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_local_area()) {
    _internal_mutable_local_area()->::dcv::extensions::Rect::MergeFrom(from._internal_local_area());
  }
  if (from.has_remote_offset()) {
    _internal_mutable_remote_offset()->::dcv::extensions::Point::MergeFrom(from._internal_remote_offset());
  }
  if (!(from.zoom_factor() <= 0 && from.zoom_factor() >= 0)) {
    _internal_set_zoom_factor(from._internal_zoom_factor());
  }
  if (from.view_id() != 0) {
    _internal_set_view_id(from._internal_view_id());
  }
}

void StreamingViews_StreamingView::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.StreamingViews.StreamingView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingViews_StreamingView::CopyFrom(const StreamingViews_StreamingView& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViews.StreamingView)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingViews_StreamingView::IsInitialized() const {
  return true;
}

void StreamingViews_StreamingView::InternalSwap(StreamingViews_StreamingView* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, view_id_)
      + sizeof(StreamingViews_StreamingView::view_id_)
      - PROTOBUF_FIELD_OFFSET(StreamingViews_StreamingView, local_area_)>(
          reinterpret_cast<char*>(&local_area_),
          reinterpret_cast<char*>(&other->local_area_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingViews_StreamingView::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingViews::InitAsDefaultInstance() {
}
class StreamingViews::_Internal {
 public:
};

StreamingViews::StreamingViews(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  streaming_view_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.StreamingViews)
}
StreamingViews::StreamingViews(const StreamingViews& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      streaming_view_(from.streaming_view_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViews)
}

void StreamingViews::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingViews_extensions_2eproto.base);
}

StreamingViews::~StreamingViews() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViews)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingViews::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamingViews::ArenaDtor(void* object) {
  StreamingViews* _this = reinterpret_cast< StreamingViews* >(object);
  (void)_this;
}
void StreamingViews::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingViews::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingViews& StreamingViews::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingViews_extensions_2eproto.base);
  return *internal_default_instance();
}


void StreamingViews::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streaming_view_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingViews::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streaming_view(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingViews::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViews)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streaming_view_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_streaming_view(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViews)
  return target;
}

size_t StreamingViews::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViews)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  total_size += 1UL * this->_internal_streaming_view_size();
  for (const auto& msg : this->streaming_view_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingViews::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.StreamingViews)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingViews* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingViews>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.StreamingViews)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.StreamingViews)
    MergeFrom(*source);
  }
}

void StreamingViews::MergeFrom(const StreamingViews& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViews)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streaming_view_.MergeFrom(from.streaming_view_);
}

void StreamingViews::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.StreamingViews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingViews::CopyFrom(const StreamingViews& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViews)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingViews::IsInitialized() const {
  return true;
}

void StreamingViews::InternalSwap(StreamingViews* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  streaming_view_.InternalSwap(&other->streaming_view_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingViews::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDcvInfoRequest::InitAsDefaultInstance() {
}
class GetDcvInfoRequest::_Internal {
 public:
};

GetDcvInfoRequest::GetDcvInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetDcvInfoRequest)
}
GetDcvInfoRequest::GetDcvInfoRequest(const GetDcvInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetDcvInfoRequest)
}

void GetDcvInfoRequest::SharedCtor() {
}

GetDcvInfoRequest::~GetDcvInfoRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetDcvInfoRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDcvInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetDcvInfoRequest::ArenaDtor(void* object) {
  GetDcvInfoRequest* _this = reinterpret_cast< GetDcvInfoRequest* >(object);
  (void)_this;
}
void GetDcvInfoRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDcvInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDcvInfoRequest& GetDcvInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDcvInfoRequest_extensions_2eproto.base);
  return *internal_default_instance();
}


void GetDcvInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetDcvInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDcvInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDcvInfoRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetDcvInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetDcvInfoRequest)
  return target;
}

size_t GetDcvInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetDcvInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDcvInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetDcvInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDcvInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDcvInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetDcvInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetDcvInfoRequest)
    MergeFrom(*source);
  }
}

void GetDcvInfoRequest::MergeFrom(const GetDcvInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetDcvInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDcvInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetDcvInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDcvInfoRequest::CopyFrom(const GetDcvInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetDcvInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDcvInfoRequest::IsInitialized() const {
  return true;
}

void GetDcvInfoRequest::InternalSwap(GetDcvInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDcvInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetManifestRequest::InitAsDefaultInstance() {
}
class GetManifestRequest::_Internal {
 public:
};

GetManifestRequest::GetManifestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetManifestRequest)
}
GetManifestRequest::GetManifestRequest(const GetManifestRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetManifestRequest)
}

void GetManifestRequest::SharedCtor() {
}

GetManifestRequest::~GetManifestRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetManifestRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetManifestRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetManifestRequest::ArenaDtor(void* object) {
  GetManifestRequest* _this = reinterpret_cast< GetManifestRequest* >(object);
  (void)_this;
}
void GetManifestRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetManifestRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetManifestRequest& GetManifestRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetManifestRequest_extensions_2eproto.base);
  return *internal_default_instance();
}


void GetManifestRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetManifestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetManifestRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetManifestRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetManifestRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetManifestRequest)
  return target;
}

size_t GetManifestRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetManifestRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetManifestRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetManifestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetManifestRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetManifestRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetManifestRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetManifestRequest)
    MergeFrom(*source);
  }
}

void GetManifestRequest::MergeFrom(const GetManifestRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetManifestRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetManifestRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetManifestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetManifestRequest::CopyFrom(const GetManifestRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetManifestRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetManifestRequest::IsInitialized() const {
  return true;
}

void GetManifestRequest::InternalSwap(GetManifestRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetManifestRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupVirtualChannelRequest::InitAsDefaultInstance() {
}
class SetupVirtualChannelRequest::_Internal {
 public:
};

SetupVirtualChannelRequest::SetupVirtualChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetupVirtualChannelRequest)
}
SetupVirtualChannelRequest::SetupVirtualChannelRequest(const SetupVirtualChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtual_channel_name().empty()) {
    virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtual_channel_name(),
      GetArena());
  }
  relay_client_process_id_ = from.relay_client_process_id_;
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetupVirtualChannelRequest)
}

void SetupVirtualChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetupVirtualChannelRequest_extensions_2eproto.base);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relay_client_process_id_ = PROTOBUF_LONGLONG(0);
}

SetupVirtualChannelRequest::~SetupVirtualChannelRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetupVirtualChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupVirtualChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  virtual_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetupVirtualChannelRequest::ArenaDtor(void* object) {
  SetupVirtualChannelRequest* _this = reinterpret_cast< SetupVirtualChannelRequest* >(object);
  (void)_this;
}
void SetupVirtualChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupVirtualChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupVirtualChannelRequest& SetupVirtualChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupVirtualChannelRequest_extensions_2eproto.base);
  return *internal_default_instance();
}


void SetupVirtualChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetupVirtualChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  relay_client_process_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupVirtualChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string virtual_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_virtual_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 relay_client_process_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          relay_client_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupVirtualChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetupVirtualChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_channel_name().data(), static_cast<int>(this->_internal_virtual_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_virtual_channel_name(), target);
  }

  // int64 relay_client_process_id = 2;
  if (this->relay_client_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_relay_client_process_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetupVirtualChannelRequest)
  return target;
}

size_t SetupVirtualChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetupVirtualChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_channel_name());
  }

  // int64 relay_client_process_id = 2;
  if (this->relay_client_process_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_relay_client_process_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupVirtualChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetupVirtualChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupVirtualChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupVirtualChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetupVirtualChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetupVirtualChannelRequest)
    MergeFrom(*source);
  }
}

void SetupVirtualChannelRequest::MergeFrom(const SetupVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetupVirtualChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtual_channel_name().size() > 0) {
    _internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  if (from.relay_client_process_id() != 0) {
    _internal_set_relay_client_process_id(from._internal_relay_client_process_id());
  }
}

void SetupVirtualChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetupVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupVirtualChannelRequest::CopyFrom(const SetupVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetupVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupVirtualChannelRequest::IsInitialized() const {
  return true;
}

void SetupVirtualChannelRequest::InternalSwap(SetupVirtualChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  virtual_channel_name_.Swap(&other->virtual_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(relay_client_process_id_, other->relay_client_process_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupVirtualChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseVirtualChannelRequest::InitAsDefaultInstance() {
}
class CloseVirtualChannelRequest::_Internal {
 public:
};

CloseVirtualChannelRequest::CloseVirtualChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.CloseVirtualChannelRequest)
}
CloseVirtualChannelRequest::CloseVirtualChannelRequest(const CloseVirtualChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtual_channel_name().empty()) {
    virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtual_channel_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.CloseVirtualChannelRequest)
}

void CloseVirtualChannelRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseVirtualChannelRequest_extensions_2eproto.base);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CloseVirtualChannelRequest::~CloseVirtualChannelRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.CloseVirtualChannelRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseVirtualChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  virtual_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseVirtualChannelRequest::ArenaDtor(void* object) {
  CloseVirtualChannelRequest* _this = reinterpret_cast< CloseVirtualChannelRequest* >(object);
  (void)_this;
}
void CloseVirtualChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseVirtualChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseVirtualChannelRequest& CloseVirtualChannelRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseVirtualChannelRequest_extensions_2eproto.base);
  return *internal_default_instance();
}


void CloseVirtualChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.CloseVirtualChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseVirtualChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string virtual_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_virtual_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseVirtualChannelRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.CloseVirtualChannelRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_channel_name().data(), static_cast<int>(this->_internal_virtual_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_virtual_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.CloseVirtualChannelRequest)
  return target;
}

size_t CloseVirtualChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.CloseVirtualChannelRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_channel_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseVirtualChannelRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.CloseVirtualChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseVirtualChannelRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseVirtualChannelRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.CloseVirtualChannelRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.CloseVirtualChannelRequest)
    MergeFrom(*source);
  }
}

void CloseVirtualChannelRequest::MergeFrom(const CloseVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.CloseVirtualChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtual_channel_name().size() > 0) {
    _internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
}

void CloseVirtualChannelRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.CloseVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseVirtualChannelRequest::CopyFrom(const CloseVirtualChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.CloseVirtualChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseVirtualChannelRequest::IsInitialized() const {
  return true;
}

void CloseVirtualChannelRequest::InternalSwap(CloseVirtualChannelRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  virtual_channel_name_.Swap(&other->virtual_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseVirtualChannelRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCursorPointRequest::InitAsDefaultInstance() {
  ::dcv::extensions::_SetCursorPointRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::dcv::extensions::Point*>(
      ::dcv::extensions::Point::internal_default_instance());
}
class SetCursorPointRequest::_Internal {
 public:
  static const ::dcv::extensions::Point& point(const SetCursorPointRequest* msg);
};

const ::dcv::extensions::Point&
SetCursorPointRequest::_Internal::point(const SetCursorPointRequest* msg) {
  return *msg->point_;
}
SetCursorPointRequest::SetCursorPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetCursorPointRequest)
}
SetCursorPointRequest::SetCursorPointRequest(const SetCursorPointRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::dcv::extensions::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetCursorPointRequest)
}

void SetCursorPointRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetCursorPointRequest_extensions_2eproto.base);
  point_ = nullptr;
}

SetCursorPointRequest::~SetCursorPointRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetCursorPointRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetCursorPointRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete point_;
}

void SetCursorPointRequest::ArenaDtor(void* object) {
  SetCursorPointRequest* _this = reinterpret_cast< SetCursorPointRequest* >(object);
  (void)_this;
}
void SetCursorPointRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCursorPointRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCursorPointRequest& SetCursorPointRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCursorPointRequest_extensions_2eproto.base);
  return *internal_default_instance();
}


void SetCursorPointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetCursorPointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCursorPointRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCursorPointRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetCursorPointRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetCursorPointRequest)
  return target;
}

size_t SetCursorPointRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetCursorPointRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCursorPointRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetCursorPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCursorPointRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCursorPointRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetCursorPointRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetCursorPointRequest)
    MergeFrom(*source);
  }
}

void SetCursorPointRequest::MergeFrom(const SetCursorPointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetCursorPointRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    _internal_mutable_point()->::dcv::extensions::Point::MergeFrom(from._internal_point());
  }
}

void SetCursorPointRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetCursorPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCursorPointRequest::CopyFrom(const SetCursorPointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetCursorPointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCursorPointRequest::IsInitialized() const {
  return true;
}

void SetCursorPointRequest::InternalSwap(SetCursorPointRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCursorPointRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamingViewsRequest::InitAsDefaultInstance() {
}
class GetStreamingViewsRequest::_Internal {
 public:
};

GetStreamingViewsRequest::GetStreamingViewsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetStreamingViewsRequest)
}
GetStreamingViewsRequest::GetStreamingViewsRequest(const GetStreamingViewsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetStreamingViewsRequest)
}

void GetStreamingViewsRequest::SharedCtor() {
}

GetStreamingViewsRequest::~GetStreamingViewsRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetStreamingViewsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStreamingViewsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetStreamingViewsRequest::ArenaDtor(void* object) {
  GetStreamingViewsRequest* _this = reinterpret_cast< GetStreamingViewsRequest* >(object);
  (void)_this;
}
void GetStreamingViewsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStreamingViewsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamingViewsRequest& GetStreamingViewsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamingViewsRequest_extensions_2eproto.base);
  return *internal_default_instance();
}


void GetStreamingViewsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetStreamingViewsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamingViewsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamingViewsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetStreamingViewsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetStreamingViewsRequest)
  return target;
}

size_t GetStreamingViewsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetStreamingViewsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamingViewsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetStreamingViewsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamingViewsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamingViewsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetStreamingViewsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetStreamingViewsRequest)
    MergeFrom(*source);
  }
}

void GetStreamingViewsRequest::MergeFrom(const GetStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetStreamingViewsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetStreamingViewsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamingViewsRequest::CopyFrom(const GetStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamingViewsRequest::IsInitialized() const {
  return true;
}

void GetStreamingViewsRequest::InternalSwap(GetStreamingViewsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamingViewsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsPointInsideStreamingViewsRequest::InitAsDefaultInstance() {
  ::dcv::extensions::_IsPointInsideStreamingViewsRequest_default_instance_._instance.get_mutable()->point_ = const_cast< ::dcv::extensions::Point*>(
      ::dcv::extensions::Point::internal_default_instance());
}
class IsPointInsideStreamingViewsRequest::_Internal {
 public:
  static const ::dcv::extensions::Point& point(const IsPointInsideStreamingViewsRequest* msg);
};

const ::dcv::extensions::Point&
IsPointInsideStreamingViewsRequest::_Internal::point(const IsPointInsideStreamingViewsRequest* msg) {
  return *msg->point_;
}
IsPointInsideStreamingViewsRequest::IsPointInsideStreamingViewsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
}
IsPointInsideStreamingViewsRequest::IsPointInsideStreamingViewsRequest(const IsPointInsideStreamingViewsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_point()) {
    point_ = new ::dcv::extensions::Point(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
}

void IsPointInsideStreamingViewsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto.base);
  point_ = nullptr;
}

IsPointInsideStreamingViewsRequest::~IsPointInsideStreamingViewsRequest() {
  // @@protoc_insertion_point(destructor:dcv.extensions.IsPointInsideStreamingViewsRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsPointInsideStreamingViewsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete point_;
}

void IsPointInsideStreamingViewsRequest::ArenaDtor(void* object) {
  IsPointInsideStreamingViewsRequest* _this = reinterpret_cast< IsPointInsideStreamingViewsRequest* >(object);
  (void)_this;
}
void IsPointInsideStreamingViewsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsPointInsideStreamingViewsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsPointInsideStreamingViewsRequest& IsPointInsideStreamingViewsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsPointInsideStreamingViewsRequest_extensions_2eproto.base);
  return *internal_default_instance();
}


void IsPointInsideStreamingViewsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsPointInsideStreamingViewsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.Point point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsPointInsideStreamingViewsRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.IsPointInsideStreamingViewsRequest)
  return target;
}

size_t IsPointInsideStreamingViewsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.Point point = 1;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsPointInsideStreamingViewsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsPointInsideStreamingViewsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsPointInsideStreamingViewsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.IsPointInsideStreamingViewsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.IsPointInsideStreamingViewsRequest)
    MergeFrom(*source);
  }
}

void IsPointInsideStreamingViewsRequest::MergeFrom(const IsPointInsideStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_point()) {
    _internal_mutable_point()->::dcv::extensions::Point::MergeFrom(from._internal_point());
  }
}

void IsPointInsideStreamingViewsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPointInsideStreamingViewsRequest::CopyFrom(const IsPointInsideStreamingViewsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPointInsideStreamingViewsRequest::IsInitialized() const {
  return true;
}

void IsPointInsideStreamingViewsRequest::InternalSwap(IsPointInsideStreamingViewsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsPointInsideStreamingViewsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDcvInfoResponse::InitAsDefaultInstance() {
  ::dcv::extensions::_GetDcvInfoResponse_default_instance_._instance.get_mutable()->server_info_ = const_cast< ::dcv::extensions::SoftwareInfo*>(
      ::dcv::extensions::SoftwareInfo::internal_default_instance());
  ::dcv::extensions::_GetDcvInfoResponse_default_instance_._instance.get_mutable()->client_info_ = const_cast< ::dcv::extensions::SoftwareInfo*>(
      ::dcv::extensions::SoftwareInfo::internal_default_instance());
}
class GetDcvInfoResponse::_Internal {
 public:
  static const ::dcv::extensions::SoftwareInfo& server_info(const GetDcvInfoResponse* msg);
  static const ::dcv::extensions::SoftwareInfo& client_info(const GetDcvInfoResponse* msg);
};

const ::dcv::extensions::SoftwareInfo&
GetDcvInfoResponse::_Internal::server_info(const GetDcvInfoResponse* msg) {
  return *msg->server_info_;
}
const ::dcv::extensions::SoftwareInfo&
GetDcvInfoResponse::_Internal::client_info(const GetDcvInfoResponse* msg) {
  return *msg->client_info_;
}
GetDcvInfoResponse::GetDcvInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetDcvInfoResponse)
}
GetDcvInfoResponse::GetDcvInfoResponse(const GetDcvInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_info()) {
    server_info_ = new ::dcv::extensions::SoftwareInfo(*from.server_info_);
  } else {
    server_info_ = nullptr;
  }
  if (from._internal_has_client_info()) {
    client_info_ = new ::dcv::extensions::SoftwareInfo(*from.client_info_);
  } else {
    client_info_ = nullptr;
  }
  ::memcpy(&dcv_process_id_, &from.dcv_process_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dcv_role_) -
    reinterpret_cast<char*>(&dcv_process_id_)) + sizeof(dcv_role_));
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetDcvInfoResponse)
}

void GetDcvInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetDcvInfoResponse_extensions_2eproto.base);
  ::memset(&server_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dcv_role_) -
      reinterpret_cast<char*>(&server_info_)) + sizeof(dcv_role_));
}

GetDcvInfoResponse::~GetDcvInfoResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetDcvInfoResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetDcvInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete server_info_;
  if (this != internal_default_instance()) delete client_info_;
}

void GetDcvInfoResponse::ArenaDtor(void* object) {
  GetDcvInfoResponse* _this = reinterpret_cast< GetDcvInfoResponse* >(object);
  (void)_this;
}
void GetDcvInfoResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetDcvInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDcvInfoResponse& GetDcvInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDcvInfoResponse_extensions_2eproto.base);
  return *internal_default_instance();
}


void GetDcvInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetDcvInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && server_info_ != nullptr) {
    delete server_info_;
  }
  server_info_ = nullptr;
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
  ::memset(&dcv_process_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dcv_role_) -
      reinterpret_cast<char*>(&dcv_process_id_)) + sizeof(dcv_role_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetDcvInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dcv_role(static_cast<::dcv::extensions::GetDcvInfoResponse_DcvRole>(val));
        } else goto handle_unusual;
        continue;
      // int64 dcv_process_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dcv_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.SoftwareInfo server_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.SoftwareInfo client_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDcvInfoResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetDcvInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  if (this->dcv_role() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dcv_role(), target);
  }

  // int64 dcv_process_id = 2;
  if (this->dcv_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_dcv_process_id(), target);
  }

  // .dcv.extensions.SoftwareInfo server_info = 3;
  if (this->has_server_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::server_info(this), target, stream);
  }

  // .dcv.extensions.SoftwareInfo client_info = 4;
  if (this->has_client_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::client_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetDcvInfoResponse)
  return target;
}

size_t GetDcvInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetDcvInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.SoftwareInfo server_info = 3;
  if (this->has_server_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *server_info_);
  }

  // .dcv.extensions.SoftwareInfo client_info = 4;
  if (this->has_client_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *client_info_);
  }

  // int64 dcv_process_id = 2;
  if (this->dcv_process_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_dcv_process_id());
  }

  // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  if (this->dcv_role() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dcv_role());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDcvInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetDcvInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDcvInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDcvInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetDcvInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetDcvInfoResponse)
    MergeFrom(*source);
  }
}

void GetDcvInfoResponse::MergeFrom(const GetDcvInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetDcvInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_info()) {
    _internal_mutable_server_info()->::dcv::extensions::SoftwareInfo::MergeFrom(from._internal_server_info());
  }
  if (from.has_client_info()) {
    _internal_mutable_client_info()->::dcv::extensions::SoftwareInfo::MergeFrom(from._internal_client_info());
  }
  if (from.dcv_process_id() != 0) {
    _internal_set_dcv_process_id(from._internal_dcv_process_id());
  }
  if (from.dcv_role() != 0) {
    _internal_set_dcv_role(from._internal_dcv_role());
  }
}

void GetDcvInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetDcvInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDcvInfoResponse::CopyFrom(const GetDcvInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetDcvInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDcvInfoResponse::IsInitialized() const {
  return true;
}

void GetDcvInfoResponse::InternalSwap(GetDcvInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, dcv_role_)
      + sizeof(GetDcvInfoResponse::dcv_role_)
      - PROTOBUF_FIELD_OFFSET(GetDcvInfoResponse, server_info_)>(
          reinterpret_cast<char*>(&server_info_),
          reinterpret_cast<char*>(&other->server_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDcvInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetManifestResponse::InitAsDefaultInstance() {
}
class GetManifestResponse::_Internal {
 public:
};

GetManifestResponse::GetManifestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetManifestResponse)
}
GetManifestResponse::GetManifestResponse(const GetManifestResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  manifest_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_manifest_path().empty()) {
    manifest_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_manifest_path(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetManifestResponse)
}

void GetManifestResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetManifestResponse_extensions_2eproto.base);
  manifest_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetManifestResponse::~GetManifestResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetManifestResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetManifestResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  manifest_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetManifestResponse::ArenaDtor(void* object) {
  GetManifestResponse* _this = reinterpret_cast< GetManifestResponse* >(object);
  (void)_this;
}
void GetManifestResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetManifestResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetManifestResponse& GetManifestResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetManifestResponse_extensions_2eproto.base);
  return *internal_default_instance();
}


void GetManifestResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetManifestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  manifest_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetManifestResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string manifest_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_manifest_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.GetManifestResponse.manifest_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetManifestResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetManifestResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string manifest_path = 1;
  if (this->manifest_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manifest_path().data(), static_cast<int>(this->_internal_manifest_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.GetManifestResponse.manifest_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_manifest_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetManifestResponse)
  return target;
}

size_t GetManifestResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetManifestResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string manifest_path = 1;
  if (this->manifest_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manifest_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetManifestResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetManifestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetManifestResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetManifestResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetManifestResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetManifestResponse)
    MergeFrom(*source);
  }
}

void GetManifestResponse::MergeFrom(const GetManifestResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetManifestResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.manifest_path().size() > 0) {
    _internal_set_manifest_path(from._internal_manifest_path());
  }
}

void GetManifestResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetManifestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetManifestResponse::CopyFrom(const GetManifestResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetManifestResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetManifestResponse::IsInitialized() const {
  return true;
}

void GetManifestResponse::InternalSwap(GetManifestResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  manifest_path_.Swap(&other->manifest_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetManifestResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupVirtualChannelResponse::InitAsDefaultInstance() {
}
class SetupVirtualChannelResponse::_Internal {
 public:
};

SetupVirtualChannelResponse::SetupVirtualChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetupVirtualChannelResponse)
}
SetupVirtualChannelResponse::SetupVirtualChannelResponse(const SetupVirtualChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtual_channel_name().empty()) {
    virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtual_channel_name(),
      GetArena());
  }
  relay_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_relay_path().empty()) {
    relay_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_relay_path(),
      GetArena());
  }
  virtual_channel_auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtual_channel_auth_token().empty()) {
    virtual_channel_auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtual_channel_auth_token(),
      GetArena());
  }
  relay_server_process_id_ = from.relay_server_process_id_;
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetupVirtualChannelResponse)
}

void SetupVirtualChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetupVirtualChannelResponse_extensions_2eproto.base);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relay_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virtual_channel_auth_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relay_server_process_id_ = PROTOBUF_LONGLONG(0);
}

SetupVirtualChannelResponse::~SetupVirtualChannelResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetupVirtualChannelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetupVirtualChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  virtual_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  relay_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  virtual_channel_auth_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetupVirtualChannelResponse::ArenaDtor(void* object) {
  SetupVirtualChannelResponse* _this = reinterpret_cast< SetupVirtualChannelResponse* >(object);
  (void)_this;
}
void SetupVirtualChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupVirtualChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupVirtualChannelResponse& SetupVirtualChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupVirtualChannelResponse_extensions_2eproto.base);
  return *internal_default_instance();
}


void SetupVirtualChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetupVirtualChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  relay_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  virtual_channel_auth_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  relay_server_process_id_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupVirtualChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string virtual_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_virtual_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string relay_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_relay_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.SetupVirtualChannelResponse.relay_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 relay_server_process_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          relay_server_process_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes virtual_channel_auth_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_virtual_channel_auth_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupVirtualChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetupVirtualChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_channel_name().data(), static_cast<int>(this->_internal_virtual_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_virtual_channel_name(), target);
  }

  // string relay_path = 2;
  if (this->relay_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_relay_path().data(), static_cast<int>(this->_internal_relay_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.SetupVirtualChannelResponse.relay_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_relay_path(), target);
  }

  // int64 relay_server_process_id = 3;
  if (this->relay_server_process_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_relay_server_process_id(), target);
  }

  // bytes virtual_channel_auth_token = 4;
  if (this->virtual_channel_auth_token().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_virtual_channel_auth_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetupVirtualChannelResponse)
  return target;
}

size_t SetupVirtualChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetupVirtualChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_channel_name());
  }

  // string relay_path = 2;
  if (this->relay_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_relay_path());
  }

  // bytes virtual_channel_auth_token = 4;
  if (this->virtual_channel_auth_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_virtual_channel_auth_token());
  }

  // int64 relay_server_process_id = 3;
  if (this->relay_server_process_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_relay_server_process_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupVirtualChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetupVirtualChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupVirtualChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupVirtualChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetupVirtualChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetupVirtualChannelResponse)
    MergeFrom(*source);
  }
}

void SetupVirtualChannelResponse::MergeFrom(const SetupVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetupVirtualChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtual_channel_name().size() > 0) {
    _internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
  if (from.relay_path().size() > 0) {
    _internal_set_relay_path(from._internal_relay_path());
  }
  if (from.virtual_channel_auth_token().size() > 0) {
    _internal_set_virtual_channel_auth_token(from._internal_virtual_channel_auth_token());
  }
  if (from.relay_server_process_id() != 0) {
    _internal_set_relay_server_process_id(from._internal_relay_server_process_id());
  }
}

void SetupVirtualChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetupVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupVirtualChannelResponse::CopyFrom(const SetupVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetupVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupVirtualChannelResponse::IsInitialized() const {
  return true;
}

void SetupVirtualChannelResponse::InternalSwap(SetupVirtualChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  virtual_channel_name_.Swap(&other->virtual_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  relay_path_.Swap(&other->relay_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  virtual_channel_auth_token_.Swap(&other->virtual_channel_auth_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(relay_server_process_id_, other->relay_server_process_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupVirtualChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CloseVirtualChannelResponse::InitAsDefaultInstance() {
}
class CloseVirtualChannelResponse::_Internal {
 public:
};

CloseVirtualChannelResponse::CloseVirtualChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.CloseVirtualChannelResponse)
}
CloseVirtualChannelResponse::CloseVirtualChannelResponse(const CloseVirtualChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtual_channel_name().empty()) {
    virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtual_channel_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.CloseVirtualChannelResponse)
}

void CloseVirtualChannelResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CloseVirtualChannelResponse_extensions_2eproto.base);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CloseVirtualChannelResponse::~CloseVirtualChannelResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.CloseVirtualChannelResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CloseVirtualChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  virtual_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CloseVirtualChannelResponse::ArenaDtor(void* object) {
  CloseVirtualChannelResponse* _this = reinterpret_cast< CloseVirtualChannelResponse* >(object);
  (void)_this;
}
void CloseVirtualChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CloseVirtualChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CloseVirtualChannelResponse& CloseVirtualChannelResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CloseVirtualChannelResponse_extensions_2eproto.base);
  return *internal_default_instance();
}


void CloseVirtualChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.CloseVirtualChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseVirtualChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string virtual_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_virtual_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CloseVirtualChannelResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.CloseVirtualChannelResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_channel_name().data(), static_cast<int>(this->_internal_virtual_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_virtual_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.CloseVirtualChannelResponse)
  return target;
}

size_t CloseVirtualChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.CloseVirtualChannelResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_channel_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CloseVirtualChannelResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.CloseVirtualChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CloseVirtualChannelResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CloseVirtualChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.CloseVirtualChannelResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.CloseVirtualChannelResponse)
    MergeFrom(*source);
  }
}

void CloseVirtualChannelResponse::MergeFrom(const CloseVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.CloseVirtualChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtual_channel_name().size() > 0) {
    _internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
}

void CloseVirtualChannelResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.CloseVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseVirtualChannelResponse::CopyFrom(const CloseVirtualChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.CloseVirtualChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseVirtualChannelResponse::IsInitialized() const {
  return true;
}

void CloseVirtualChannelResponse::InternalSwap(CloseVirtualChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  virtual_channel_name_.Swap(&other->virtual_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseVirtualChannelResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetCursorPointResponse::InitAsDefaultInstance() {
}
class SetCursorPointResponse::_Internal {
 public:
};

SetCursorPointResponse::SetCursorPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.SetCursorPointResponse)
}
SetCursorPointResponse::SetCursorPointResponse(const SetCursorPointResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.SetCursorPointResponse)
}

void SetCursorPointResponse::SharedCtor() {
}

SetCursorPointResponse::~SetCursorPointResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.SetCursorPointResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SetCursorPointResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SetCursorPointResponse::ArenaDtor(void* object) {
  SetCursorPointResponse* _this = reinterpret_cast< SetCursorPointResponse* >(object);
  (void)_this;
}
void SetCursorPointResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetCursorPointResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetCursorPointResponse& SetCursorPointResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetCursorPointResponse_extensions_2eproto.base);
  return *internal_default_instance();
}


void SetCursorPointResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.SetCursorPointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetCursorPointResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetCursorPointResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.SetCursorPointResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.SetCursorPointResponse)
  return target;
}

size_t SetCursorPointResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.SetCursorPointResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetCursorPointResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.SetCursorPointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SetCursorPointResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetCursorPointResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.SetCursorPointResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.SetCursorPointResponse)
    MergeFrom(*source);
  }
}

void SetCursorPointResponse::MergeFrom(const SetCursorPointResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.SetCursorPointResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SetCursorPointResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.SetCursorPointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetCursorPointResponse::CopyFrom(const SetCursorPointResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.SetCursorPointResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetCursorPointResponse::IsInitialized() const {
  return true;
}

void SetCursorPointResponse::InternalSwap(SetCursorPointResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetCursorPointResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStreamingViewsResponse::InitAsDefaultInstance() {
  ::dcv::extensions::_GetStreamingViewsResponse_default_instance_._instance.get_mutable()->streaming_views_ = const_cast< ::dcv::extensions::StreamingViews*>(
      ::dcv::extensions::StreamingViews::internal_default_instance());
}
class GetStreamingViewsResponse::_Internal {
 public:
  static const ::dcv::extensions::StreamingViews& streaming_views(const GetStreamingViewsResponse* msg);
};

const ::dcv::extensions::StreamingViews&
GetStreamingViewsResponse::_Internal::streaming_views(const GetStreamingViewsResponse* msg) {
  return *msg->streaming_views_;
}
GetStreamingViewsResponse::GetStreamingViewsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.GetStreamingViewsResponse)
}
GetStreamingViewsResponse::GetStreamingViewsResponse(const GetStreamingViewsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_streaming_views()) {
    streaming_views_ = new ::dcv::extensions::StreamingViews(*from.streaming_views_);
  } else {
    streaming_views_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.GetStreamingViewsResponse)
}

void GetStreamingViewsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStreamingViewsResponse_extensions_2eproto.base);
  streaming_views_ = nullptr;
}

GetStreamingViewsResponse::~GetStreamingViewsResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.GetStreamingViewsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetStreamingViewsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete streaming_views_;
}

void GetStreamingViewsResponse::ArenaDtor(void* object) {
  GetStreamingViewsResponse* _this = reinterpret_cast< GetStreamingViewsResponse* >(object);
  (void)_this;
}
void GetStreamingViewsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStreamingViewsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStreamingViewsResponse& GetStreamingViewsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStreamingViewsResponse_extensions_2eproto.base);
  return *internal_default_instance();
}


void GetStreamingViewsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.GetStreamingViewsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && streaming_views_ != nullptr) {
    delete streaming_views_;
  }
  streaming_views_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStreamingViewsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.StreamingViews streaming_views = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_views(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStreamingViewsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.GetStreamingViewsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::streaming_views(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.GetStreamingViewsResponse)
  return target;
}

size_t GetStreamingViewsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.GetStreamingViewsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streaming_views_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStreamingViewsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.GetStreamingViewsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStreamingViewsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStreamingViewsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.GetStreamingViewsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.GetStreamingViewsResponse)
    MergeFrom(*source);
  }
}

void GetStreamingViewsResponse::MergeFrom(const GetStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.GetStreamingViewsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_streaming_views()) {
    _internal_mutable_streaming_views()->::dcv::extensions::StreamingViews::MergeFrom(from._internal_streaming_views());
  }
}

void GetStreamingViewsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.GetStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStreamingViewsResponse::CopyFrom(const GetStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.GetStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStreamingViewsResponse::IsInitialized() const {
  return true;
}

void GetStreamingViewsResponse::InternalSwap(GetStreamingViewsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(streaming_views_, other->streaming_views_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStreamingViewsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IsPointInsideStreamingViewsResponse::InitAsDefaultInstance() {
}
class IsPointInsideStreamingViewsResponse::_Internal {
 public:
};

IsPointInsideStreamingViewsResponse::IsPointInsideStreamingViewsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
}
IsPointInsideStreamingViewsResponse::IsPointInsideStreamingViewsResponse(const IsPointInsideStreamingViewsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  view_id_ = from.view_id_;
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
}

void IsPointInsideStreamingViewsResponse::SharedCtor() {
  view_id_ = 0;
}

IsPointInsideStreamingViewsResponse::~IsPointInsideStreamingViewsResponse() {
  // @@protoc_insertion_point(destructor:dcv.extensions.IsPointInsideStreamingViewsResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void IsPointInsideStreamingViewsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void IsPointInsideStreamingViewsResponse::ArenaDtor(void* object) {
  IsPointInsideStreamingViewsResponse* _this = reinterpret_cast< IsPointInsideStreamingViewsResponse* >(object);
  (void)_this;
}
void IsPointInsideStreamingViewsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IsPointInsideStreamingViewsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IsPointInsideStreamingViewsResponse& IsPointInsideStreamingViewsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IsPointInsideStreamingViewsResponse_extensions_2eproto.base);
  return *internal_default_instance();
}


void IsPointInsideStreamingViewsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  view_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsPointInsideStreamingViewsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IsPointInsideStreamingViewsResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_view_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.IsPointInsideStreamingViewsResponse)
  return target;
}

size_t IsPointInsideStreamingViewsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 view_id = 1;
  if (this->view_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_view_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsPointInsideStreamingViewsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsPointInsideStreamingViewsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IsPointInsideStreamingViewsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.IsPointInsideStreamingViewsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.IsPointInsideStreamingViewsResponse)
    MergeFrom(*source);
  }
}

void IsPointInsideStreamingViewsResponse::MergeFrom(const IsPointInsideStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.view_id() != 0) {
    _internal_set_view_id(from._internal_view_id());
  }
}

void IsPointInsideStreamingViewsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsPointInsideStreamingViewsResponse::CopyFrom(const IsPointInsideStreamingViewsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.IsPointInsideStreamingViewsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsPointInsideStreamingViewsResponse::IsInitialized() const {
  return true;
}

void IsPointInsideStreamingViewsResponse::InternalSwap(IsPointInsideStreamingViewsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(view_id_, other->view_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsPointInsideStreamingViewsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VirtualChannelReadyEvent::InitAsDefaultInstance() {
}
class VirtualChannelReadyEvent::_Internal {
 public:
};

VirtualChannelReadyEvent::VirtualChannelReadyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.VirtualChannelReadyEvent)
}
VirtualChannelReadyEvent::VirtualChannelReadyEvent(const VirtualChannelReadyEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtual_channel_name().empty()) {
    virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtual_channel_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.VirtualChannelReadyEvent)
}

void VirtualChannelReadyEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VirtualChannelReadyEvent_extensions_2eproto.base);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VirtualChannelReadyEvent::~VirtualChannelReadyEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.VirtualChannelReadyEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VirtualChannelReadyEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  virtual_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VirtualChannelReadyEvent::ArenaDtor(void* object) {
  VirtualChannelReadyEvent* _this = reinterpret_cast< VirtualChannelReadyEvent* >(object);
  (void)_this;
}
void VirtualChannelReadyEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualChannelReadyEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtualChannelReadyEvent& VirtualChannelReadyEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtualChannelReadyEvent_extensions_2eproto.base);
  return *internal_default_instance();
}


void VirtualChannelReadyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.VirtualChannelReadyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualChannelReadyEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string virtual_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_virtual_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualChannelReadyEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.VirtualChannelReadyEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_channel_name().data(), static_cast<int>(this->_internal_virtual_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_virtual_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.VirtualChannelReadyEvent)
  return target;
}

size_t VirtualChannelReadyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.VirtualChannelReadyEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_channel_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtualChannelReadyEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.VirtualChannelReadyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualChannelReadyEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirtualChannelReadyEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.VirtualChannelReadyEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.VirtualChannelReadyEvent)
    MergeFrom(*source);
  }
}

void VirtualChannelReadyEvent::MergeFrom(const VirtualChannelReadyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.VirtualChannelReadyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtual_channel_name().size() > 0) {
    _internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
}

void VirtualChannelReadyEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.VirtualChannelReadyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualChannelReadyEvent::CopyFrom(const VirtualChannelReadyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.VirtualChannelReadyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualChannelReadyEvent::IsInitialized() const {
  return true;
}

void VirtualChannelReadyEvent::InternalSwap(VirtualChannelReadyEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  virtual_channel_name_.Swap(&other->virtual_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualChannelReadyEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VirtualChannelClosedEvent::InitAsDefaultInstance() {
}
class VirtualChannelClosedEvent::_Internal {
 public:
};

VirtualChannelClosedEvent::VirtualChannelClosedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.VirtualChannelClosedEvent)
}
VirtualChannelClosedEvent::VirtualChannelClosedEvent(const VirtualChannelClosedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_virtual_channel_name().empty()) {
    virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_virtual_channel_name(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.VirtualChannelClosedEvent)
}

void VirtualChannelClosedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VirtualChannelClosedEvent_extensions_2eproto.base);
  virtual_channel_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VirtualChannelClosedEvent::~VirtualChannelClosedEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.VirtualChannelClosedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VirtualChannelClosedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  virtual_channel_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VirtualChannelClosedEvent::ArenaDtor(void* object) {
  VirtualChannelClosedEvent* _this = reinterpret_cast< VirtualChannelClosedEvent* >(object);
  (void)_this;
}
void VirtualChannelClosedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VirtualChannelClosedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VirtualChannelClosedEvent& VirtualChannelClosedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VirtualChannelClosedEvent_extensions_2eproto.base);
  return *internal_default_instance();
}


void VirtualChannelClosedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.VirtualChannelClosedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VirtualChannelClosedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string virtual_channel_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_virtual_channel_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VirtualChannelClosedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.VirtualChannelClosedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_virtual_channel_name().data(), static_cast<int>(this->_internal_virtual_channel_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_virtual_channel_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.VirtualChannelClosedEvent)
  return target;
}

size_t VirtualChannelClosedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.VirtualChannelClosedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string virtual_channel_name = 1;
  if (this->virtual_channel_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_virtual_channel_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VirtualChannelClosedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.VirtualChannelClosedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const VirtualChannelClosedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VirtualChannelClosedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.VirtualChannelClosedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.VirtualChannelClosedEvent)
    MergeFrom(*source);
  }
}

void VirtualChannelClosedEvent::MergeFrom(const VirtualChannelClosedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.VirtualChannelClosedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.virtual_channel_name().size() > 0) {
    _internal_set_virtual_channel_name(from._internal_virtual_channel_name());
  }
}

void VirtualChannelClosedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.VirtualChannelClosedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualChannelClosedEvent::CopyFrom(const VirtualChannelClosedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.VirtualChannelClosedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualChannelClosedEvent::IsInitialized() const {
  return true;
}

void VirtualChannelClosedEvent::InternalSwap(VirtualChannelClosedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  virtual_channel_name_.Swap(&other->virtual_channel_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VirtualChannelClosedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingViewsChangedEvent::InitAsDefaultInstance() {
  ::dcv::extensions::_StreamingViewsChangedEvent_default_instance_._instance.get_mutable()->streaming_views_ = const_cast< ::dcv::extensions::StreamingViews*>(
      ::dcv::extensions::StreamingViews::internal_default_instance());
}
class StreamingViewsChangedEvent::_Internal {
 public:
  static const ::dcv::extensions::StreamingViews& streaming_views(const StreamingViewsChangedEvent* msg);
};

const ::dcv::extensions::StreamingViews&
StreamingViewsChangedEvent::_Internal::streaming_views(const StreamingViewsChangedEvent* msg) {
  return *msg->streaming_views_;
}
StreamingViewsChangedEvent::StreamingViewsChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.StreamingViewsChangedEvent)
}
StreamingViewsChangedEvent::StreamingViewsChangedEvent(const StreamingViewsChangedEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_streaming_views()) {
    streaming_views_ = new ::dcv::extensions::StreamingViews(*from.streaming_views_);
  } else {
    streaming_views_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.StreamingViewsChangedEvent)
}

void StreamingViewsChangedEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingViewsChangedEvent_extensions_2eproto.base);
  streaming_views_ = nullptr;
}

StreamingViewsChangedEvent::~StreamingViewsChangedEvent() {
  // @@protoc_insertion_point(destructor:dcv.extensions.StreamingViewsChangedEvent)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamingViewsChangedEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete streaming_views_;
}

void StreamingViewsChangedEvent::ArenaDtor(void* object) {
  StreamingViewsChangedEvent* _this = reinterpret_cast< StreamingViewsChangedEvent* >(object);
  (void)_this;
}
void StreamingViewsChangedEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingViewsChangedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingViewsChangedEvent& StreamingViewsChangedEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingViewsChangedEvent_extensions_2eproto.base);
  return *internal_default_instance();
}


void StreamingViewsChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.StreamingViewsChangedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && streaming_views_ != nullptr) {
    delete streaming_views_;
  }
  streaming_views_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamingViewsChangedEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.StreamingViews streaming_views = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_views(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingViewsChangedEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.StreamingViewsChangedEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::streaming_views(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.StreamingViewsChangedEvent)
  return target;
}

size_t StreamingViewsChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.StreamingViewsChangedEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .dcv.extensions.StreamingViews streaming_views = 1;
  if (this->has_streaming_views()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *streaming_views_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingViewsChangedEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.StreamingViewsChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingViewsChangedEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingViewsChangedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.StreamingViewsChangedEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.StreamingViewsChangedEvent)
    MergeFrom(*source);
  }
}

void StreamingViewsChangedEvent::MergeFrom(const StreamingViewsChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.StreamingViewsChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_streaming_views()) {
    _internal_mutable_streaming_views()->::dcv::extensions::StreamingViews::MergeFrom(from._internal_streaming_views());
  }
}

void StreamingViewsChangedEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.StreamingViewsChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingViewsChangedEvent::CopyFrom(const StreamingViewsChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.StreamingViewsChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingViewsChangedEvent::IsInitialized() const {
  return true;
}

void StreamingViewsChangedEvent::InternalSwap(StreamingViewsChangedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(streaming_views_, other->streaming_views_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingViewsChangedEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Request::InitAsDefaultInstance() {
  ::dcv::extensions::_Request_default_instance_.get_dcv_info_request_ = const_cast< ::dcv::extensions::GetDcvInfoRequest*>(
      ::dcv::extensions::GetDcvInfoRequest::internal_default_instance());
  ::dcv::extensions::_Request_default_instance_.get_manifest_request_ = const_cast< ::dcv::extensions::GetManifestRequest*>(
      ::dcv::extensions::GetManifestRequest::internal_default_instance());
  ::dcv::extensions::_Request_default_instance_.setup_virtual_channel_request_ = const_cast< ::dcv::extensions::SetupVirtualChannelRequest*>(
      ::dcv::extensions::SetupVirtualChannelRequest::internal_default_instance());
  ::dcv::extensions::_Request_default_instance_.close_virtual_channel_request_ = const_cast< ::dcv::extensions::CloseVirtualChannelRequest*>(
      ::dcv::extensions::CloseVirtualChannelRequest::internal_default_instance());
  ::dcv::extensions::_Request_default_instance_.set_cursor_point_request_ = const_cast< ::dcv::extensions::SetCursorPointRequest*>(
      ::dcv::extensions::SetCursorPointRequest::internal_default_instance());
  ::dcv::extensions::_Request_default_instance_.get_streaming_views_request_ = const_cast< ::dcv::extensions::GetStreamingViewsRequest*>(
      ::dcv::extensions::GetStreamingViewsRequest::internal_default_instance());
  ::dcv::extensions::_Request_default_instance_.is_point_inside_streaming_views_request_ = const_cast< ::dcv::extensions::IsPointInsideStreamingViewsRequest*>(
      ::dcv::extensions::IsPointInsideStreamingViewsRequest::internal_default_instance());
}
class Request::_Internal {
 public:
  static const ::dcv::extensions::GetDcvInfoRequest& get_dcv_info_request(const Request* msg);
  static const ::dcv::extensions::GetManifestRequest& get_manifest_request(const Request* msg);
  static const ::dcv::extensions::SetupVirtualChannelRequest& setup_virtual_channel_request(const Request* msg);
  static const ::dcv::extensions::CloseVirtualChannelRequest& close_virtual_channel_request(const Request* msg);
  static const ::dcv::extensions::SetCursorPointRequest& set_cursor_point_request(const Request* msg);
  static const ::dcv::extensions::GetStreamingViewsRequest& get_streaming_views_request(const Request* msg);
  static const ::dcv::extensions::IsPointInsideStreamingViewsRequest& is_point_inside_streaming_views_request(const Request* msg);
};

const ::dcv::extensions::GetDcvInfoRequest&
Request::_Internal::get_dcv_info_request(const Request* msg) {
  return *msg->request_.get_dcv_info_request_;
}
const ::dcv::extensions::GetManifestRequest&
Request::_Internal::get_manifest_request(const Request* msg) {
  return *msg->request_.get_manifest_request_;
}
const ::dcv::extensions::SetupVirtualChannelRequest&
Request::_Internal::setup_virtual_channel_request(const Request* msg) {
  return *msg->request_.setup_virtual_channel_request_;
}
const ::dcv::extensions::CloseVirtualChannelRequest&
Request::_Internal::close_virtual_channel_request(const Request* msg) {
  return *msg->request_.close_virtual_channel_request_;
}
const ::dcv::extensions::SetCursorPointRequest&
Request::_Internal::set_cursor_point_request(const Request* msg) {
  return *msg->request_.set_cursor_point_request_;
}
const ::dcv::extensions::GetStreamingViewsRequest&
Request::_Internal::get_streaming_views_request(const Request* msg) {
  return *msg->request_.get_streaming_views_request_;
}
const ::dcv::extensions::IsPointInsideStreamingViewsRequest&
Request::_Internal::is_point_inside_streaming_views_request(const Request* msg) {
  return *msg->request_.is_point_inside_streaming_views_request_;
}
void Request::set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_dcv_info_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_dcv_info_request);
    if (message_arena != submessage_arena) {
      get_dcv_info_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_dcv_info_request, submessage_arena);
    }
    set_has_get_dcv_info_request();
    request_.get_dcv_info_request_ = get_dcv_info_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_dcv_info_request)
}
void Request::set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* get_manifest_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_manifest_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_manifest_request);
    if (message_arena != submessage_arena) {
      get_manifest_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_manifest_request, submessage_arena);
    }
    set_has_get_manifest_request();
    request_.get_manifest_request_ = get_manifest_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_manifest_request)
}
void Request::set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (setup_virtual_channel_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setup_virtual_channel_request);
    if (message_arena != submessage_arena) {
      setup_virtual_channel_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setup_virtual_channel_request, submessage_arena);
    }
    set_has_setup_virtual_channel_request();
    request_.setup_virtual_channel_request_ = setup_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.setup_virtual_channel_request)
}
void Request::set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (close_virtual_channel_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(close_virtual_channel_request);
    if (message_arena != submessage_arena) {
      close_virtual_channel_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_virtual_channel_request, submessage_arena);
    }
    set_has_close_virtual_channel_request();
    request_.close_virtual_channel_request_ = close_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.close_virtual_channel_request)
}
void Request::set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* set_cursor_point_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (set_cursor_point_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_cursor_point_request);
    if (message_arena != submessage_arena) {
      set_cursor_point_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_cursor_point_request, submessage_arena);
    }
    set_has_set_cursor_point_request();
    request_.set_cursor_point_request_ = set_cursor_point_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.set_cursor_point_request)
}
void Request::set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (get_streaming_views_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_streaming_views_request);
    if (message_arena != submessage_arena) {
      get_streaming_views_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_streaming_views_request, submessage_arena);
    }
    set_has_get_streaming_views_request();
    request_.get_streaming_views_request_ = get_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.get_streaming_views_request)
}
void Request::set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_request();
  if (is_point_inside_streaming_views_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_point_inside_streaming_views_request);
    if (message_arena != submessage_arena) {
      is_point_inside_streaming_views_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_point_inside_streaming_views_request, submessage_arena);
    }
    set_has_is_point_inside_streaming_views_request();
    request_.is_point_inside_streaming_views_request_ = is_point_inside_streaming_views_request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.is_point_inside_streaming_views_request)
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  clear_has_request();
  switch (from.request_case()) {
    case kGetDcvInfoRequest: {
      _internal_mutable_get_dcv_info_request()->::dcv::extensions::GetDcvInfoRequest::MergeFrom(from._internal_get_dcv_info_request());
      break;
    }
    case kGetManifestRequest: {
      _internal_mutable_get_manifest_request()->::dcv::extensions::GetManifestRequest::MergeFrom(from._internal_get_manifest_request());
      break;
    }
    case kSetupVirtualChannelRequest: {
      _internal_mutable_setup_virtual_channel_request()->::dcv::extensions::SetupVirtualChannelRequest::MergeFrom(from._internal_setup_virtual_channel_request());
      break;
    }
    case kCloseVirtualChannelRequest: {
      _internal_mutable_close_virtual_channel_request()->::dcv::extensions::CloseVirtualChannelRequest::MergeFrom(from._internal_close_virtual_channel_request());
      break;
    }
    case kSetCursorPointRequest: {
      _internal_mutable_set_cursor_point_request()->::dcv::extensions::SetCursorPointRequest::MergeFrom(from._internal_set_cursor_point_request());
      break;
    }
    case kGetStreamingViewsRequest: {
      _internal_mutable_get_streaming_views_request()->::dcv::extensions::GetStreamingViewsRequest::MergeFrom(from._internal_get_streaming_views_request());
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      _internal_mutable_is_point_inside_streaming_views_request()->::dcv::extensions::IsPointInsideStreamingViewsRequest::MergeFrom(from._internal_is_point_inside_streaming_views_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Request)
}

void Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Request_extensions_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_request();
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_request()) {
    clear_request();
  }
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Request& Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Request_extensions_2eproto.base);
  return *internal_default_instance();
}


void Request::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Request)
  switch (request_case()) {
    case kGetDcvInfoRequest: {
      if (GetArena() == nullptr) {
        delete request_.get_dcv_info_request_;
      }
      break;
    }
    case kGetManifestRequest: {
      if (GetArena() == nullptr) {
        delete request_.get_manifest_request_;
      }
      break;
    }
    case kSetupVirtualChannelRequest: {
      if (GetArena() == nullptr) {
        delete request_.setup_virtual_channel_request_;
      }
      break;
    }
    case kCloseVirtualChannelRequest: {
      if (GetArena() == nullptr) {
        delete request_.close_virtual_channel_request_;
      }
      break;
    }
    case kSetCursorPointRequest: {
      if (GetArena() == nullptr) {
        delete request_.set_cursor_point_request_;
      }
      break;
    }
    case kGetStreamingViewsRequest: {
      if (GetArena() == nullptr) {
        delete request_.get_streaming_views_request_;
      }
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      if (GetArena() == nullptr) {
        delete request_.is_point_inside_streaming_views_request_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = REQUEST_NOT_SET;
}


void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.Request.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_dcv_info_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.GetManifestRequest get_manifest_request = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_manifest_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_setup_virtual_channel_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_virtual_channel_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_cursor_point_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_streaming_views_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_point_inside_streaming_views_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.Request.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
  if (_internal_has_get_dcv_info_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_dcv_info_request(this), target, stream);
  }

  // .dcv.extensions.GetManifestRequest get_manifest_request = 11;
  if (_internal_has_get_manifest_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::get_manifest_request(this), target, stream);
  }

  // .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
  if (_internal_has_setup_virtual_channel_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::setup_virtual_channel_request(this), target, stream);
  }

  // .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
  if (_internal_has_close_virtual_channel_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::close_virtual_channel_request(this), target, stream);
  }

  // .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
  if (_internal_has_set_cursor_point_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::set_cursor_point_request(this), target, stream);
  }

  // .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
  if (_internal_has_get_streaming_views_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::get_streaming_views_request(this), target, stream);
  }

  // .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
  if (_internal_has_is_point_inside_streaming_views_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::is_point_inside_streaming_views_request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  switch (request_case()) {
    // .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
    case kGetDcvInfoRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_dcv_info_request_);
      break;
    }
    // .dcv.extensions.GetManifestRequest get_manifest_request = 11;
    case kGetManifestRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_manifest_request_);
      break;
    }
    // .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
    case kSetupVirtualChannelRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.setup_virtual_channel_request_);
      break;
    }
    // .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
    case kCloseVirtualChannelRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.close_virtual_channel_request_);
      break;
    }
    // .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
    case kSetCursorPointRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.set_cursor_point_request_);
      break;
    }
    // .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
    case kGetStreamingViewsRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.get_streaming_views_request_);
      break;
    }
    // .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
    case kIsPointInsideStreamingViewsRequest: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *request_.is_point_inside_streaming_views_request_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Request)
    MergeFrom(*source);
  }
}

void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  switch (from.request_case()) {
    case kGetDcvInfoRequest: {
      _internal_mutable_get_dcv_info_request()->::dcv::extensions::GetDcvInfoRequest::MergeFrom(from._internal_get_dcv_info_request());
      break;
    }
    case kGetManifestRequest: {
      _internal_mutable_get_manifest_request()->::dcv::extensions::GetManifestRequest::MergeFrom(from._internal_get_manifest_request());
      break;
    }
    case kSetupVirtualChannelRequest: {
      _internal_mutable_setup_virtual_channel_request()->::dcv::extensions::SetupVirtualChannelRequest::MergeFrom(from._internal_setup_virtual_channel_request());
      break;
    }
    case kCloseVirtualChannelRequest: {
      _internal_mutable_close_virtual_channel_request()->::dcv::extensions::CloseVirtualChannelRequest::MergeFrom(from._internal_close_virtual_channel_request());
      break;
    }
    case kSetCursorPointRequest: {
      _internal_mutable_set_cursor_point_request()->::dcv::extensions::SetCursorPointRequest::MergeFrom(from._internal_set_cursor_point_request());
      break;
    }
    case kGetStreamingViewsRequest: {
      _internal_mutable_get_streaming_views_request()->::dcv::extensions::GetStreamingViewsRequest::MergeFrom(from._internal_get_streaming_views_request());
      break;
    }
    case kIsPointInsideStreamingViewsRequest: {
      _internal_mutable_is_point_inside_streaming_views_request()->::dcv::extensions::IsPointInsideStreamingViewsRequest::MergeFrom(from._internal_is_point_inside_streaming_views_request());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
}

void Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(request_, other->request_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Response::InitAsDefaultInstance() {
  ::dcv::extensions::_Response_default_instance_.get_dcv_info_response_ = const_cast< ::dcv::extensions::GetDcvInfoResponse*>(
      ::dcv::extensions::GetDcvInfoResponse::internal_default_instance());
  ::dcv::extensions::_Response_default_instance_.get_manifest_response_ = const_cast< ::dcv::extensions::GetManifestResponse*>(
      ::dcv::extensions::GetManifestResponse::internal_default_instance());
  ::dcv::extensions::_Response_default_instance_.setup_virtual_channel_response_ = const_cast< ::dcv::extensions::SetupVirtualChannelResponse*>(
      ::dcv::extensions::SetupVirtualChannelResponse::internal_default_instance());
  ::dcv::extensions::_Response_default_instance_.close_virtual_channel_response_ = const_cast< ::dcv::extensions::CloseVirtualChannelResponse*>(
      ::dcv::extensions::CloseVirtualChannelResponse::internal_default_instance());
  ::dcv::extensions::_Response_default_instance_.set_cursor_point_response_ = const_cast< ::dcv::extensions::SetCursorPointResponse*>(
      ::dcv::extensions::SetCursorPointResponse::internal_default_instance());
  ::dcv::extensions::_Response_default_instance_.get_streaming_views_response_ = const_cast< ::dcv::extensions::GetStreamingViewsResponse*>(
      ::dcv::extensions::GetStreamingViewsResponse::internal_default_instance());
  ::dcv::extensions::_Response_default_instance_.is_point_inside_streaming_views_response_ = const_cast< ::dcv::extensions::IsPointInsideStreamingViewsResponse*>(
      ::dcv::extensions::IsPointInsideStreamingViewsResponse::internal_default_instance());
}
class Response::_Internal {
 public:
  static const ::dcv::extensions::GetDcvInfoResponse& get_dcv_info_response(const Response* msg);
  static const ::dcv::extensions::GetManifestResponse& get_manifest_response(const Response* msg);
  static const ::dcv::extensions::SetupVirtualChannelResponse& setup_virtual_channel_response(const Response* msg);
  static const ::dcv::extensions::CloseVirtualChannelResponse& close_virtual_channel_response(const Response* msg);
  static const ::dcv::extensions::SetCursorPointResponse& set_cursor_point_response(const Response* msg);
  static const ::dcv::extensions::GetStreamingViewsResponse& get_streaming_views_response(const Response* msg);
  static const ::dcv::extensions::IsPointInsideStreamingViewsResponse& is_point_inside_streaming_views_response(const Response* msg);
};

const ::dcv::extensions::GetDcvInfoResponse&
Response::_Internal::get_dcv_info_response(const Response* msg) {
  return *msg->response_.get_dcv_info_response_;
}
const ::dcv::extensions::GetManifestResponse&
Response::_Internal::get_manifest_response(const Response* msg) {
  return *msg->response_.get_manifest_response_;
}
const ::dcv::extensions::SetupVirtualChannelResponse&
Response::_Internal::setup_virtual_channel_response(const Response* msg) {
  return *msg->response_.setup_virtual_channel_response_;
}
const ::dcv::extensions::CloseVirtualChannelResponse&
Response::_Internal::close_virtual_channel_response(const Response* msg) {
  return *msg->response_.close_virtual_channel_response_;
}
const ::dcv::extensions::SetCursorPointResponse&
Response::_Internal::set_cursor_point_response(const Response* msg) {
  return *msg->response_.set_cursor_point_response_;
}
const ::dcv::extensions::GetStreamingViewsResponse&
Response::_Internal::get_streaming_views_response(const Response* msg) {
  return *msg->response_.get_streaming_views_response_;
}
const ::dcv::extensions::IsPointInsideStreamingViewsResponse&
Response::_Internal::is_point_inside_streaming_views_response(const Response* msg) {
  return *msg->response_.is_point_inside_streaming_views_response_;
}
void Response::set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_dcv_info_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_dcv_info_response);
    if (message_arena != submessage_arena) {
      get_dcv_info_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_dcv_info_response, submessage_arena);
    }
    set_has_get_dcv_info_response();
    response_.get_dcv_info_response_ = get_dcv_info_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_dcv_info_response)
}
void Response::set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* get_manifest_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_manifest_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_manifest_response);
    if (message_arena != submessage_arena) {
      get_manifest_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_manifest_response, submessage_arena);
    }
    set_has_get_manifest_response();
    response_.get_manifest_response_ = get_manifest_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_manifest_response)
}
void Response::set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (setup_virtual_channel_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(setup_virtual_channel_response);
    if (message_arena != submessage_arena) {
      setup_virtual_channel_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, setup_virtual_channel_response, submessage_arena);
    }
    set_has_setup_virtual_channel_response();
    response_.setup_virtual_channel_response_ = setup_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.setup_virtual_channel_response)
}
void Response::set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (close_virtual_channel_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(close_virtual_channel_response);
    if (message_arena != submessage_arena) {
      close_virtual_channel_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, close_virtual_channel_response, submessage_arena);
    }
    set_has_close_virtual_channel_response();
    response_.close_virtual_channel_response_ = close_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.close_virtual_channel_response)
}
void Response::set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* set_cursor_point_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (set_cursor_point_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(set_cursor_point_response);
    if (message_arena != submessage_arena) {
      set_cursor_point_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, set_cursor_point_response, submessage_arena);
    }
    set_has_set_cursor_point_response();
    response_.set_cursor_point_response_ = set_cursor_point_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.set_cursor_point_response)
}
void Response::set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (get_streaming_views_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_streaming_views_response);
    if (message_arena != submessage_arena) {
      get_streaming_views_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_streaming_views_response, submessage_arena);
    }
    set_has_get_streaming_views_response();
    response_.get_streaming_views_response_ = get_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.get_streaming_views_response)
}
void Response::set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_response();
  if (is_point_inside_streaming_views_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(is_point_inside_streaming_views_response);
    if (message_arena != submessage_arena) {
      is_point_inside_streaming_views_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_point_inside_streaming_views_response, submessage_arena);
    }
    set_has_is_point_inside_streaming_views_response();
    response_.is_point_inside_streaming_views_response_ = is_point_inside_streaming_views_response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.is_point_inside_streaming_views_response)
}
Response::Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Response)
}
Response::Response(const Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_request_id(),
      GetArena());
  }
  status_ = from.status_;
  clear_has_response();
  switch (from.response_case()) {
    case kGetDcvInfoResponse: {
      _internal_mutable_get_dcv_info_response()->::dcv::extensions::GetDcvInfoResponse::MergeFrom(from._internal_get_dcv_info_response());
      break;
    }
    case kGetManifestResponse: {
      _internal_mutable_get_manifest_response()->::dcv::extensions::GetManifestResponse::MergeFrom(from._internal_get_manifest_response());
      break;
    }
    case kSetupVirtualChannelResponse: {
      _internal_mutable_setup_virtual_channel_response()->::dcv::extensions::SetupVirtualChannelResponse::MergeFrom(from._internal_setup_virtual_channel_response());
      break;
    }
    case kCloseVirtualChannelResponse: {
      _internal_mutable_close_virtual_channel_response()->::dcv::extensions::CloseVirtualChannelResponse::MergeFrom(from._internal_close_virtual_channel_response());
      break;
    }
    case kSetCursorPointResponse: {
      _internal_mutable_set_cursor_point_response()->::dcv::extensions::SetCursorPointResponse::MergeFrom(from._internal_set_cursor_point_response());
      break;
    }
    case kGetStreamingViewsResponse: {
      _internal_mutable_get_streaming_views_response()->::dcv::extensions::GetStreamingViewsResponse::MergeFrom(from._internal_get_streaming_views_response());
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      _internal_mutable_is_point_inside_streaming_views_response()->::dcv::extensions::IsPointInsideStreamingViewsResponse::MergeFrom(from._internal_is_point_inside_streaming_views_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Response)
}

void Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Response_extensions_2eproto.base);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
  clear_has_response();
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_response()) {
    clear_response();
  }
}

void Response::ArenaDtor(void* object) {
  Response* _this = reinterpret_cast< Response* >(object);
  (void)_this;
}
void Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Response& Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Response_extensions_2eproto.base);
  return *internal_default_instance();
}


void Response::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Response)
  switch (response_case()) {
    case kGetDcvInfoResponse: {
      if (GetArena() == nullptr) {
        delete response_.get_dcv_info_response_;
      }
      break;
    }
    case kGetManifestResponse: {
      if (GetArena() == nullptr) {
        delete response_.get_manifest_response_;
      }
      break;
    }
    case kSetupVirtualChannelResponse: {
      if (GetArena() == nullptr) {
        delete response_.setup_virtual_channel_response_;
      }
      break;
    }
    case kCloseVirtualChannelResponse: {
      if (GetArena() == nullptr) {
        delete response_.close_virtual_channel_response_;
      }
      break;
    }
    case kSetCursorPointResponse: {
      if (GetArena() == nullptr) {
        delete response_.set_cursor_point_response_;
      }
      break;
    }
    case kGetStreamingViewsResponse: {
      if (GetArena() == nullptr) {
        delete response_.get_streaming_views_response_;
      }
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      if (GetArena() == nullptr) {
        delete response_.is_point_inside_streaming_views_response_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void Response::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  status_ = 0;
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "dcv.extensions.Response.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.Response.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::dcv::extensions::Response_Status>(val));
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_dcv_info_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.GetManifestResponse get_manifest_response = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_manifest_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_setup_virtual_channel_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_close_virtual_channel_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_set_cursor_point_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_streaming_views_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_point_inside_streaming_views_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "dcv.extensions.Response.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // .dcv.extensions.Response.Status status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  // .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
  if (_internal_has_get_dcv_info_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::get_dcv_info_response(this), target, stream);
  }

  // .dcv.extensions.GetManifestResponse get_manifest_response = 11;
  if (_internal_has_get_manifest_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::get_manifest_response(this), target, stream);
  }

  // .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
  if (_internal_has_setup_virtual_channel_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::setup_virtual_channel_response(this), target, stream);
  }

  // .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
  if (_internal_has_close_virtual_channel_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::close_virtual_channel_response(this), target, stream);
  }

  // .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
  if (_internal_has_set_cursor_point_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::set_cursor_point_response(this), target, stream);
  }

  // .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
  if (_internal_has_get_streaming_views_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::get_streaming_views_response(this), target, stream);
  }

  // .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
  if (_internal_has_is_point_inside_streaming_views_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::is_point_inside_streaming_views_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Response)
  return target;
}

size_t Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1;
  if (this->request_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // .dcv.extensions.Response.Status status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (response_case()) {
    // .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
    case kGetDcvInfoResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_dcv_info_response_);
      break;
    }
    // .dcv.extensions.GetManifestResponse get_manifest_response = 11;
    case kGetManifestResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_manifest_response_);
      break;
    }
    // .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
    case kSetupVirtualChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.setup_virtual_channel_response_);
      break;
    }
    // .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
    case kCloseVirtualChannelResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.close_virtual_channel_response_);
      break;
    }
    // .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
    case kSetCursorPointResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.set_cursor_point_response_);
      break;
    }
    // .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
    case kGetStreamingViewsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.get_streaming_views_response_);
      break;
    }
    // .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
    case kIsPointInsideStreamingViewsResponse: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.is_point_inside_streaming_views_response_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Response)
    MergeFrom(*source);
  }
}

void Response::MergeFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_id().size() > 0) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  switch (from.response_case()) {
    case kGetDcvInfoResponse: {
      _internal_mutable_get_dcv_info_response()->::dcv::extensions::GetDcvInfoResponse::MergeFrom(from._internal_get_dcv_info_response());
      break;
    }
    case kGetManifestResponse: {
      _internal_mutable_get_manifest_response()->::dcv::extensions::GetManifestResponse::MergeFrom(from._internal_get_manifest_response());
      break;
    }
    case kSetupVirtualChannelResponse: {
      _internal_mutable_setup_virtual_channel_response()->::dcv::extensions::SetupVirtualChannelResponse::MergeFrom(from._internal_setup_virtual_channel_response());
      break;
    }
    case kCloseVirtualChannelResponse: {
      _internal_mutable_close_virtual_channel_response()->::dcv::extensions::CloseVirtualChannelResponse::MergeFrom(from._internal_close_virtual_channel_response());
      break;
    }
    case kSetCursorPointResponse: {
      _internal_mutable_set_cursor_point_response()->::dcv::extensions::SetCursorPointResponse::MergeFrom(from._internal_set_cursor_point_response());
      break;
    }
    case kGetStreamingViewsResponse: {
      _internal_mutable_get_streaming_views_response()->::dcv::extensions::GetStreamingViewsResponse::MergeFrom(from._internal_get_streaming_views_response());
      break;
    }
    case kIsPointInsideStreamingViewsResponse: {
      _internal_mutable_is_point_inside_streaming_views_response()->::dcv::extensions::IsPointInsideStreamingViewsResponse::MergeFrom(from._internal_is_point_inside_streaming_views_response());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
}

void Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Response::CopyFrom(const Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Response::IsInitialized() const {
  return true;
}

void Response::InternalSwap(Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  request_id_.Swap(&other->request_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Event::InitAsDefaultInstance() {
  ::dcv::extensions::_Event_default_instance_.virtual_channel_ready_event_ = const_cast< ::dcv::extensions::VirtualChannelReadyEvent*>(
      ::dcv::extensions::VirtualChannelReadyEvent::internal_default_instance());
  ::dcv::extensions::_Event_default_instance_.virtual_channel_closed_event_ = const_cast< ::dcv::extensions::VirtualChannelClosedEvent*>(
      ::dcv::extensions::VirtualChannelClosedEvent::internal_default_instance());
  ::dcv::extensions::_Event_default_instance_.streaming_views_changed_event_ = const_cast< ::dcv::extensions::StreamingViewsChangedEvent*>(
      ::dcv::extensions::StreamingViewsChangedEvent::internal_default_instance());
}
class Event::_Internal {
 public:
  static const ::dcv::extensions::VirtualChannelReadyEvent& virtual_channel_ready_event(const Event* msg);
  static const ::dcv::extensions::VirtualChannelClosedEvent& virtual_channel_closed_event(const Event* msg);
  static const ::dcv::extensions::StreamingViewsChangedEvent& streaming_views_changed_event(const Event* msg);
};

const ::dcv::extensions::VirtualChannelReadyEvent&
Event::_Internal::virtual_channel_ready_event(const Event* msg) {
  return *msg->event_.virtual_channel_ready_event_;
}
const ::dcv::extensions::VirtualChannelClosedEvent&
Event::_Internal::virtual_channel_closed_event(const Event* msg) {
  return *msg->event_.virtual_channel_closed_event_;
}
const ::dcv::extensions::StreamingViewsChangedEvent&
Event::_Internal::streaming_views_changed_event(const Event* msg) {
  return *msg->event_.streaming_views_changed_event_;
}
void Event::set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (virtual_channel_ready_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(virtual_channel_ready_event);
    if (message_arena != submessage_arena) {
      virtual_channel_ready_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_channel_ready_event, submessage_arena);
    }
    set_has_virtual_channel_ready_event();
    event_.virtual_channel_ready_event_ = virtual_channel_ready_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_ready_event)
}
void Event::set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (virtual_channel_closed_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(virtual_channel_closed_event);
    if (message_arena != submessage_arena) {
      virtual_channel_closed_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, virtual_channel_closed_event, submessage_arena);
    }
    set_has_virtual_channel_closed_event();
    event_.virtual_channel_closed_event_ = virtual_channel_closed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.virtual_channel_closed_event)
}
void Event::set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_event();
  if (streaming_views_changed_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(streaming_views_changed_event);
    if (message_arena != submessage_arena) {
      streaming_views_changed_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_views_changed_event, submessage_arena);
    }
    set_has_streaming_views_changed_event();
    event_.streaming_views_changed_event_ = streaming_views_changed_event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Event.streaming_views_changed_event)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_event();
  switch (from.event_case()) {
    case kVirtualChannelReadyEvent: {
      _internal_mutable_virtual_channel_ready_event()->::dcv::extensions::VirtualChannelReadyEvent::MergeFrom(from._internal_virtual_channel_ready_event());
      break;
    }
    case kVirtualChannelClosedEvent: {
      _internal_mutable_virtual_channel_closed_event()->::dcv::extensions::VirtualChannelClosedEvent::MergeFrom(from._internal_virtual_channel_closed_event());
      break;
    }
    case kStreamingViewsChangedEvent: {
      _internal_mutable_streaming_views_changed_event()->::dcv::extensions::StreamingViewsChangedEvent::MergeFrom(from._internal_streaming_views_changed_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.Event)
}

void Event::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Event_extensions_2eproto.base);
  clear_has_event();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:dcv.extensions.Event)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_event()) {
    clear_event();
  }
}

void Event::ArenaDtor(void* object) {
  Event* _this = reinterpret_cast< Event* >(object);
  (void)_this;
}
void Event::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Event::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Event& Event::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Event_extensions_2eproto.base);
  return *internal_default_instance();
}


void Event::clear_event() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.Event)
  switch (event_case()) {
    case kVirtualChannelReadyEvent: {
      if (GetArena() == nullptr) {
        delete event_.virtual_channel_ready_event_;
      }
      break;
    }
    case kVirtualChannelClosedEvent: {
      if (GetArena() == nullptr) {
        delete event_.virtual_channel_closed_event_;
      }
      break;
    }
    case kStreamingViewsChangedEvent: {
      if (GetArena() == nullptr) {
        delete event_.streaming_views_changed_event_;
      }
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EVENT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_event();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_channel_ready_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_virtual_channel_closed_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_streaming_views_changed_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Event::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.Event)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
  if (_internal_has_virtual_channel_ready_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::virtual_channel_ready_event(this), target, stream);
  }

  // .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
  if (_internal_has_virtual_channel_closed_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::virtual_channel_closed_event(this), target, stream);
  }

  // .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
  if (_internal_has_streaming_views_changed_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::streaming_views_changed_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.Event)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (event_case()) {
    // .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
    case kVirtualChannelReadyEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.virtual_channel_ready_event_);
      break;
    }
    // .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
    case kVirtualChannelClosedEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.virtual_channel_closed_event_);
      break;
    }
    // .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
    case kStreamingViewsChangedEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *event_.streaming_views_changed_event_);
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Event::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.Event)
  GOOGLE_DCHECK_NE(&from, this);
  const Event* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Event>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.Event)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.Event)
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.Event)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.event_case()) {
    case kVirtualChannelReadyEvent: {
      _internal_mutable_virtual_channel_ready_event()->::dcv::extensions::VirtualChannelReadyEvent::MergeFrom(from._internal_virtual_channel_ready_event());
      break;
    }
    case kVirtualChannelClosedEvent: {
      _internal_mutable_virtual_channel_closed_event()->::dcv::extensions::VirtualChannelClosedEvent::MergeFrom(from._internal_virtual_channel_closed_event());
      break;
    }
    case kStreamingViewsChangedEvent: {
      _internal_mutable_streaming_views_changed_event()->::dcv::extensions::StreamingViewsChangedEvent::MergeFrom(from._internal_streaming_views_changed_event());
      break;
    }
    case EVENT_NOT_SET: {
      break;
    }
  }
}

void Event::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(event_, other->event_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExtensionMessage::InitAsDefaultInstance() {
  ::dcv::extensions::_ExtensionMessage_default_instance_.request_ = const_cast< ::dcv::extensions::Request*>(
      ::dcv::extensions::Request::internal_default_instance());
}
class ExtensionMessage::_Internal {
 public:
  static const ::dcv::extensions::Request& request(const ExtensionMessage* msg);
};

const ::dcv::extensions::Request&
ExtensionMessage::_Internal::request(const ExtensionMessage* msg) {
  return *msg->msg_.request_;
}
void ExtensionMessage::set_allocated_request(::dcv::extensions::Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    set_has_request();
    msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.ExtensionMessage.request)
}
ExtensionMessage::ExtensionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.ExtensionMessage)
}
ExtensionMessage::ExtensionMessage(const ExtensionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kRequest: {
      _internal_mutable_request()->::dcv::extensions::Request::MergeFrom(from._internal_request());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.ExtensionMessage)
}

void ExtensionMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExtensionMessage_extensions_2eproto.base);
  clear_has_msg();
}

ExtensionMessage::~ExtensionMessage() {
  // @@protoc_insertion_point(destructor:dcv.extensions.ExtensionMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ExtensionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void ExtensionMessage::ArenaDtor(void* object) {
  ExtensionMessage* _this = reinterpret_cast< ExtensionMessage* >(object);
  (void)_this;
}
void ExtensionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExtensionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExtensionMessage& ExtensionMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExtensionMessage_extensions_2eproto.base);
  return *internal_default_instance();
}


void ExtensionMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.ExtensionMessage)
  switch (msg_case()) {
    case kRequest: {
      if (GetArena() == nullptr) {
        delete msg_.request_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void ExtensionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.ExtensionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtensionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.Request request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExtensionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.ExtensionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.Request request = 1;
  if (_internal_has_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::request(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.ExtensionMessage)
  return target;
}

size_t ExtensionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.ExtensionMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .dcv.extensions.Request request = 1;
    case kRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.request_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.ExtensionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ExtensionMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExtensionMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.ExtensionMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.ExtensionMessage)
    MergeFrom(*source);
  }
}

void ExtensionMessage::MergeFrom(const ExtensionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.ExtensionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kRequest: {
      _internal_mutable_request()->::dcv::extensions::Request::MergeFrom(from._internal_request());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void ExtensionMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.ExtensionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtensionMessage::CopyFrom(const ExtensionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.ExtensionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionMessage::IsInitialized() const {
  return true;
}

void ExtensionMessage::InternalSwap(ExtensionMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtensionMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DcvMessage::InitAsDefaultInstance() {
  ::dcv::extensions::_DcvMessage_default_instance_.response_ = const_cast< ::dcv::extensions::Response*>(
      ::dcv::extensions::Response::internal_default_instance());
  ::dcv::extensions::_DcvMessage_default_instance_.event_ = const_cast< ::dcv::extensions::Event*>(
      ::dcv::extensions::Event::internal_default_instance());
}
class DcvMessage::_Internal {
 public:
  static const ::dcv::extensions::Response& response(const DcvMessage* msg);
  static const ::dcv::extensions::Event& event(const DcvMessage* msg);
};

const ::dcv::extensions::Response&
DcvMessage::_Internal::response(const DcvMessage* msg) {
  return *msg->msg_.response_;
}
const ::dcv::extensions::Event&
DcvMessage::_Internal::event(const DcvMessage* msg) {
  return *msg->msg_.event_;
}
void DcvMessage::set_allocated_response(::dcv::extensions::Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
    msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.response)
}
void DcvMessage::set_allocated_event(::dcv::extensions::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_msg();
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    set_has_event();
    msg_.event_ = event;
  }
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.DcvMessage.event)
}
DcvMessage::DcvMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:dcv.extensions.DcvMessage)
}
DcvMessage::DcvMessage(const DcvMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_msg();
  switch (from.msg_case()) {
    case kResponse: {
      _internal_mutable_response()->::dcv::extensions::Response::MergeFrom(from._internal_response());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::dcv::extensions::Event::MergeFrom(from._internal_event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:dcv.extensions.DcvMessage)
}

void DcvMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DcvMessage_extensions_2eproto.base);
  clear_has_msg();
}

DcvMessage::~DcvMessage() {
  // @@protoc_insertion_point(destructor:dcv.extensions.DcvMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DcvMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void DcvMessage::ArenaDtor(void* object) {
  DcvMessage* _this = reinterpret_cast< DcvMessage* >(object);
  (void)_this;
}
void DcvMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DcvMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DcvMessage& DcvMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DcvMessage_extensions_2eproto.base);
  return *internal_default_instance();
}


void DcvMessage::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:dcv.extensions.DcvMessage)
  switch (msg_case()) {
    case kResponse: {
      if (GetArena() == nullptr) {
        delete msg_.response_;
      }
      break;
    }
    case kEvent: {
      if (GetArena() == nullptr) {
        delete msg_.event_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MSG_NOT_SET;
}


void DcvMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dcv.extensions.DcvMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DcvMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .dcv.extensions.Response response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .dcv.extensions.Event event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DcvMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:dcv.extensions.DcvMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .dcv.extensions.Response response = 2;
  if (_internal_has_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::response(this), target, stream);
  }

  // .dcv.extensions.Event event = 3;
  if (_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dcv.extensions.DcvMessage)
  return target;
}

size_t DcvMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:dcv.extensions.DcvMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (msg_case()) {
    // .dcv.extensions.Response response = 2;
    case kResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.response_);
      break;
    }
    // .dcv.extensions.Event event = 3;
    case kEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_.event_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DcvMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dcv.extensions.DcvMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DcvMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DcvMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dcv.extensions.DcvMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dcv.extensions.DcvMessage)
    MergeFrom(*source);
  }
}

void DcvMessage::MergeFrom(const DcvMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dcv.extensions.DcvMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.msg_case()) {
    case kResponse: {
      _internal_mutable_response()->::dcv::extensions::Response::MergeFrom(from._internal_response());
      break;
    }
    case kEvent: {
      _internal_mutable_event()->::dcv::extensions::Event::MergeFrom(from._internal_event());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
}

void DcvMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dcv.extensions.DcvMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DcvMessage::CopyFrom(const DcvMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dcv.extensions.DcvMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DcvMessage::IsInitialized() const {
  return true;
}

void DcvMessage::InternalSwap(DcvMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(msg_, other->msg_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DcvMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace extensions
}  // namespace dcv
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::dcv::extensions::SoftwareInfo_VersionNumber* Arena::CreateMaybeMessage< ::dcv::extensions::SoftwareInfo_VersionNumber >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::SoftwareInfo_VersionNumber >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::SoftwareInfo* Arena::CreateMaybeMessage< ::dcv::extensions::SoftwareInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::SoftwareInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::Point* Arena::CreateMaybeMessage< ::dcv::extensions::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::Rect* Arena::CreateMaybeMessage< ::dcv::extensions::Rect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::Rect >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::StreamingViews_StreamingView* Arena::CreateMaybeMessage< ::dcv::extensions::StreamingViews_StreamingView >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::StreamingViews_StreamingView >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::StreamingViews* Arena::CreateMaybeMessage< ::dcv::extensions::StreamingViews >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::StreamingViews >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::GetDcvInfoRequest* Arena::CreateMaybeMessage< ::dcv::extensions::GetDcvInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::GetDcvInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::GetManifestRequest* Arena::CreateMaybeMessage< ::dcv::extensions::GetManifestRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::GetManifestRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::SetupVirtualChannelRequest* Arena::CreateMaybeMessage< ::dcv::extensions::SetupVirtualChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::SetupVirtualChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::CloseVirtualChannelRequest* Arena::CreateMaybeMessage< ::dcv::extensions::CloseVirtualChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::CloseVirtualChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::SetCursorPointRequest* Arena::CreateMaybeMessage< ::dcv::extensions::SetCursorPointRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::SetCursorPointRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::GetStreamingViewsRequest* Arena::CreateMaybeMessage< ::dcv::extensions::GetStreamingViewsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::GetStreamingViewsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::IsPointInsideStreamingViewsRequest* Arena::CreateMaybeMessage< ::dcv::extensions::IsPointInsideStreamingViewsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::IsPointInsideStreamingViewsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::GetDcvInfoResponse* Arena::CreateMaybeMessage< ::dcv::extensions::GetDcvInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::GetDcvInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::GetManifestResponse* Arena::CreateMaybeMessage< ::dcv::extensions::GetManifestResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::GetManifestResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::SetupVirtualChannelResponse* Arena::CreateMaybeMessage< ::dcv::extensions::SetupVirtualChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::SetupVirtualChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::CloseVirtualChannelResponse* Arena::CreateMaybeMessage< ::dcv::extensions::CloseVirtualChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::CloseVirtualChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::SetCursorPointResponse* Arena::CreateMaybeMessage< ::dcv::extensions::SetCursorPointResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::SetCursorPointResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::GetStreamingViewsResponse* Arena::CreateMaybeMessage< ::dcv::extensions::GetStreamingViewsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::GetStreamingViewsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::IsPointInsideStreamingViewsResponse* Arena::CreateMaybeMessage< ::dcv::extensions::IsPointInsideStreamingViewsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::IsPointInsideStreamingViewsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::VirtualChannelReadyEvent* Arena::CreateMaybeMessage< ::dcv::extensions::VirtualChannelReadyEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::VirtualChannelReadyEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::VirtualChannelClosedEvent* Arena::CreateMaybeMessage< ::dcv::extensions::VirtualChannelClosedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::VirtualChannelClosedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::StreamingViewsChangedEvent* Arena::CreateMaybeMessage< ::dcv::extensions::StreamingViewsChangedEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::StreamingViewsChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::Request* Arena::CreateMaybeMessage< ::dcv::extensions::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::Response* Arena::CreateMaybeMessage< ::dcv::extensions::Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::Response >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::Event* Arena::CreateMaybeMessage< ::dcv::extensions::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::ExtensionMessage* Arena::CreateMaybeMessage< ::dcv::extensions::ExtensionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::ExtensionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::dcv::extensions::DcvMessage* Arena::CreateMaybeMessage< ::dcv::extensions::DcvMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::dcv::extensions::DcvMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
