// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extensions.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_extensions_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_extensions_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[28]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_extensions_2eproto;
namespace dcv {
namespace extensions {
class CloseVirtualChannelRequest;
class CloseVirtualChannelRequestDefaultTypeInternal;
extern CloseVirtualChannelRequestDefaultTypeInternal _CloseVirtualChannelRequest_default_instance_;
class CloseVirtualChannelResponse;
class CloseVirtualChannelResponseDefaultTypeInternal;
extern CloseVirtualChannelResponseDefaultTypeInternal _CloseVirtualChannelResponse_default_instance_;
class DcvMessage;
class DcvMessageDefaultTypeInternal;
extern DcvMessageDefaultTypeInternal _DcvMessage_default_instance_;
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class ExtensionMessage;
class ExtensionMessageDefaultTypeInternal;
extern ExtensionMessageDefaultTypeInternal _ExtensionMessage_default_instance_;
class GetDcvInfoRequest;
class GetDcvInfoRequestDefaultTypeInternal;
extern GetDcvInfoRequestDefaultTypeInternal _GetDcvInfoRequest_default_instance_;
class GetDcvInfoResponse;
class GetDcvInfoResponseDefaultTypeInternal;
extern GetDcvInfoResponseDefaultTypeInternal _GetDcvInfoResponse_default_instance_;
class GetManifestRequest;
class GetManifestRequestDefaultTypeInternal;
extern GetManifestRequestDefaultTypeInternal _GetManifestRequest_default_instance_;
class GetManifestResponse;
class GetManifestResponseDefaultTypeInternal;
extern GetManifestResponseDefaultTypeInternal _GetManifestResponse_default_instance_;
class GetStreamingViewsRequest;
class GetStreamingViewsRequestDefaultTypeInternal;
extern GetStreamingViewsRequestDefaultTypeInternal _GetStreamingViewsRequest_default_instance_;
class GetStreamingViewsResponse;
class GetStreamingViewsResponseDefaultTypeInternal;
extern GetStreamingViewsResponseDefaultTypeInternal _GetStreamingViewsResponse_default_instance_;
class IsPointInsideStreamingViewsRequest;
class IsPointInsideStreamingViewsRequestDefaultTypeInternal;
extern IsPointInsideStreamingViewsRequestDefaultTypeInternal _IsPointInsideStreamingViewsRequest_default_instance_;
class IsPointInsideStreamingViewsResponse;
class IsPointInsideStreamingViewsResponseDefaultTypeInternal;
extern IsPointInsideStreamingViewsResponseDefaultTypeInternal _IsPointInsideStreamingViewsResponse_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class SetCursorPointRequest;
class SetCursorPointRequestDefaultTypeInternal;
extern SetCursorPointRequestDefaultTypeInternal _SetCursorPointRequest_default_instance_;
class SetCursorPointResponse;
class SetCursorPointResponseDefaultTypeInternal;
extern SetCursorPointResponseDefaultTypeInternal _SetCursorPointResponse_default_instance_;
class SetupVirtualChannelRequest;
class SetupVirtualChannelRequestDefaultTypeInternal;
extern SetupVirtualChannelRequestDefaultTypeInternal _SetupVirtualChannelRequest_default_instance_;
class SetupVirtualChannelResponse;
class SetupVirtualChannelResponseDefaultTypeInternal;
extern SetupVirtualChannelResponseDefaultTypeInternal _SetupVirtualChannelResponse_default_instance_;
class SoftwareInfo;
class SoftwareInfoDefaultTypeInternal;
extern SoftwareInfoDefaultTypeInternal _SoftwareInfo_default_instance_;
class SoftwareInfo_VersionNumber;
class SoftwareInfo_VersionNumberDefaultTypeInternal;
extern SoftwareInfo_VersionNumberDefaultTypeInternal _SoftwareInfo_VersionNumber_default_instance_;
class StreamingViews;
class StreamingViewsDefaultTypeInternal;
extern StreamingViewsDefaultTypeInternal _StreamingViews_default_instance_;
class StreamingViewsChangedEvent;
class StreamingViewsChangedEventDefaultTypeInternal;
extern StreamingViewsChangedEventDefaultTypeInternal _StreamingViewsChangedEvent_default_instance_;
class StreamingViews_StreamingView;
class StreamingViews_StreamingViewDefaultTypeInternal;
extern StreamingViews_StreamingViewDefaultTypeInternal _StreamingViews_StreamingView_default_instance_;
class VirtualChannelClosedEvent;
class VirtualChannelClosedEventDefaultTypeInternal;
extern VirtualChannelClosedEventDefaultTypeInternal _VirtualChannelClosedEvent_default_instance_;
class VirtualChannelReadyEvent;
class VirtualChannelReadyEventDefaultTypeInternal;
extern VirtualChannelReadyEventDefaultTypeInternal _VirtualChannelReadyEvent_default_instance_;
}  // namespace extensions
}  // namespace dcv
PROTOBUF_NAMESPACE_OPEN
template<> ::dcv::extensions::CloseVirtualChannelRequest* Arena::CreateMaybeMessage<::dcv::extensions::CloseVirtualChannelRequest>(Arena*);
template<> ::dcv::extensions::CloseVirtualChannelResponse* Arena::CreateMaybeMessage<::dcv::extensions::CloseVirtualChannelResponse>(Arena*);
template<> ::dcv::extensions::DcvMessage* Arena::CreateMaybeMessage<::dcv::extensions::DcvMessage>(Arena*);
template<> ::dcv::extensions::Event* Arena::CreateMaybeMessage<::dcv::extensions::Event>(Arena*);
template<> ::dcv::extensions::ExtensionMessage* Arena::CreateMaybeMessage<::dcv::extensions::ExtensionMessage>(Arena*);
template<> ::dcv::extensions::GetDcvInfoRequest* Arena::CreateMaybeMessage<::dcv::extensions::GetDcvInfoRequest>(Arena*);
template<> ::dcv::extensions::GetDcvInfoResponse* Arena::CreateMaybeMessage<::dcv::extensions::GetDcvInfoResponse>(Arena*);
template<> ::dcv::extensions::GetManifestRequest* Arena::CreateMaybeMessage<::dcv::extensions::GetManifestRequest>(Arena*);
template<> ::dcv::extensions::GetManifestResponse* Arena::CreateMaybeMessage<::dcv::extensions::GetManifestResponse>(Arena*);
template<> ::dcv::extensions::GetStreamingViewsRequest* Arena::CreateMaybeMessage<::dcv::extensions::GetStreamingViewsRequest>(Arena*);
template<> ::dcv::extensions::GetStreamingViewsResponse* Arena::CreateMaybeMessage<::dcv::extensions::GetStreamingViewsResponse>(Arena*);
template<> ::dcv::extensions::IsPointInsideStreamingViewsRequest* Arena::CreateMaybeMessage<::dcv::extensions::IsPointInsideStreamingViewsRequest>(Arena*);
template<> ::dcv::extensions::IsPointInsideStreamingViewsResponse* Arena::CreateMaybeMessage<::dcv::extensions::IsPointInsideStreamingViewsResponse>(Arena*);
template<> ::dcv::extensions::Point* Arena::CreateMaybeMessage<::dcv::extensions::Point>(Arena*);
template<> ::dcv::extensions::Rect* Arena::CreateMaybeMessage<::dcv::extensions::Rect>(Arena*);
template<> ::dcv::extensions::Request* Arena::CreateMaybeMessage<::dcv::extensions::Request>(Arena*);
template<> ::dcv::extensions::Response* Arena::CreateMaybeMessage<::dcv::extensions::Response>(Arena*);
template<> ::dcv::extensions::SetCursorPointRequest* Arena::CreateMaybeMessage<::dcv::extensions::SetCursorPointRequest>(Arena*);
template<> ::dcv::extensions::SetCursorPointResponse* Arena::CreateMaybeMessage<::dcv::extensions::SetCursorPointResponse>(Arena*);
template<> ::dcv::extensions::SetupVirtualChannelRequest* Arena::CreateMaybeMessage<::dcv::extensions::SetupVirtualChannelRequest>(Arena*);
template<> ::dcv::extensions::SetupVirtualChannelResponse* Arena::CreateMaybeMessage<::dcv::extensions::SetupVirtualChannelResponse>(Arena*);
template<> ::dcv::extensions::SoftwareInfo* Arena::CreateMaybeMessage<::dcv::extensions::SoftwareInfo>(Arena*);
template<> ::dcv::extensions::SoftwareInfo_VersionNumber* Arena::CreateMaybeMessage<::dcv::extensions::SoftwareInfo_VersionNumber>(Arena*);
template<> ::dcv::extensions::StreamingViews* Arena::CreateMaybeMessage<::dcv::extensions::StreamingViews>(Arena*);
template<> ::dcv::extensions::StreamingViewsChangedEvent* Arena::CreateMaybeMessage<::dcv::extensions::StreamingViewsChangedEvent>(Arena*);
template<> ::dcv::extensions::StreamingViews_StreamingView* Arena::CreateMaybeMessage<::dcv::extensions::StreamingViews_StreamingView>(Arena*);
template<> ::dcv::extensions::VirtualChannelClosedEvent* Arena::CreateMaybeMessage<::dcv::extensions::VirtualChannelClosedEvent>(Arena*);
template<> ::dcv::extensions::VirtualChannelReadyEvent* Arena::CreateMaybeMessage<::dcv::extensions::VirtualChannelReadyEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace dcv {
namespace extensions {

enum GetDcvInfoResponse_DcvRole : int {
  GetDcvInfoResponse_DcvRole_Server = 0,
  GetDcvInfoResponse_DcvRole_Client = 1,
  GetDcvInfoResponse_DcvRole_GetDcvInfoResponse_DcvRole_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GetDcvInfoResponse_DcvRole_GetDcvInfoResponse_DcvRole_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GetDcvInfoResponse_DcvRole_IsValid(int value);
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse_DcvRole_DcvRole_MIN = GetDcvInfoResponse_DcvRole_Server;
constexpr GetDcvInfoResponse_DcvRole GetDcvInfoResponse_DcvRole_DcvRole_MAX = GetDcvInfoResponse_DcvRole_Client;
constexpr int GetDcvInfoResponse_DcvRole_DcvRole_ARRAYSIZE = GetDcvInfoResponse_DcvRole_DcvRole_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GetDcvInfoResponse_DcvRole_descriptor();
template<typename T>
inline const std::string& GetDcvInfoResponse_DcvRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GetDcvInfoResponse_DcvRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GetDcvInfoResponse_DcvRole_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GetDcvInfoResponse_DcvRole_descriptor(), enum_t_value);
}
inline bool GetDcvInfoResponse_DcvRole_Parse(
    const std::string& name, GetDcvInfoResponse_DcvRole* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GetDcvInfoResponse_DcvRole>(
    GetDcvInfoResponse_DcvRole_descriptor(), name, value);
}
enum Response_Status : int {
  Response_Status_NONE = 0,
  Response_Status_SUCCESS = 1,
  Response_Status_ERROR_GENERIC = 10,
  Response_Status_ERROR_ACCESS_DENIED = 11,
  Response_Status_ERROR_NOT_IMPLEMENTED = 12,
  Response_Status_ERROR_INVALID_PARAMETER = 13,
  Response_Status_ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST = 14,
  Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS = 15,
  Response_Status_Response_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Response_Status_Response_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Response_Status_IsValid(int value);
constexpr Response_Status Response_Status_Status_MIN = Response_Status_NONE;
constexpr Response_Status Response_Status_Status_MAX = Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS;
constexpr int Response_Status_Status_ARRAYSIZE = Response_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Response_Status_descriptor();
template<typename T>
inline const std::string& Response_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Response_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Response_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Response_Status_descriptor(), enum_t_value);
}
inline bool Response_Status_Parse(
    const std::string& name, Response_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Response_Status>(
    Response_Status_descriptor(), name, value);
}
// ===================================================================

class SoftwareInfo_VersionNumber PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SoftwareInfo.VersionNumber) */ {
 public:
  inline SoftwareInfo_VersionNumber() : SoftwareInfo_VersionNumber(nullptr) {};
  virtual ~SoftwareInfo_VersionNumber();

  SoftwareInfo_VersionNumber(const SoftwareInfo_VersionNumber& from);
  SoftwareInfo_VersionNumber(SoftwareInfo_VersionNumber&& from) noexcept
    : SoftwareInfo_VersionNumber() {
    *this = ::std::move(from);
  }

  inline SoftwareInfo_VersionNumber& operator=(const SoftwareInfo_VersionNumber& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareInfo_VersionNumber& operator=(SoftwareInfo_VersionNumber&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SoftwareInfo_VersionNumber& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftwareInfo_VersionNumber* internal_default_instance() {
    return reinterpret_cast<const SoftwareInfo_VersionNumber*>(
               &_SoftwareInfo_VersionNumber_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SoftwareInfo_VersionNumber& a, SoftwareInfo_VersionNumber& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareInfo_VersionNumber* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareInfo_VersionNumber* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftwareInfo_VersionNumber* New() const final {
    return CreateMaybeMessage<SoftwareInfo_VersionNumber>(nullptr);
  }

  SoftwareInfo_VersionNumber* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftwareInfo_VersionNumber>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SoftwareInfo_VersionNumber& from);
  void MergeFrom(const SoftwareInfo_VersionNumber& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftwareInfo_VersionNumber* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.SoftwareInfo.VersionNumber";
  }
  protected:
  explicit SoftwareInfo_VersionNumber(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMajorFieldNumber = 1,
    kMinorFieldNumber = 2,
    kRevisionFieldNumber = 3,
  };
  // uint32 major = 1;
  void clear_major();
  ::PROTOBUF_NAMESPACE_ID::uint32 major() const;
  void set_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_major() const;
  void _internal_set_major(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 minor = 2;
  void clear_minor();
  ::PROTOBUF_NAMESPACE_ID::uint32 minor() const;
  void set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_minor() const;
  void _internal_set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 revision = 3;
  void clear_revision();
  ::PROTOBUF_NAMESPACE_ID::uint32 revision() const;
  void set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_revision() const;
  void _internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.SoftwareInfo.VersionNumber)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 major_;
  ::PROTOBUF_NAMESPACE_ID::uint32 minor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class SoftwareInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SoftwareInfo) */ {
 public:
  inline SoftwareInfo() : SoftwareInfo(nullptr) {};
  virtual ~SoftwareInfo();

  SoftwareInfo(const SoftwareInfo& from);
  SoftwareInfo(SoftwareInfo&& from) noexcept
    : SoftwareInfo() {
    *this = ::std::move(from);
  }

  inline SoftwareInfo& operator=(const SoftwareInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SoftwareInfo& operator=(SoftwareInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SoftwareInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SoftwareInfo* internal_default_instance() {
    return reinterpret_cast<const SoftwareInfo*>(
               &_SoftwareInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SoftwareInfo& a, SoftwareInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SoftwareInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SoftwareInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SoftwareInfo* New() const final {
    return CreateMaybeMessage<SoftwareInfo>(nullptr);
  }

  SoftwareInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SoftwareInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SoftwareInfo& from);
  void MergeFrom(const SoftwareInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SoftwareInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.SoftwareInfo";
  }
  protected:
  explicit SoftwareInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef SoftwareInfo_VersionNumber VersionNumber;

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kOsFieldNumber = 3,
    kArchFieldNumber = 4,
    kHostnameFieldNumber = 5,
    kVersionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string os = 3;
  void clear_os();
  const std::string& os() const;
  void set_os(const std::string& value);
  void set_os(std::string&& value);
  void set_os(const char* value);
  void set_os(const char* value, size_t size);
  std::string* mutable_os();
  std::string* release_os();
  void set_allocated_os(std::string* os);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_os();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_os(
      std::string* os);
  private:
  const std::string& _internal_os() const;
  void _internal_set_os(const std::string& value);
  std::string* _internal_mutable_os();
  public:

  // string arch = 4;
  void clear_arch();
  const std::string& arch() const;
  void set_arch(const std::string& value);
  void set_arch(std::string&& value);
  void set_arch(const char* value);
  void set_arch(const char* value, size_t size);
  std::string* mutable_arch();
  std::string* release_arch();
  void set_allocated_arch(std::string* arch);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_arch();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_arch(
      std::string* arch);
  private:
  const std::string& _internal_arch() const;
  void _internal_set_arch(const std::string& value);
  std::string* _internal_mutable_arch();
  public:

  // string hostname = 5;
  void clear_hostname();
  const std::string& hostname() const;
  void set_hostname(const std::string& value);
  void set_hostname(std::string&& value);
  void set_hostname(const char* value);
  void set_hostname(const char* value, size_t size);
  std::string* mutable_hostname();
  std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_hostname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_hostname(
      std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::dcv::extensions::SoftwareInfo_VersionNumber& version() const;
  ::dcv::extensions::SoftwareInfo_VersionNumber* release_version();
  ::dcv::extensions::SoftwareInfo_VersionNumber* mutable_version();
  void set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* version);
  private:
  const ::dcv::extensions::SoftwareInfo_VersionNumber& _internal_version() const;
  ::dcv::extensions::SoftwareInfo_VersionNumber* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::dcv::extensions::SoftwareInfo_VersionNumber* version);
  ::dcv::extensions::SoftwareInfo_VersionNumber* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:dcv.extensions.SoftwareInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr os_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arch_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::dcv::extensions::SoftwareInfo_VersionNumber* version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Rect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Rect) */ {
 public:
  inline Rect() : Rect(nullptr) {};
  virtual ~Rect();

  Rect(const Rect& from);
  Rect(Rect&& from) noexcept
    : Rect() {
    *this = ::std::move(from);
  }

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rect& operator=(Rect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Rect& a, Rect& b) {
    a.Swap(&b);
  }
  inline void Swap(Rect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rect* New() const final {
    return CreateMaybeMessage<Rect>(nullptr);
  }

  Rect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.Rect";
  }
  protected:
  explicit Rect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWidthFieldNumber = 3,
    kHeightFieldNumber = 4,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 width = 3;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 4;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.Rect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class StreamingViews_StreamingView PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViews.StreamingView) */ {
 public:
  inline StreamingViews_StreamingView() : StreamingViews_StreamingView(nullptr) {};
  virtual ~StreamingViews_StreamingView();

  StreamingViews_StreamingView(const StreamingViews_StreamingView& from);
  StreamingViews_StreamingView(StreamingViews_StreamingView&& from) noexcept
    : StreamingViews_StreamingView() {
    *this = ::std::move(from);
  }

  inline StreamingViews_StreamingView& operator=(const StreamingViews_StreamingView& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingViews_StreamingView& operator=(StreamingViews_StreamingView&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingViews_StreamingView& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingViews_StreamingView* internal_default_instance() {
    return reinterpret_cast<const StreamingViews_StreamingView*>(
               &_StreamingViews_StreamingView_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamingViews_StreamingView& a, StreamingViews_StreamingView& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingViews_StreamingView* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingViews_StreamingView* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingViews_StreamingView* New() const final {
    return CreateMaybeMessage<StreamingViews_StreamingView>(nullptr);
  }

  StreamingViews_StreamingView* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingViews_StreamingView>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingViews_StreamingView& from);
  void MergeFrom(const StreamingViews_StreamingView& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingViews_StreamingView* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.StreamingViews.StreamingView";
  }
  protected:
  explicit StreamingViews_StreamingView(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocalAreaFieldNumber = 2,
    kRemoteOffsetFieldNumber = 4,
    kZoomFactorFieldNumber = 3,
    kViewIdFieldNumber = 1,
  };
  // .dcv.extensions.Rect local_area = 2;
  bool has_local_area() const;
  private:
  bool _internal_has_local_area() const;
  public:
  void clear_local_area();
  const ::dcv::extensions::Rect& local_area() const;
  ::dcv::extensions::Rect* release_local_area();
  ::dcv::extensions::Rect* mutable_local_area();
  void set_allocated_local_area(::dcv::extensions::Rect* local_area);
  private:
  const ::dcv::extensions::Rect& _internal_local_area() const;
  ::dcv::extensions::Rect* _internal_mutable_local_area();
  public:
  void unsafe_arena_set_allocated_local_area(
      ::dcv::extensions::Rect* local_area);
  ::dcv::extensions::Rect* unsafe_arena_release_local_area();

  // .dcv.extensions.Point remote_offset = 4;
  bool has_remote_offset() const;
  private:
  bool _internal_has_remote_offset() const;
  public:
  void clear_remote_offset();
  const ::dcv::extensions::Point& remote_offset() const;
  ::dcv::extensions::Point* release_remote_offset();
  ::dcv::extensions::Point* mutable_remote_offset();
  void set_allocated_remote_offset(::dcv::extensions::Point* remote_offset);
  private:
  const ::dcv::extensions::Point& _internal_remote_offset() const;
  ::dcv::extensions::Point* _internal_mutable_remote_offset();
  public:
  void unsafe_arena_set_allocated_remote_offset(
      ::dcv::extensions::Point* remote_offset);
  ::dcv::extensions::Point* unsafe_arena_release_remote_offset();

  // double zoom_factor = 3;
  void clear_zoom_factor();
  double zoom_factor() const;
  void set_zoom_factor(double value);
  private:
  double _internal_zoom_factor() const;
  void _internal_set_zoom_factor(double value);
  public:

  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_view_id() const;
  void _internal_set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViews.StreamingView)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dcv::extensions::Rect* local_area_;
  ::dcv::extensions::Point* remote_offset_;
  double zoom_factor_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class StreamingViews PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViews) */ {
 public:
  inline StreamingViews() : StreamingViews(nullptr) {};
  virtual ~StreamingViews();

  StreamingViews(const StreamingViews& from);
  StreamingViews(StreamingViews&& from) noexcept
    : StreamingViews() {
    *this = ::std::move(from);
  }

  inline StreamingViews& operator=(const StreamingViews& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingViews& operator=(StreamingViews&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingViews& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingViews* internal_default_instance() {
    return reinterpret_cast<const StreamingViews*>(
               &_StreamingViews_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StreamingViews& a, StreamingViews& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingViews* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingViews* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingViews* New() const final {
    return CreateMaybeMessage<StreamingViews>(nullptr);
  }

  StreamingViews* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingViews>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingViews& from);
  void MergeFrom(const StreamingViews& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingViews* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.StreamingViews";
  }
  protected:
  explicit StreamingViews(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef StreamingViews_StreamingView StreamingView;

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingViewFieldNumber = 1,
  };
  // repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
  int streaming_view_size() const;
  private:
  int _internal_streaming_view_size() const;
  public:
  void clear_streaming_view();
  ::dcv::extensions::StreamingViews_StreamingView* mutable_streaming_view(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >*
      mutable_streaming_view();
  private:
  const ::dcv::extensions::StreamingViews_StreamingView& _internal_streaming_view(int index) const;
  ::dcv::extensions::StreamingViews_StreamingView* _internal_add_streaming_view();
  public:
  const ::dcv::extensions::StreamingViews_StreamingView& streaming_view(int index) const;
  ::dcv::extensions::StreamingViews_StreamingView* add_streaming_view();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >&
      streaming_view() const;

  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViews)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView > streaming_view_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class GetDcvInfoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetDcvInfoRequest) */ {
 public:
  inline GetDcvInfoRequest() : GetDcvInfoRequest(nullptr) {};
  virtual ~GetDcvInfoRequest();

  GetDcvInfoRequest(const GetDcvInfoRequest& from);
  GetDcvInfoRequest(GetDcvInfoRequest&& from) noexcept
    : GetDcvInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetDcvInfoRequest& operator=(const GetDcvInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDcvInfoRequest& operator=(GetDcvInfoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDcvInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDcvInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetDcvInfoRequest*>(
               &_GetDcvInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetDcvInfoRequest& a, GetDcvInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDcvInfoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDcvInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDcvInfoRequest* New() const final {
    return CreateMaybeMessage<GetDcvInfoRequest>(nullptr);
  }

  GetDcvInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDcvInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDcvInfoRequest& from);
  void MergeFrom(const GetDcvInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDcvInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.GetDcvInfoRequest";
  }
  protected:
  explicit GetDcvInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetDcvInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class GetManifestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetManifestRequest) */ {
 public:
  inline GetManifestRequest() : GetManifestRequest(nullptr) {};
  virtual ~GetManifestRequest();

  GetManifestRequest(const GetManifestRequest& from);
  GetManifestRequest(GetManifestRequest&& from) noexcept
    : GetManifestRequest() {
    *this = ::std::move(from);
  }

  inline GetManifestRequest& operator=(const GetManifestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetManifestRequest& operator=(GetManifestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetManifestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetManifestRequest* internal_default_instance() {
    return reinterpret_cast<const GetManifestRequest*>(
               &_GetManifestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetManifestRequest& a, GetManifestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetManifestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetManifestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetManifestRequest* New() const final {
    return CreateMaybeMessage<GetManifestRequest>(nullptr);
  }

  GetManifestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetManifestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetManifestRequest& from);
  void MergeFrom(const GetManifestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetManifestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.GetManifestRequest";
  }
  protected:
  explicit GetManifestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetManifestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class SetupVirtualChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetupVirtualChannelRequest) */ {
 public:
  inline SetupVirtualChannelRequest() : SetupVirtualChannelRequest(nullptr) {};
  virtual ~SetupVirtualChannelRequest();

  SetupVirtualChannelRequest(const SetupVirtualChannelRequest& from);
  SetupVirtualChannelRequest(SetupVirtualChannelRequest&& from) noexcept
    : SetupVirtualChannelRequest() {
    *this = ::std::move(from);
  }

  inline SetupVirtualChannelRequest& operator=(const SetupVirtualChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupVirtualChannelRequest& operator=(SetupVirtualChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupVirtualChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupVirtualChannelRequest* internal_default_instance() {
    return reinterpret_cast<const SetupVirtualChannelRequest*>(
               &_SetupVirtualChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetupVirtualChannelRequest& a, SetupVirtualChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupVirtualChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupVirtualChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupVirtualChannelRequest* New() const final {
    return CreateMaybeMessage<SetupVirtualChannelRequest>(nullptr);
  }

  SetupVirtualChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupVirtualChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupVirtualChannelRequest& from);
  void MergeFrom(const SetupVirtualChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupVirtualChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.SetupVirtualChannelRequest";
  }
  protected:
  explicit SetupVirtualChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
    kRelayClientProcessIdFieldNumber = 2,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  const std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const std::string& value);
  void set_virtual_channel_name(std::string&& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  std::string* mutable_virtual_channel_name();
  std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* virtual_channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtual_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtual_channel_name(
      std::string* virtual_channel_name);
  private:
  const std::string& _internal_virtual_channel_name() const;
  void _internal_set_virtual_channel_name(const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();
  public:

  // int64 relay_client_process_id = 2;
  void clear_relay_client_process_id();
  ::PROTOBUF_NAMESPACE_ID::int64 relay_client_process_id() const;
  void set_relay_client_process_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_relay_client_process_id() const;
  void _internal_set_relay_client_process_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetupVirtualChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_channel_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 relay_client_process_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class CloseVirtualChannelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.CloseVirtualChannelRequest) */ {
 public:
  inline CloseVirtualChannelRequest() : CloseVirtualChannelRequest(nullptr) {};
  virtual ~CloseVirtualChannelRequest();

  CloseVirtualChannelRequest(const CloseVirtualChannelRequest& from);
  CloseVirtualChannelRequest(CloseVirtualChannelRequest&& from) noexcept
    : CloseVirtualChannelRequest() {
    *this = ::std::move(from);
  }

  inline CloseVirtualChannelRequest& operator=(const CloseVirtualChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseVirtualChannelRequest& operator=(CloseVirtualChannelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseVirtualChannelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseVirtualChannelRequest* internal_default_instance() {
    return reinterpret_cast<const CloseVirtualChannelRequest*>(
               &_CloseVirtualChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CloseVirtualChannelRequest& a, CloseVirtualChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseVirtualChannelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseVirtualChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseVirtualChannelRequest* New() const final {
    return CreateMaybeMessage<CloseVirtualChannelRequest>(nullptr);
  }

  CloseVirtualChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseVirtualChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseVirtualChannelRequest& from);
  void MergeFrom(const CloseVirtualChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseVirtualChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.CloseVirtualChannelRequest";
  }
  protected:
  explicit CloseVirtualChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  const std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const std::string& value);
  void set_virtual_channel_name(std::string&& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  std::string* mutable_virtual_channel_name();
  std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* virtual_channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtual_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtual_channel_name(
      std::string* virtual_channel_name);
  private:
  const std::string& _internal_virtual_channel_name() const;
  void _internal_set_virtual_channel_name(const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.CloseVirtualChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_channel_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class SetCursorPointRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetCursorPointRequest) */ {
 public:
  inline SetCursorPointRequest() : SetCursorPointRequest(nullptr) {};
  virtual ~SetCursorPointRequest();

  SetCursorPointRequest(const SetCursorPointRequest& from);
  SetCursorPointRequest(SetCursorPointRequest&& from) noexcept
    : SetCursorPointRequest() {
    *this = ::std::move(from);
  }

  inline SetCursorPointRequest& operator=(const SetCursorPointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCursorPointRequest& operator=(SetCursorPointRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCursorPointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCursorPointRequest* internal_default_instance() {
    return reinterpret_cast<const SetCursorPointRequest*>(
               &_SetCursorPointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SetCursorPointRequest& a, SetCursorPointRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCursorPointRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCursorPointRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCursorPointRequest* New() const final {
    return CreateMaybeMessage<SetCursorPointRequest>(nullptr);
  }

  SetCursorPointRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCursorPointRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCursorPointRequest& from);
  void MergeFrom(const SetCursorPointRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCursorPointRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.SetCursorPointRequest";
  }
  protected:
  explicit SetCursorPointRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .dcv.extensions.Point point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::dcv::extensions::Point& point() const;
  ::dcv::extensions::Point* release_point();
  ::dcv::extensions::Point* mutable_point();
  void set_allocated_point(::dcv::extensions::Point* point);
  private:
  const ::dcv::extensions::Point& _internal_point() const;
  ::dcv::extensions::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::dcv::extensions::Point* point);
  ::dcv::extensions::Point* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetCursorPointRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dcv::extensions::Point* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class GetStreamingViewsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetStreamingViewsRequest) */ {
 public:
  inline GetStreamingViewsRequest() : GetStreamingViewsRequest(nullptr) {};
  virtual ~GetStreamingViewsRequest();

  GetStreamingViewsRequest(const GetStreamingViewsRequest& from);
  GetStreamingViewsRequest(GetStreamingViewsRequest&& from) noexcept
    : GetStreamingViewsRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamingViewsRequest& operator=(const GetStreamingViewsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamingViewsRequest& operator=(GetStreamingViewsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamingViewsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamingViewsRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamingViewsRequest*>(
               &_GetStreamingViewsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetStreamingViewsRequest& a, GetStreamingViewsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamingViewsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamingViewsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamingViewsRequest* New() const final {
    return CreateMaybeMessage<GetStreamingViewsRequest>(nullptr);
  }

  GetStreamingViewsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamingViewsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamingViewsRequest& from);
  void MergeFrom(const GetStreamingViewsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamingViewsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.GetStreamingViewsRequest";
  }
  protected:
  explicit GetStreamingViewsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetStreamingViewsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class IsPointInsideStreamingViewsRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.IsPointInsideStreamingViewsRequest) */ {
 public:
  inline IsPointInsideStreamingViewsRequest() : IsPointInsideStreamingViewsRequest(nullptr) {};
  virtual ~IsPointInsideStreamingViewsRequest();

  IsPointInsideStreamingViewsRequest(const IsPointInsideStreamingViewsRequest& from);
  IsPointInsideStreamingViewsRequest(IsPointInsideStreamingViewsRequest&& from) noexcept
    : IsPointInsideStreamingViewsRequest() {
    *this = ::std::move(from);
  }

  inline IsPointInsideStreamingViewsRequest& operator=(const IsPointInsideStreamingViewsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPointInsideStreamingViewsRequest& operator=(IsPointInsideStreamingViewsRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsPointInsideStreamingViewsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsPointInsideStreamingViewsRequest* internal_default_instance() {
    return reinterpret_cast<const IsPointInsideStreamingViewsRequest*>(
               &_IsPointInsideStreamingViewsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IsPointInsideStreamingViewsRequest& a, IsPointInsideStreamingViewsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPointInsideStreamingViewsRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsPointInsideStreamingViewsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsPointInsideStreamingViewsRequest* New() const final {
    return CreateMaybeMessage<IsPointInsideStreamingViewsRequest>(nullptr);
  }

  IsPointInsideStreamingViewsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsPointInsideStreamingViewsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsPointInsideStreamingViewsRequest& from);
  void MergeFrom(const IsPointInsideStreamingViewsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsPointInsideStreamingViewsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.IsPointInsideStreamingViewsRequest";
  }
  protected:
  explicit IsPointInsideStreamingViewsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
  };
  // .dcv.extensions.Point point = 1;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::dcv::extensions::Point& point() const;
  ::dcv::extensions::Point* release_point();
  ::dcv::extensions::Point* mutable_point();
  void set_allocated_point(::dcv::extensions::Point* point);
  private:
  const ::dcv::extensions::Point& _internal_point() const;
  ::dcv::extensions::Point* _internal_mutable_point();
  public:
  void unsafe_arena_set_allocated_point(
      ::dcv::extensions::Point* point);
  ::dcv::extensions::Point* unsafe_arena_release_point();

  // @@protoc_insertion_point(class_scope:dcv.extensions.IsPointInsideStreamingViewsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dcv::extensions::Point* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class GetDcvInfoResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetDcvInfoResponse) */ {
 public:
  inline GetDcvInfoResponse() : GetDcvInfoResponse(nullptr) {};
  virtual ~GetDcvInfoResponse();

  GetDcvInfoResponse(const GetDcvInfoResponse& from);
  GetDcvInfoResponse(GetDcvInfoResponse&& from) noexcept
    : GetDcvInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetDcvInfoResponse& operator=(const GetDcvInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDcvInfoResponse& operator=(GetDcvInfoResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDcvInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDcvInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetDcvInfoResponse*>(
               &_GetDcvInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetDcvInfoResponse& a, GetDcvInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDcvInfoResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDcvInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDcvInfoResponse* New() const final {
    return CreateMaybeMessage<GetDcvInfoResponse>(nullptr);
  }

  GetDcvInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDcvInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDcvInfoResponse& from);
  void MergeFrom(const GetDcvInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDcvInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.GetDcvInfoResponse";
  }
  protected:
  explicit GetDcvInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetDcvInfoResponse_DcvRole DcvRole;
  static constexpr DcvRole Server =
    GetDcvInfoResponse_DcvRole_Server;
  static constexpr DcvRole Client =
    GetDcvInfoResponse_DcvRole_Client;
  static inline bool DcvRole_IsValid(int value) {
    return GetDcvInfoResponse_DcvRole_IsValid(value);
  }
  static constexpr DcvRole DcvRole_MIN =
    GetDcvInfoResponse_DcvRole_DcvRole_MIN;
  static constexpr DcvRole DcvRole_MAX =
    GetDcvInfoResponse_DcvRole_DcvRole_MAX;
  static constexpr int DcvRole_ARRAYSIZE =
    GetDcvInfoResponse_DcvRole_DcvRole_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DcvRole_descriptor() {
    return GetDcvInfoResponse_DcvRole_descriptor();
  }
  template<typename T>
  static inline const std::string& DcvRole_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DcvRole>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DcvRole_Name.");
    return GetDcvInfoResponse_DcvRole_Name(enum_t_value);
  }
  static inline bool DcvRole_Parse(const std::string& name,
      DcvRole* value) {
    return GetDcvInfoResponse_DcvRole_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServerInfoFieldNumber = 3,
    kClientInfoFieldNumber = 4,
    kDcvProcessIdFieldNumber = 2,
    kDcvRoleFieldNumber = 1,
  };
  // .dcv.extensions.SoftwareInfo server_info = 3;
  bool has_server_info() const;
  private:
  bool _internal_has_server_info() const;
  public:
  void clear_server_info();
  const ::dcv::extensions::SoftwareInfo& server_info() const;
  ::dcv::extensions::SoftwareInfo* release_server_info();
  ::dcv::extensions::SoftwareInfo* mutable_server_info();
  void set_allocated_server_info(::dcv::extensions::SoftwareInfo* server_info);
  private:
  const ::dcv::extensions::SoftwareInfo& _internal_server_info() const;
  ::dcv::extensions::SoftwareInfo* _internal_mutable_server_info();
  public:
  void unsafe_arena_set_allocated_server_info(
      ::dcv::extensions::SoftwareInfo* server_info);
  ::dcv::extensions::SoftwareInfo* unsafe_arena_release_server_info();

  // .dcv.extensions.SoftwareInfo client_info = 4;
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::dcv::extensions::SoftwareInfo& client_info() const;
  ::dcv::extensions::SoftwareInfo* release_client_info();
  ::dcv::extensions::SoftwareInfo* mutable_client_info();
  void set_allocated_client_info(::dcv::extensions::SoftwareInfo* client_info);
  private:
  const ::dcv::extensions::SoftwareInfo& _internal_client_info() const;
  ::dcv::extensions::SoftwareInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::dcv::extensions::SoftwareInfo* client_info);
  ::dcv::extensions::SoftwareInfo* unsafe_arena_release_client_info();

  // int64 dcv_process_id = 2;
  void clear_dcv_process_id();
  ::PROTOBUF_NAMESPACE_ID::int64 dcv_process_id() const;
  void set_dcv_process_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_dcv_process_id() const;
  void _internal_set_dcv_process_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
  void clear_dcv_role();
  ::dcv::extensions::GetDcvInfoResponse_DcvRole dcv_role() const;
  void set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value);
  private:
  ::dcv::extensions::GetDcvInfoResponse_DcvRole _internal_dcv_role() const;
  void _internal_set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetDcvInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dcv::extensions::SoftwareInfo* server_info_;
  ::dcv::extensions::SoftwareInfo* client_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 dcv_process_id_;
  int dcv_role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class GetManifestResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetManifestResponse) */ {
 public:
  inline GetManifestResponse() : GetManifestResponse(nullptr) {};
  virtual ~GetManifestResponse();

  GetManifestResponse(const GetManifestResponse& from);
  GetManifestResponse(GetManifestResponse&& from) noexcept
    : GetManifestResponse() {
    *this = ::std::move(from);
  }

  inline GetManifestResponse& operator=(const GetManifestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetManifestResponse& operator=(GetManifestResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetManifestResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetManifestResponse* internal_default_instance() {
    return reinterpret_cast<const GetManifestResponse*>(
               &_GetManifestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetManifestResponse& a, GetManifestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetManifestResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetManifestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetManifestResponse* New() const final {
    return CreateMaybeMessage<GetManifestResponse>(nullptr);
  }

  GetManifestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetManifestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetManifestResponse& from);
  void MergeFrom(const GetManifestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetManifestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.GetManifestResponse";
  }
  protected:
  explicit GetManifestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManifestPathFieldNumber = 1,
  };
  // string manifest_path = 1;
  void clear_manifest_path();
  const std::string& manifest_path() const;
  void set_manifest_path(const std::string& value);
  void set_manifest_path(std::string&& value);
  void set_manifest_path(const char* value);
  void set_manifest_path(const char* value, size_t size);
  std::string* mutable_manifest_path();
  std::string* release_manifest_path();
  void set_allocated_manifest_path(std::string* manifest_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_manifest_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_manifest_path(
      std::string* manifest_path);
  private:
  const std::string& _internal_manifest_path() const;
  void _internal_set_manifest_path(const std::string& value);
  std::string* _internal_mutable_manifest_path();
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetManifestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manifest_path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class SetupVirtualChannelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetupVirtualChannelResponse) */ {
 public:
  inline SetupVirtualChannelResponse() : SetupVirtualChannelResponse(nullptr) {};
  virtual ~SetupVirtualChannelResponse();

  SetupVirtualChannelResponse(const SetupVirtualChannelResponse& from);
  SetupVirtualChannelResponse(SetupVirtualChannelResponse&& from) noexcept
    : SetupVirtualChannelResponse() {
    *this = ::std::move(from);
  }

  inline SetupVirtualChannelResponse& operator=(const SetupVirtualChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupVirtualChannelResponse& operator=(SetupVirtualChannelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupVirtualChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupVirtualChannelResponse* internal_default_instance() {
    return reinterpret_cast<const SetupVirtualChannelResponse*>(
               &_SetupVirtualChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SetupVirtualChannelResponse& a, SetupVirtualChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupVirtualChannelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetupVirtualChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupVirtualChannelResponse* New() const final {
    return CreateMaybeMessage<SetupVirtualChannelResponse>(nullptr);
  }

  SetupVirtualChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupVirtualChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupVirtualChannelResponse& from);
  void MergeFrom(const SetupVirtualChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupVirtualChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.SetupVirtualChannelResponse";
  }
  protected:
  explicit SetupVirtualChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
    kRelayPathFieldNumber = 2,
    kVirtualChannelAuthTokenFieldNumber = 4,
    kRelayServerProcessIdFieldNumber = 3,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  const std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const std::string& value);
  void set_virtual_channel_name(std::string&& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  std::string* mutable_virtual_channel_name();
  std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* virtual_channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtual_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtual_channel_name(
      std::string* virtual_channel_name);
  private:
  const std::string& _internal_virtual_channel_name() const;
  void _internal_set_virtual_channel_name(const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();
  public:

  // string relay_path = 2;
  void clear_relay_path();
  const std::string& relay_path() const;
  void set_relay_path(const std::string& value);
  void set_relay_path(std::string&& value);
  void set_relay_path(const char* value);
  void set_relay_path(const char* value, size_t size);
  std::string* mutable_relay_path();
  std::string* release_relay_path();
  void set_allocated_relay_path(std::string* relay_path);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_relay_path();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_relay_path(
      std::string* relay_path);
  private:
  const std::string& _internal_relay_path() const;
  void _internal_set_relay_path(const std::string& value);
  std::string* _internal_mutable_relay_path();
  public:

  // bytes virtual_channel_auth_token = 4;
  void clear_virtual_channel_auth_token();
  const std::string& virtual_channel_auth_token() const;
  void set_virtual_channel_auth_token(const std::string& value);
  void set_virtual_channel_auth_token(std::string&& value);
  void set_virtual_channel_auth_token(const char* value);
  void set_virtual_channel_auth_token(const void* value, size_t size);
  std::string* mutable_virtual_channel_auth_token();
  std::string* release_virtual_channel_auth_token();
  void set_allocated_virtual_channel_auth_token(std::string* virtual_channel_auth_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtual_channel_auth_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtual_channel_auth_token(
      std::string* virtual_channel_auth_token);
  private:
  const std::string& _internal_virtual_channel_auth_token() const;
  void _internal_set_virtual_channel_auth_token(const std::string& value);
  std::string* _internal_mutable_virtual_channel_auth_token();
  public:

  // int64 relay_server_process_id = 3;
  void clear_relay_server_process_id();
  ::PROTOBUF_NAMESPACE_ID::int64 relay_server_process_id() const;
  void set_relay_server_process_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_relay_server_process_id() const;
  void _internal_set_relay_server_process_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetupVirtualChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relay_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_channel_auth_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 relay_server_process_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class CloseVirtualChannelResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.CloseVirtualChannelResponse) */ {
 public:
  inline CloseVirtualChannelResponse() : CloseVirtualChannelResponse(nullptr) {};
  virtual ~CloseVirtualChannelResponse();

  CloseVirtualChannelResponse(const CloseVirtualChannelResponse& from);
  CloseVirtualChannelResponse(CloseVirtualChannelResponse&& from) noexcept
    : CloseVirtualChannelResponse() {
    *this = ::std::move(from);
  }

  inline CloseVirtualChannelResponse& operator=(const CloseVirtualChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CloseVirtualChannelResponse& operator=(CloseVirtualChannelResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CloseVirtualChannelResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloseVirtualChannelResponse* internal_default_instance() {
    return reinterpret_cast<const CloseVirtualChannelResponse*>(
               &_CloseVirtualChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CloseVirtualChannelResponse& a, CloseVirtualChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CloseVirtualChannelResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CloseVirtualChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CloseVirtualChannelResponse* New() const final {
    return CreateMaybeMessage<CloseVirtualChannelResponse>(nullptr);
  }

  CloseVirtualChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CloseVirtualChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CloseVirtualChannelResponse& from);
  void MergeFrom(const CloseVirtualChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloseVirtualChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.CloseVirtualChannelResponse";
  }
  protected:
  explicit CloseVirtualChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  const std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const std::string& value);
  void set_virtual_channel_name(std::string&& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  std::string* mutable_virtual_channel_name();
  std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* virtual_channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtual_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtual_channel_name(
      std::string* virtual_channel_name);
  private:
  const std::string& _internal_virtual_channel_name() const;
  void _internal_set_virtual_channel_name(const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.CloseVirtualChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_channel_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class SetCursorPointResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.SetCursorPointResponse) */ {
 public:
  inline SetCursorPointResponse() : SetCursorPointResponse(nullptr) {};
  virtual ~SetCursorPointResponse();

  SetCursorPointResponse(const SetCursorPointResponse& from);
  SetCursorPointResponse(SetCursorPointResponse&& from) noexcept
    : SetCursorPointResponse() {
    *this = ::std::move(from);
  }

  inline SetCursorPointResponse& operator=(const SetCursorPointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetCursorPointResponse& operator=(SetCursorPointResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetCursorPointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetCursorPointResponse* internal_default_instance() {
    return reinterpret_cast<const SetCursorPointResponse*>(
               &_SetCursorPointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SetCursorPointResponse& a, SetCursorPointResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetCursorPointResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetCursorPointResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetCursorPointResponse* New() const final {
    return CreateMaybeMessage<SetCursorPointResponse>(nullptr);
  }

  SetCursorPointResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetCursorPointResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetCursorPointResponse& from);
  void MergeFrom(const SetCursorPointResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetCursorPointResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.SetCursorPointResponse";
  }
  protected:
  explicit SetCursorPointResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dcv.extensions.SetCursorPointResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class GetStreamingViewsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.GetStreamingViewsResponse) */ {
 public:
  inline GetStreamingViewsResponse() : GetStreamingViewsResponse(nullptr) {};
  virtual ~GetStreamingViewsResponse();

  GetStreamingViewsResponse(const GetStreamingViewsResponse& from);
  GetStreamingViewsResponse(GetStreamingViewsResponse&& from) noexcept
    : GetStreamingViewsResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamingViewsResponse& operator=(const GetStreamingViewsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamingViewsResponse& operator=(GetStreamingViewsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStreamingViewsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStreamingViewsResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamingViewsResponse*>(
               &_GetStreamingViewsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetStreamingViewsResponse& a, GetStreamingViewsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamingViewsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamingViewsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamingViewsResponse* New() const final {
    return CreateMaybeMessage<GetStreamingViewsResponse>(nullptr);
  }

  GetStreamingViewsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamingViewsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamingViewsResponse& from);
  void MergeFrom(const GetStreamingViewsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamingViewsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.GetStreamingViewsResponse";
  }
  protected:
  explicit GetStreamingViewsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingViewsFieldNumber = 1,
  };
  // .dcv.extensions.StreamingViews streaming_views = 1;
  bool has_streaming_views() const;
  private:
  bool _internal_has_streaming_views() const;
  public:
  void clear_streaming_views();
  const ::dcv::extensions::StreamingViews& streaming_views() const;
  ::dcv::extensions::StreamingViews* release_streaming_views();
  ::dcv::extensions::StreamingViews* mutable_streaming_views();
  void set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views);
  private:
  const ::dcv::extensions::StreamingViews& _internal_streaming_views() const;
  ::dcv::extensions::StreamingViews* _internal_mutable_streaming_views();
  public:
  void unsafe_arena_set_allocated_streaming_views(
      ::dcv::extensions::StreamingViews* streaming_views);
  ::dcv::extensions::StreamingViews* unsafe_arena_release_streaming_views();

  // @@protoc_insertion_point(class_scope:dcv.extensions.GetStreamingViewsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dcv::extensions::StreamingViews* streaming_views_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class IsPointInsideStreamingViewsResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.IsPointInsideStreamingViewsResponse) */ {
 public:
  inline IsPointInsideStreamingViewsResponse() : IsPointInsideStreamingViewsResponse(nullptr) {};
  virtual ~IsPointInsideStreamingViewsResponse();

  IsPointInsideStreamingViewsResponse(const IsPointInsideStreamingViewsResponse& from);
  IsPointInsideStreamingViewsResponse(IsPointInsideStreamingViewsResponse&& from) noexcept
    : IsPointInsideStreamingViewsResponse() {
    *this = ::std::move(from);
  }

  inline IsPointInsideStreamingViewsResponse& operator=(const IsPointInsideStreamingViewsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsPointInsideStreamingViewsResponse& operator=(IsPointInsideStreamingViewsResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IsPointInsideStreamingViewsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IsPointInsideStreamingViewsResponse* internal_default_instance() {
    return reinterpret_cast<const IsPointInsideStreamingViewsResponse*>(
               &_IsPointInsideStreamingViewsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(IsPointInsideStreamingViewsResponse& a, IsPointInsideStreamingViewsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsPointInsideStreamingViewsResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsPointInsideStreamingViewsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IsPointInsideStreamingViewsResponse* New() const final {
    return CreateMaybeMessage<IsPointInsideStreamingViewsResponse>(nullptr);
  }

  IsPointInsideStreamingViewsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IsPointInsideStreamingViewsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IsPointInsideStreamingViewsResponse& from);
  void MergeFrom(const IsPointInsideStreamingViewsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsPointInsideStreamingViewsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.IsPointInsideStreamingViewsResponse";
  }
  protected:
  explicit IsPointInsideStreamingViewsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewIdFieldNumber = 1,
  };
  // int32 view_id = 1;
  void clear_view_id();
  ::PROTOBUF_NAMESPACE_ID::int32 view_id() const;
  void set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_view_id() const;
  void _internal_set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.IsPointInsideStreamingViewsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 view_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class VirtualChannelReadyEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.VirtualChannelReadyEvent) */ {
 public:
  inline VirtualChannelReadyEvent() : VirtualChannelReadyEvent(nullptr) {};
  virtual ~VirtualChannelReadyEvent();

  VirtualChannelReadyEvent(const VirtualChannelReadyEvent& from);
  VirtualChannelReadyEvent(VirtualChannelReadyEvent&& from) noexcept
    : VirtualChannelReadyEvent() {
    *this = ::std::move(from);
  }

  inline VirtualChannelReadyEvent& operator=(const VirtualChannelReadyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualChannelReadyEvent& operator=(VirtualChannelReadyEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VirtualChannelReadyEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualChannelReadyEvent* internal_default_instance() {
    return reinterpret_cast<const VirtualChannelReadyEvent*>(
               &_VirtualChannelReadyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(VirtualChannelReadyEvent& a, VirtualChannelReadyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualChannelReadyEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualChannelReadyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VirtualChannelReadyEvent* New() const final {
    return CreateMaybeMessage<VirtualChannelReadyEvent>(nullptr);
  }

  VirtualChannelReadyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VirtualChannelReadyEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VirtualChannelReadyEvent& from);
  void MergeFrom(const VirtualChannelReadyEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualChannelReadyEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.VirtualChannelReadyEvent";
  }
  protected:
  explicit VirtualChannelReadyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  const std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const std::string& value);
  void set_virtual_channel_name(std::string&& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  std::string* mutable_virtual_channel_name();
  std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* virtual_channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtual_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtual_channel_name(
      std::string* virtual_channel_name);
  private:
  const std::string& _internal_virtual_channel_name() const;
  void _internal_set_virtual_channel_name(const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.VirtualChannelReadyEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_channel_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class VirtualChannelClosedEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.VirtualChannelClosedEvent) */ {
 public:
  inline VirtualChannelClosedEvent() : VirtualChannelClosedEvent(nullptr) {};
  virtual ~VirtualChannelClosedEvent();

  VirtualChannelClosedEvent(const VirtualChannelClosedEvent& from);
  VirtualChannelClosedEvent(VirtualChannelClosedEvent&& from) noexcept
    : VirtualChannelClosedEvent() {
    *this = ::std::move(from);
  }

  inline VirtualChannelClosedEvent& operator=(const VirtualChannelClosedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline VirtualChannelClosedEvent& operator=(VirtualChannelClosedEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VirtualChannelClosedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VirtualChannelClosedEvent* internal_default_instance() {
    return reinterpret_cast<const VirtualChannelClosedEvent*>(
               &_VirtualChannelClosedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(VirtualChannelClosedEvent& a, VirtualChannelClosedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(VirtualChannelClosedEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VirtualChannelClosedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VirtualChannelClosedEvent* New() const final {
    return CreateMaybeMessage<VirtualChannelClosedEvent>(nullptr);
  }

  VirtualChannelClosedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VirtualChannelClosedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VirtualChannelClosedEvent& from);
  void MergeFrom(const VirtualChannelClosedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VirtualChannelClosedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.VirtualChannelClosedEvent";
  }
  protected:
  explicit VirtualChannelClosedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelNameFieldNumber = 1,
  };
  // string virtual_channel_name = 1;
  void clear_virtual_channel_name();
  const std::string& virtual_channel_name() const;
  void set_virtual_channel_name(const std::string& value);
  void set_virtual_channel_name(std::string&& value);
  void set_virtual_channel_name(const char* value);
  void set_virtual_channel_name(const char* value, size_t size);
  std::string* mutable_virtual_channel_name();
  std::string* release_virtual_channel_name();
  void set_allocated_virtual_channel_name(std::string* virtual_channel_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_virtual_channel_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_virtual_channel_name(
      std::string* virtual_channel_name);
  private:
  const std::string& _internal_virtual_channel_name() const;
  void _internal_set_virtual_channel_name(const std::string& value);
  std::string* _internal_mutable_virtual_channel_name();
  public:

  // @@protoc_insertion_point(class_scope:dcv.extensions.VirtualChannelClosedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_channel_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class StreamingViewsChangedEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.StreamingViewsChangedEvent) */ {
 public:
  inline StreamingViewsChangedEvent() : StreamingViewsChangedEvent(nullptr) {};
  virtual ~StreamingViewsChangedEvent();

  StreamingViewsChangedEvent(const StreamingViewsChangedEvent& from);
  StreamingViewsChangedEvent(StreamingViewsChangedEvent&& from) noexcept
    : StreamingViewsChangedEvent() {
    *this = ::std::move(from);
  }

  inline StreamingViewsChangedEvent& operator=(const StreamingViewsChangedEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamingViewsChangedEvent& operator=(StreamingViewsChangedEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamingViewsChangedEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingViewsChangedEvent* internal_default_instance() {
    return reinterpret_cast<const StreamingViewsChangedEvent*>(
               &_StreamingViewsChangedEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(StreamingViewsChangedEvent& a, StreamingViewsChangedEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamingViewsChangedEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamingViewsChangedEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamingViewsChangedEvent* New() const final {
    return CreateMaybeMessage<StreamingViewsChangedEvent>(nullptr);
  }

  StreamingViewsChangedEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamingViewsChangedEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamingViewsChangedEvent& from);
  void MergeFrom(const StreamingViewsChangedEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamingViewsChangedEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.StreamingViewsChangedEvent";
  }
  protected:
  explicit StreamingViewsChangedEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamingViewsFieldNumber = 1,
  };
  // .dcv.extensions.StreamingViews streaming_views = 1;
  bool has_streaming_views() const;
  private:
  bool _internal_has_streaming_views() const;
  public:
  void clear_streaming_views();
  const ::dcv::extensions::StreamingViews& streaming_views() const;
  ::dcv::extensions::StreamingViews* release_streaming_views();
  ::dcv::extensions::StreamingViews* mutable_streaming_views();
  void set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views);
  private:
  const ::dcv::extensions::StreamingViews& _internal_streaming_views() const;
  ::dcv::extensions::StreamingViews* _internal_mutable_streaming_views();
  public:
  void unsafe_arena_set_allocated_streaming_views(
      ::dcv::extensions::StreamingViews* streaming_views);
  ::dcv::extensions::StreamingViews* unsafe_arena_release_streaming_views();

  // @@protoc_insertion_point(class_scope:dcv.extensions.StreamingViewsChangedEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::dcv::extensions::StreamingViews* streaming_views_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Request) */ {
 public:
  inline Request() : Request(nullptr) {};
  virtual ~Request();

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Request& default_instance();

  enum RequestCase {
    kGetDcvInfoRequest = 10,
    kGetManifestRequest = 11,
    kSetupVirtualChannelRequest = 20,
    kCloseVirtualChannelRequest = 21,
    kSetCursorPointRequest = 30,
    kGetStreamingViewsRequest = 31,
    kIsPointInsideStreamingViewsRequest = 32,
    REQUEST_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kGetDcvInfoRequestFieldNumber = 10,
    kGetManifestRequestFieldNumber = 11,
    kSetupVirtualChannelRequestFieldNumber = 20,
    kCloseVirtualChannelRequestFieldNumber = 21,
    kSetCursorPointRequestFieldNumber = 30,
    kGetStreamingViewsRequestFieldNumber = 31,
    kIsPointInsideStreamingViewsRequestFieldNumber = 32,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
  bool has_get_dcv_info_request() const;
  private:
  bool _internal_has_get_dcv_info_request() const;
  public:
  void clear_get_dcv_info_request();
  const ::dcv::extensions::GetDcvInfoRequest& get_dcv_info_request() const;
  ::dcv::extensions::GetDcvInfoRequest* release_get_dcv_info_request();
  ::dcv::extensions::GetDcvInfoRequest* mutable_get_dcv_info_request();
  void set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request);
  private:
  const ::dcv::extensions::GetDcvInfoRequest& _internal_get_dcv_info_request() const;
  ::dcv::extensions::GetDcvInfoRequest* _internal_mutable_get_dcv_info_request();
  public:
  void unsafe_arena_set_allocated_get_dcv_info_request(
      ::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request);
  ::dcv::extensions::GetDcvInfoRequest* unsafe_arena_release_get_dcv_info_request();

  // .dcv.extensions.GetManifestRequest get_manifest_request = 11;
  bool has_get_manifest_request() const;
  private:
  bool _internal_has_get_manifest_request() const;
  public:
  void clear_get_manifest_request();
  const ::dcv::extensions::GetManifestRequest& get_manifest_request() const;
  ::dcv::extensions::GetManifestRequest* release_get_manifest_request();
  ::dcv::extensions::GetManifestRequest* mutable_get_manifest_request();
  void set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* get_manifest_request);
  private:
  const ::dcv::extensions::GetManifestRequest& _internal_get_manifest_request() const;
  ::dcv::extensions::GetManifestRequest* _internal_mutable_get_manifest_request();
  public:
  void unsafe_arena_set_allocated_get_manifest_request(
      ::dcv::extensions::GetManifestRequest* get_manifest_request);
  ::dcv::extensions::GetManifestRequest* unsafe_arena_release_get_manifest_request();

  // .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
  bool has_setup_virtual_channel_request() const;
  private:
  bool _internal_has_setup_virtual_channel_request() const;
  public:
  void clear_setup_virtual_channel_request();
  const ::dcv::extensions::SetupVirtualChannelRequest& setup_virtual_channel_request() const;
  ::dcv::extensions::SetupVirtualChannelRequest* release_setup_virtual_channel_request();
  ::dcv::extensions::SetupVirtualChannelRequest* mutable_setup_virtual_channel_request();
  void set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request);
  private:
  const ::dcv::extensions::SetupVirtualChannelRequest& _internal_setup_virtual_channel_request() const;
  ::dcv::extensions::SetupVirtualChannelRequest* _internal_mutable_setup_virtual_channel_request();
  public:
  void unsafe_arena_set_allocated_setup_virtual_channel_request(
      ::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request);
  ::dcv::extensions::SetupVirtualChannelRequest* unsafe_arena_release_setup_virtual_channel_request();

  // .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
  bool has_close_virtual_channel_request() const;
  private:
  bool _internal_has_close_virtual_channel_request() const;
  public:
  void clear_close_virtual_channel_request();
  const ::dcv::extensions::CloseVirtualChannelRequest& close_virtual_channel_request() const;
  ::dcv::extensions::CloseVirtualChannelRequest* release_close_virtual_channel_request();
  ::dcv::extensions::CloseVirtualChannelRequest* mutable_close_virtual_channel_request();
  void set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request);
  private:
  const ::dcv::extensions::CloseVirtualChannelRequest& _internal_close_virtual_channel_request() const;
  ::dcv::extensions::CloseVirtualChannelRequest* _internal_mutable_close_virtual_channel_request();
  public:
  void unsafe_arena_set_allocated_close_virtual_channel_request(
      ::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request);
  ::dcv::extensions::CloseVirtualChannelRequest* unsafe_arena_release_close_virtual_channel_request();

  // .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
  bool has_set_cursor_point_request() const;
  private:
  bool _internal_has_set_cursor_point_request() const;
  public:
  void clear_set_cursor_point_request();
  const ::dcv::extensions::SetCursorPointRequest& set_cursor_point_request() const;
  ::dcv::extensions::SetCursorPointRequest* release_set_cursor_point_request();
  ::dcv::extensions::SetCursorPointRequest* mutable_set_cursor_point_request();
  void set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* set_cursor_point_request);
  private:
  const ::dcv::extensions::SetCursorPointRequest& _internal_set_cursor_point_request() const;
  ::dcv::extensions::SetCursorPointRequest* _internal_mutable_set_cursor_point_request();
  public:
  void unsafe_arena_set_allocated_set_cursor_point_request(
      ::dcv::extensions::SetCursorPointRequest* set_cursor_point_request);
  ::dcv::extensions::SetCursorPointRequest* unsafe_arena_release_set_cursor_point_request();

  // .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
  bool has_get_streaming_views_request() const;
  private:
  bool _internal_has_get_streaming_views_request() const;
  public:
  void clear_get_streaming_views_request();
  const ::dcv::extensions::GetStreamingViewsRequest& get_streaming_views_request() const;
  ::dcv::extensions::GetStreamingViewsRequest* release_get_streaming_views_request();
  ::dcv::extensions::GetStreamingViewsRequest* mutable_get_streaming_views_request();
  void set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request);
  private:
  const ::dcv::extensions::GetStreamingViewsRequest& _internal_get_streaming_views_request() const;
  ::dcv::extensions::GetStreamingViewsRequest* _internal_mutable_get_streaming_views_request();
  public:
  void unsafe_arena_set_allocated_get_streaming_views_request(
      ::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request);
  ::dcv::extensions::GetStreamingViewsRequest* unsafe_arena_release_get_streaming_views_request();

  // .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
  bool has_is_point_inside_streaming_views_request() const;
  private:
  bool _internal_has_is_point_inside_streaming_views_request() const;
  public:
  void clear_is_point_inside_streaming_views_request();
  const ::dcv::extensions::IsPointInsideStreamingViewsRequest& is_point_inside_streaming_views_request() const;
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* release_is_point_inside_streaming_views_request();
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* mutable_is_point_inside_streaming_views_request();
  void set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request);
  private:
  const ::dcv::extensions::IsPointInsideStreamingViewsRequest& _internal_is_point_inside_streaming_views_request() const;
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* _internal_mutable_is_point_inside_streaming_views_request();
  public:
  void unsafe_arena_set_allocated_is_point_inside_streaming_views_request(
      ::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request);
  ::dcv::extensions::IsPointInsideStreamingViewsRequest* unsafe_arena_release_is_point_inside_streaming_views_request();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Request)
 private:
  class _Internal;
  void set_has_get_dcv_info_request();
  void set_has_get_manifest_request();
  void set_has_setup_virtual_channel_request();
  void set_has_close_virtual_channel_request();
  void set_has_set_cursor_point_request();
  void set_has_get_streaming_views_request();
  void set_has_is_point_inside_streaming_views_request();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  union RequestUnion {
    RequestUnion() {}
    ::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request_;
    ::dcv::extensions::GetManifestRequest* get_manifest_request_;
    ::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request_;
    ::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request_;
    ::dcv::extensions::SetCursorPointRequest* set_cursor_point_request_;
    ::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request_;
    ::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request_;
  } request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Response) */ {
 public:
  inline Response() : Response(nullptr) {};
  virtual ~Response();

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Response& default_instance();

  enum ResponseCase {
    kGetDcvInfoResponse = 10,
    kGetManifestResponse = 11,
    kSetupVirtualChannelResponse = 20,
    kCloseVirtualChannelResponse = 21,
    kSetCursorPointResponse = 30,
    kGetStreamingViewsResponse = 31,
    kIsPointInsideStreamingViewsResponse = 32,
    RESPONSE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const final {
    return CreateMaybeMessage<Response>(nullptr);
  }

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Response_Status Status;
  static constexpr Status NONE =
    Response_Status_NONE;
  static constexpr Status SUCCESS =
    Response_Status_SUCCESS;
  static constexpr Status ERROR_GENERIC =
    Response_Status_ERROR_GENERIC;
  static constexpr Status ERROR_ACCESS_DENIED =
    Response_Status_ERROR_ACCESS_DENIED;
  static constexpr Status ERROR_NOT_IMPLEMENTED =
    Response_Status_ERROR_NOT_IMPLEMENTED;
  static constexpr Status ERROR_INVALID_PARAMETER =
    Response_Status_ERROR_INVALID_PARAMETER;
  static constexpr Status ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST =
    Response_Status_ERROR_INVALID_VIRTUAL_CHANNEL_NAMESPACE_IN_MANIFEST;
  static constexpr Status ERROR_TOO_MANY_VIRTUAL_CHANNELS =
    Response_Status_ERROR_TOO_MANY_VIRTUAL_CHANNELS;
  static inline bool Status_IsValid(int value) {
    return Response_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    Response_Status_Status_MIN;
  static constexpr Status Status_MAX =
    Response_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    Response_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return Response_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return Response_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return Response_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kStatusFieldNumber = 2,
    kGetDcvInfoResponseFieldNumber = 10,
    kGetManifestResponseFieldNumber = 11,
    kSetupVirtualChannelResponseFieldNumber = 20,
    kCloseVirtualChannelResponseFieldNumber = 21,
    kSetCursorPointResponseFieldNumber = 30,
    kGetStreamingViewsResponseFieldNumber = 31,
    kIsPointInsideStreamingViewsResponseFieldNumber = 32,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  void set_request_id(const std::string& value);
  void set_request_id(std::string&& value);
  void set_request_id(const char* value);
  void set_request_id(const char* value, size_t size);
  std::string* mutable_request_id();
  std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_request_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_request_id(
      std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // .dcv.extensions.Response.Status status = 2;
  void clear_status();
  ::dcv::extensions::Response_Status status() const;
  void set_status(::dcv::extensions::Response_Status value);
  private:
  ::dcv::extensions::Response_Status _internal_status() const;
  void _internal_set_status(::dcv::extensions::Response_Status value);
  public:

  // .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
  bool has_get_dcv_info_response() const;
  private:
  bool _internal_has_get_dcv_info_response() const;
  public:
  void clear_get_dcv_info_response();
  const ::dcv::extensions::GetDcvInfoResponse& get_dcv_info_response() const;
  ::dcv::extensions::GetDcvInfoResponse* release_get_dcv_info_response();
  ::dcv::extensions::GetDcvInfoResponse* mutable_get_dcv_info_response();
  void set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response);
  private:
  const ::dcv::extensions::GetDcvInfoResponse& _internal_get_dcv_info_response() const;
  ::dcv::extensions::GetDcvInfoResponse* _internal_mutable_get_dcv_info_response();
  public:
  void unsafe_arena_set_allocated_get_dcv_info_response(
      ::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response);
  ::dcv::extensions::GetDcvInfoResponse* unsafe_arena_release_get_dcv_info_response();

  // .dcv.extensions.GetManifestResponse get_manifest_response = 11;
  bool has_get_manifest_response() const;
  private:
  bool _internal_has_get_manifest_response() const;
  public:
  void clear_get_manifest_response();
  const ::dcv::extensions::GetManifestResponse& get_manifest_response() const;
  ::dcv::extensions::GetManifestResponse* release_get_manifest_response();
  ::dcv::extensions::GetManifestResponse* mutable_get_manifest_response();
  void set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* get_manifest_response);
  private:
  const ::dcv::extensions::GetManifestResponse& _internal_get_manifest_response() const;
  ::dcv::extensions::GetManifestResponse* _internal_mutable_get_manifest_response();
  public:
  void unsafe_arena_set_allocated_get_manifest_response(
      ::dcv::extensions::GetManifestResponse* get_manifest_response);
  ::dcv::extensions::GetManifestResponse* unsafe_arena_release_get_manifest_response();

  // .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
  bool has_setup_virtual_channel_response() const;
  private:
  bool _internal_has_setup_virtual_channel_response() const;
  public:
  void clear_setup_virtual_channel_response();
  const ::dcv::extensions::SetupVirtualChannelResponse& setup_virtual_channel_response() const;
  ::dcv::extensions::SetupVirtualChannelResponse* release_setup_virtual_channel_response();
  ::dcv::extensions::SetupVirtualChannelResponse* mutable_setup_virtual_channel_response();
  void set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response);
  private:
  const ::dcv::extensions::SetupVirtualChannelResponse& _internal_setup_virtual_channel_response() const;
  ::dcv::extensions::SetupVirtualChannelResponse* _internal_mutable_setup_virtual_channel_response();
  public:
  void unsafe_arena_set_allocated_setup_virtual_channel_response(
      ::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response);
  ::dcv::extensions::SetupVirtualChannelResponse* unsafe_arena_release_setup_virtual_channel_response();

  // .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
  bool has_close_virtual_channel_response() const;
  private:
  bool _internal_has_close_virtual_channel_response() const;
  public:
  void clear_close_virtual_channel_response();
  const ::dcv::extensions::CloseVirtualChannelResponse& close_virtual_channel_response() const;
  ::dcv::extensions::CloseVirtualChannelResponse* release_close_virtual_channel_response();
  ::dcv::extensions::CloseVirtualChannelResponse* mutable_close_virtual_channel_response();
  void set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response);
  private:
  const ::dcv::extensions::CloseVirtualChannelResponse& _internal_close_virtual_channel_response() const;
  ::dcv::extensions::CloseVirtualChannelResponse* _internal_mutable_close_virtual_channel_response();
  public:
  void unsafe_arena_set_allocated_close_virtual_channel_response(
      ::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response);
  ::dcv::extensions::CloseVirtualChannelResponse* unsafe_arena_release_close_virtual_channel_response();

  // .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
  bool has_set_cursor_point_response() const;
  private:
  bool _internal_has_set_cursor_point_response() const;
  public:
  void clear_set_cursor_point_response();
  const ::dcv::extensions::SetCursorPointResponse& set_cursor_point_response() const;
  ::dcv::extensions::SetCursorPointResponse* release_set_cursor_point_response();
  ::dcv::extensions::SetCursorPointResponse* mutable_set_cursor_point_response();
  void set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* set_cursor_point_response);
  private:
  const ::dcv::extensions::SetCursorPointResponse& _internal_set_cursor_point_response() const;
  ::dcv::extensions::SetCursorPointResponse* _internal_mutable_set_cursor_point_response();
  public:
  void unsafe_arena_set_allocated_set_cursor_point_response(
      ::dcv::extensions::SetCursorPointResponse* set_cursor_point_response);
  ::dcv::extensions::SetCursorPointResponse* unsafe_arena_release_set_cursor_point_response();

  // .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
  bool has_get_streaming_views_response() const;
  private:
  bool _internal_has_get_streaming_views_response() const;
  public:
  void clear_get_streaming_views_response();
  const ::dcv::extensions::GetStreamingViewsResponse& get_streaming_views_response() const;
  ::dcv::extensions::GetStreamingViewsResponse* release_get_streaming_views_response();
  ::dcv::extensions::GetStreamingViewsResponse* mutable_get_streaming_views_response();
  void set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response);
  private:
  const ::dcv::extensions::GetStreamingViewsResponse& _internal_get_streaming_views_response() const;
  ::dcv::extensions::GetStreamingViewsResponse* _internal_mutable_get_streaming_views_response();
  public:
  void unsafe_arena_set_allocated_get_streaming_views_response(
      ::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response);
  ::dcv::extensions::GetStreamingViewsResponse* unsafe_arena_release_get_streaming_views_response();

  // .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
  bool has_is_point_inside_streaming_views_response() const;
  private:
  bool _internal_has_is_point_inside_streaming_views_response() const;
  public:
  void clear_is_point_inside_streaming_views_response();
  const ::dcv::extensions::IsPointInsideStreamingViewsResponse& is_point_inside_streaming_views_response() const;
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* release_is_point_inside_streaming_views_response();
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* mutable_is_point_inside_streaming_views_response();
  void set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response);
  private:
  const ::dcv::extensions::IsPointInsideStreamingViewsResponse& _internal_is_point_inside_streaming_views_response() const;
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* _internal_mutable_is_point_inside_streaming_views_response();
  public:
  void unsafe_arena_set_allocated_is_point_inside_streaming_views_response(
      ::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response);
  ::dcv::extensions::IsPointInsideStreamingViewsResponse* unsafe_arena_release_is_point_inside_streaming_views_response();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Response)
 private:
  class _Internal;
  void set_has_get_dcv_info_response();
  void set_has_get_manifest_response();
  void set_has_setup_virtual_channel_response();
  void set_has_close_virtual_channel_response();
  void set_has_set_cursor_point_response();
  void set_has_get_streaming_views_response();
  void set_has_is_point_inside_streaming_views_response();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  int status_;
  union ResponseUnion {
    ResponseUnion() {}
    ::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response_;
    ::dcv::extensions::GetManifestResponse* get_manifest_response_;
    ::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response_;
    ::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response_;
    ::dcv::extensions::SetCursorPointResponse* set_cursor_point_response_;
    ::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response_;
    ::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response_;
  } response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class Event PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.Event) */ {
 public:
  inline Event() : Event(nullptr) {};
  virtual ~Event();

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Event& default_instance();

  enum EventCase {
    kVirtualChannelReadyEvent = 10,
    kVirtualChannelClosedEvent = 20,
    kStreamingViewsChangedEvent = 30,
    EVENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(nullptr);
  }

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualChannelReadyEventFieldNumber = 10,
    kVirtualChannelClosedEventFieldNumber = 20,
    kStreamingViewsChangedEventFieldNumber = 30,
  };
  // .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
  bool has_virtual_channel_ready_event() const;
  private:
  bool _internal_has_virtual_channel_ready_event() const;
  public:
  void clear_virtual_channel_ready_event();
  const ::dcv::extensions::VirtualChannelReadyEvent& virtual_channel_ready_event() const;
  ::dcv::extensions::VirtualChannelReadyEvent* release_virtual_channel_ready_event();
  ::dcv::extensions::VirtualChannelReadyEvent* mutable_virtual_channel_ready_event();
  void set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event);
  private:
  const ::dcv::extensions::VirtualChannelReadyEvent& _internal_virtual_channel_ready_event() const;
  ::dcv::extensions::VirtualChannelReadyEvent* _internal_mutable_virtual_channel_ready_event();
  public:
  void unsafe_arena_set_allocated_virtual_channel_ready_event(
      ::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event);
  ::dcv::extensions::VirtualChannelReadyEvent* unsafe_arena_release_virtual_channel_ready_event();

  // .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
  bool has_virtual_channel_closed_event() const;
  private:
  bool _internal_has_virtual_channel_closed_event() const;
  public:
  void clear_virtual_channel_closed_event();
  const ::dcv::extensions::VirtualChannelClosedEvent& virtual_channel_closed_event() const;
  ::dcv::extensions::VirtualChannelClosedEvent* release_virtual_channel_closed_event();
  ::dcv::extensions::VirtualChannelClosedEvent* mutable_virtual_channel_closed_event();
  void set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event);
  private:
  const ::dcv::extensions::VirtualChannelClosedEvent& _internal_virtual_channel_closed_event() const;
  ::dcv::extensions::VirtualChannelClosedEvent* _internal_mutable_virtual_channel_closed_event();
  public:
  void unsafe_arena_set_allocated_virtual_channel_closed_event(
      ::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event);
  ::dcv::extensions::VirtualChannelClosedEvent* unsafe_arena_release_virtual_channel_closed_event();

  // .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
  bool has_streaming_views_changed_event() const;
  private:
  bool _internal_has_streaming_views_changed_event() const;
  public:
  void clear_streaming_views_changed_event();
  const ::dcv::extensions::StreamingViewsChangedEvent& streaming_views_changed_event() const;
  ::dcv::extensions::StreamingViewsChangedEvent* release_streaming_views_changed_event();
  ::dcv::extensions::StreamingViewsChangedEvent* mutable_streaming_views_changed_event();
  void set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event);
  private:
  const ::dcv::extensions::StreamingViewsChangedEvent& _internal_streaming_views_changed_event() const;
  ::dcv::extensions::StreamingViewsChangedEvent* _internal_mutable_streaming_views_changed_event();
  public:
  void unsafe_arena_set_allocated_streaming_views_changed_event(
      ::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event);
  ::dcv::extensions::StreamingViewsChangedEvent* unsafe_arena_release_streaming_views_changed_event();

  void clear_event();
  EventCase event_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.Event)
 private:
  class _Internal;
  void set_has_virtual_channel_ready_event();
  void set_has_virtual_channel_closed_event();
  void set_has_streaming_views_changed_event();

  inline bool has_event() const;
  inline void clear_has_event();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EventUnion {
    EventUnion() {}
    ::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event_;
    ::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event_;
    ::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event_;
  } event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class ExtensionMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.ExtensionMessage) */ {
 public:
  inline ExtensionMessage() : ExtensionMessage(nullptr) {};
  virtual ~ExtensionMessage();

  ExtensionMessage(const ExtensionMessage& from);
  ExtensionMessage(ExtensionMessage&& from) noexcept
    : ExtensionMessage() {
    *this = ::std::move(from);
  }

  inline ExtensionMessage& operator=(const ExtensionMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtensionMessage& operator=(ExtensionMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExtensionMessage& default_instance();

  enum MsgCase {
    kRequest = 1,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExtensionMessage* internal_default_instance() {
    return reinterpret_cast<const ExtensionMessage*>(
               &_ExtensionMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ExtensionMessage& a, ExtensionMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtensionMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtensionMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExtensionMessage* New() const final {
    return CreateMaybeMessage<ExtensionMessage>(nullptr);
  }

  ExtensionMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExtensionMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExtensionMessage& from);
  void MergeFrom(const ExtensionMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtensionMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.ExtensionMessage";
  }
  protected:
  explicit ExtensionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // .dcv.extensions.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::dcv::extensions::Request& request() const;
  ::dcv::extensions::Request* release_request();
  ::dcv::extensions::Request* mutable_request();
  void set_allocated_request(::dcv::extensions::Request* request);
  private:
  const ::dcv::extensions::Request& _internal_request() const;
  ::dcv::extensions::Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::dcv::extensions::Request* request);
  ::dcv::extensions::Request* unsafe_arena_release_request();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.ExtensionMessage)
 private:
  class _Internal;
  void set_has_request();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    MsgUnion() {}
    ::dcv::extensions::Request* request_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_extensions_2eproto;
};
// -------------------------------------------------------------------

class DcvMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:dcv.extensions.DcvMessage) */ {
 public:
  inline DcvMessage() : DcvMessage(nullptr) {};
  virtual ~DcvMessage();

  DcvMessage(const DcvMessage& from);
  DcvMessage(DcvMessage&& from) noexcept
    : DcvMessage() {
    *this = ::std::move(from);
  }

  inline DcvMessage& operator=(const DcvMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DcvMessage& operator=(DcvMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DcvMessage& default_instance();

  enum MsgCase {
    kResponse = 2,
    kEvent = 3,
    MSG_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DcvMessage* internal_default_instance() {
    return reinterpret_cast<const DcvMessage*>(
               &_DcvMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DcvMessage& a, DcvMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DcvMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DcvMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DcvMessage* New() const final {
    return CreateMaybeMessage<DcvMessage>(nullptr);
  }

  DcvMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DcvMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DcvMessage& from);
  void MergeFrom(const DcvMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DcvMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "dcv.extensions.DcvMessage";
  }
  protected:
  explicit DcvMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_extensions_2eproto);
    return ::descriptor_table_extensions_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 2,
    kEventFieldNumber = 3,
  };
  // .dcv.extensions.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::dcv::extensions::Response& response() const;
  ::dcv::extensions::Response* release_response();
  ::dcv::extensions::Response* mutable_response();
  void set_allocated_response(::dcv::extensions::Response* response);
  private:
  const ::dcv::extensions::Response& _internal_response() const;
  ::dcv::extensions::Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::dcv::extensions::Response* response);
  ::dcv::extensions::Response* unsafe_arena_release_response();

  // .dcv.extensions.Event event = 3;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::dcv::extensions::Event& event() const;
  ::dcv::extensions::Event* release_event();
  ::dcv::extensions::Event* mutable_event();
  void set_allocated_event(::dcv::extensions::Event* event);
  private:
  const ::dcv::extensions::Event& _internal_event() const;
  ::dcv::extensions::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::dcv::extensions::Event* event);
  ::dcv::extensions::Event* unsafe_arena_release_event();

  void clear_msg();
  MsgCase msg_case() const;
  // @@protoc_insertion_point(class_scope:dcv.extensions.DcvMessage)
 private:
  class _Internal;
  void set_has_response();
  void set_has_event();

  inline bool has_msg() const;
  inline void clear_has_msg();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MsgUnion {
    MsgUnion() {}
    ::dcv::extensions::Response* response_;
    ::dcv::extensions::Event* event_;
  } msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_extensions_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SoftwareInfo_VersionNumber

// uint32 major = 1;
inline void SoftwareInfo_VersionNumber::clear_major() {
  major_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo_VersionNumber::_internal_major() const {
  return major_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo_VersionNumber::major() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.major)
  return _internal_major();
}
inline void SoftwareInfo_VersionNumber::_internal_set_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  major_ = value;
}
inline void SoftwareInfo_VersionNumber::set_major(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_major(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.major)
}

// uint32 minor = 2;
inline void SoftwareInfo_VersionNumber::clear_minor() {
  minor_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo_VersionNumber::_internal_minor() const {
  return minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo_VersionNumber::minor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.minor)
  return _internal_minor();
}
inline void SoftwareInfo_VersionNumber::_internal_set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  minor_ = value;
}
inline void SoftwareInfo_VersionNumber::set_minor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_minor(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.minor)
}

// uint32 revision = 3;
inline void SoftwareInfo_VersionNumber::clear_revision() {
  revision_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo_VersionNumber::_internal_revision() const {
  return revision_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SoftwareInfo_VersionNumber::revision() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.VersionNumber.revision)
  return _internal_revision();
}
inline void SoftwareInfo_VersionNumber::_internal_set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  revision_ = value;
}
inline void SoftwareInfo_VersionNumber::set_revision(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.VersionNumber.revision)
}

// -------------------------------------------------------------------

// SoftwareInfo

// string name = 1;
inline void SoftwareInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SoftwareInfo::name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.name)
  return _internal_name();
}
inline void SoftwareInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.name)
}
inline std::string* SoftwareInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.name)
  return _internal_mutable_name();
}
inline const std::string& SoftwareInfo::_internal_name() const {
  return name_.Get();
}
inline void SoftwareInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SoftwareInfo.name)
}
inline void SoftwareInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.name)
}
inline void SoftwareInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.name)
}
inline std::string* SoftwareInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareInfo::release_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.name)
}
inline std::string* SoftwareInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SoftwareInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SoftwareInfo.name)
}

// .dcv.extensions.SoftwareInfo.VersionNumber version = 2;
inline bool SoftwareInfo::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool SoftwareInfo::has_version() const {
  return _internal_has_version();
}
inline void SoftwareInfo::clear_version() {
  if (GetArena() == nullptr && version_ != nullptr) {
    delete version_;
  }
  version_ = nullptr;
}
inline const ::dcv::extensions::SoftwareInfo_VersionNumber& SoftwareInfo::_internal_version() const {
  const ::dcv::extensions::SoftwareInfo_VersionNumber* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::SoftwareInfo_VersionNumber*>(
      &::dcv::extensions::_SoftwareInfo_VersionNumber_default_instance_);
}
inline const ::dcv::extensions::SoftwareInfo_VersionNumber& SoftwareInfo::version() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.version)
  return _internal_version();
}
inline void SoftwareInfo::unsafe_arena_set_allocated_version(
    ::dcv::extensions::SoftwareInfo_VersionNumber* version) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SoftwareInfo.version)
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::release_version() {
  auto temp = unsafe_arena_release_version();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.version)
  
  ::dcv::extensions::SoftwareInfo_VersionNumber* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::SoftwareInfo_VersionNumber>(GetArena());
    version_ = p;
  }
  return version_;
}
inline ::dcv::extensions::SoftwareInfo_VersionNumber* SoftwareInfo::mutable_version() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.version)
  return _internal_mutable_version();
}
inline void SoftwareInfo::set_allocated_version(::dcv::extensions::SoftwareInfo_VersionNumber* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete version_;
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(version);
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.version)
}

// string os = 3;
inline void SoftwareInfo::clear_os() {
  os_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SoftwareInfo::os() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.os)
  return _internal_os();
}
inline void SoftwareInfo::set_os(const std::string& value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.os)
}
inline std::string* SoftwareInfo::mutable_os() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.os)
  return _internal_mutable_os();
}
inline const std::string& SoftwareInfo::_internal_os() const {
  return os_.Get();
}
inline void SoftwareInfo::_internal_set_os(const std::string& value) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareInfo::set_os(std::string&& value) {
  
  os_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SoftwareInfo.os)
}
inline void SoftwareInfo::set_os(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.os)
}
inline void SoftwareInfo::set_os(const char* value,
    size_t size) {
  
  os_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.os)
}
inline std::string* SoftwareInfo::_internal_mutable_os() {
  
  return os_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareInfo::release_os() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.os)
  return os_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_os(std::string* os) {
  if (os != nullptr) {
    
  } else {
    
  }
  os_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), os,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.os)
}
inline std::string* SoftwareInfo::unsafe_arena_release_os() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SoftwareInfo.os)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return os_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareInfo::unsafe_arena_set_allocated_os(
    std::string* os) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (os != nullptr) {
    
  } else {
    
  }
  os_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      os, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SoftwareInfo.os)
}

// string arch = 4;
inline void SoftwareInfo::clear_arch() {
  arch_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SoftwareInfo::arch() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.arch)
  return _internal_arch();
}
inline void SoftwareInfo::set_arch(const std::string& value) {
  _internal_set_arch(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.arch)
}
inline std::string* SoftwareInfo::mutable_arch() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.arch)
  return _internal_mutable_arch();
}
inline const std::string& SoftwareInfo::_internal_arch() const {
  return arch_.Get();
}
inline void SoftwareInfo::_internal_set_arch(const std::string& value) {
  
  arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareInfo::set_arch(std::string&& value) {
  
  arch_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SoftwareInfo.arch)
}
inline void SoftwareInfo::set_arch(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.arch)
}
inline void SoftwareInfo::set_arch(const char* value,
    size_t size) {
  
  arch_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.arch)
}
inline std::string* SoftwareInfo::_internal_mutable_arch() {
  
  return arch_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareInfo::release_arch() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.arch)
  return arch_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_arch(std::string* arch) {
  if (arch != nullptr) {
    
  } else {
    
  }
  arch_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arch,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.arch)
}
inline std::string* SoftwareInfo::unsafe_arena_release_arch() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SoftwareInfo.arch)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return arch_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareInfo::unsafe_arena_set_allocated_arch(
    std::string* arch) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (arch != nullptr) {
    
  } else {
    
  }
  arch_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      arch, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SoftwareInfo.arch)
}

// string hostname = 5;
inline void SoftwareInfo::clear_hostname() {
  hostname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SoftwareInfo::hostname() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SoftwareInfo.hostname)
  return _internal_hostname();
}
inline void SoftwareInfo::set_hostname(const std::string& value) {
  _internal_set_hostname(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SoftwareInfo.hostname)
}
inline std::string* SoftwareInfo::mutable_hostname() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SoftwareInfo.hostname)
  return _internal_mutable_hostname();
}
inline const std::string& SoftwareInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void SoftwareInfo::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SoftwareInfo::set_hostname(std::string&& value) {
  
  hostname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SoftwareInfo.hostname)
}
inline void SoftwareInfo::set_hostname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SoftwareInfo.hostname)
}
inline void SoftwareInfo::set_hostname(const char* value,
    size_t size) {
  
  hostname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SoftwareInfo.hostname)
}
inline std::string* SoftwareInfo::_internal_mutable_hostname() {
  
  return hostname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SoftwareInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SoftwareInfo.hostname)
  return hostname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SoftwareInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hostname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SoftwareInfo.hostname)
}
inline std::string* SoftwareInfo::unsafe_arena_release_hostname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SoftwareInfo.hostname)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return hostname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SoftwareInfo::unsafe_arena_set_allocated_hostname(
    std::string* hostname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      hostname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SoftwareInfo.hostname)
}

// -------------------------------------------------------------------

// Point

// int32 x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Point::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.x)
}

// int32 y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Point::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Point.y)
}

// -------------------------------------------------------------------

// Rect

// int32 x = 1;
inline void Rect::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.x)
  return _internal_x();
}
inline void Rect::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Rect::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.x)
}

// int32 y = 2;
inline void Rect::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.y)
  return _internal_y();
}
inline void Rect::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Rect::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.y)
}

// uint32 width = 3;
inline void Rect::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rect::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rect::width() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.width)
  return _internal_width();
}
inline void Rect::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Rect::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.width)
}

// uint32 height = 4;
inline void Rect::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rect::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rect::height() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Rect.height)
  return _internal_height();
}
inline void Rect::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Rect::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Rect.height)
}

// -------------------------------------------------------------------

// StreamingViews_StreamingView

// int32 view_id = 1;
inline void StreamingViews_StreamingView::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamingViews_StreamingView::_internal_view_id() const {
  return view_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StreamingViews_StreamingView::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.view_id)
  return _internal_view_id();
}
inline void StreamingViews_StreamingView::_internal_set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
}
inline void StreamingViews_StreamingView::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.view_id)
}

// .dcv.extensions.Rect local_area = 2;
inline bool StreamingViews_StreamingView::_internal_has_local_area() const {
  return this != internal_default_instance() && local_area_ != nullptr;
}
inline bool StreamingViews_StreamingView::has_local_area() const {
  return _internal_has_local_area();
}
inline void StreamingViews_StreamingView::clear_local_area() {
  if (GetArena() == nullptr && local_area_ != nullptr) {
    delete local_area_;
  }
  local_area_ = nullptr;
}
inline const ::dcv::extensions::Rect& StreamingViews_StreamingView::_internal_local_area() const {
  const ::dcv::extensions::Rect* p = local_area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::Rect*>(
      &::dcv::extensions::_Rect_default_instance_);
}
inline const ::dcv::extensions::Rect& StreamingViews_StreamingView::local_area() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.local_area)
  return _internal_local_area();
}
inline void StreamingViews_StreamingView::unsafe_arena_set_allocated_local_area(
    ::dcv::extensions::Rect* local_area) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(local_area_);
  }
  local_area_ = local_area;
  if (local_area) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.StreamingViews.StreamingView.local_area)
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::release_local_area() {
  auto temp = unsafe_arena_release_local_area();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::unsafe_arena_release_local_area() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.local_area)
  
  ::dcv::extensions::Rect* temp = local_area_;
  local_area_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::_internal_mutable_local_area() {
  
  if (local_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Rect>(GetArena());
    local_area_ = p;
  }
  return local_area_;
}
inline ::dcv::extensions::Rect* StreamingViews_StreamingView::mutable_local_area() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.local_area)
  return _internal_mutable_local_area();
}
inline void StreamingViews_StreamingView::set_allocated_local_area(::dcv::extensions::Rect* local_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete local_area_;
  }
  if (local_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(local_area);
    if (message_arena != submessage_arena) {
      local_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_area, submessage_arena);
    }
    
  } else {
    
  }
  local_area_ = local_area;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.local_area)
}

// double zoom_factor = 3;
inline void StreamingViews_StreamingView::clear_zoom_factor() {
  zoom_factor_ = 0;
}
inline double StreamingViews_StreamingView::_internal_zoom_factor() const {
  return zoom_factor_;
}
inline double StreamingViews_StreamingView::zoom_factor() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
  return _internal_zoom_factor();
}
inline void StreamingViews_StreamingView::_internal_set_zoom_factor(double value) {
  
  zoom_factor_ = value;
}
inline void StreamingViews_StreamingView::set_zoom_factor(double value) {
  _internal_set_zoom_factor(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.StreamingViews.StreamingView.zoom_factor)
}

// .dcv.extensions.Point remote_offset = 4;
inline bool StreamingViews_StreamingView::_internal_has_remote_offset() const {
  return this != internal_default_instance() && remote_offset_ != nullptr;
}
inline bool StreamingViews_StreamingView::has_remote_offset() const {
  return _internal_has_remote_offset();
}
inline void StreamingViews_StreamingView::clear_remote_offset() {
  if (GetArena() == nullptr && remote_offset_ != nullptr) {
    delete remote_offset_;
  }
  remote_offset_ = nullptr;
}
inline const ::dcv::extensions::Point& StreamingViews_StreamingView::_internal_remote_offset() const {
  const ::dcv::extensions::Point* p = remote_offset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::Point*>(
      &::dcv::extensions::_Point_default_instance_);
}
inline const ::dcv::extensions::Point& StreamingViews_StreamingView::remote_offset() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return _internal_remote_offset();
}
inline void StreamingViews_StreamingView::unsafe_arena_set_allocated_remote_offset(
    ::dcv::extensions::Point* remote_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_offset_);
  }
  remote_offset_ = remote_offset;
  if (remote_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.StreamingViews.StreamingView.remote_offset)
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::release_remote_offset() {
  auto temp = unsafe_arena_release_remote_offset();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::unsafe_arena_release_remote_offset() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  
  ::dcv::extensions::Point* temp = remote_offset_;
  remote_offset_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::_internal_mutable_remote_offset() {
  
  if (remote_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Point>(GetArena());
    remote_offset_ = p;
  }
  return remote_offset_;
}
inline ::dcv::extensions::Point* StreamingViews_StreamingView::mutable_remote_offset() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.StreamingView.remote_offset)
  return _internal_mutable_remote_offset();
}
inline void StreamingViews_StreamingView::set_allocated_remote_offset(::dcv::extensions::Point* remote_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete remote_offset_;
  }
  if (remote_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(remote_offset);
    if (message_arena != submessage_arena) {
      remote_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_offset, submessage_arena);
    }
    
  } else {
    
  }
  remote_offset_ = remote_offset;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViews.StreamingView.remote_offset)
}

// -------------------------------------------------------------------

// StreamingViews

// repeated .dcv.extensions.StreamingViews.StreamingView streaming_view = 1;
inline int StreamingViews::_internal_streaming_view_size() const {
  return streaming_view_.size();
}
inline int StreamingViews::streaming_view_size() const {
  return _internal_streaming_view_size();
}
inline void StreamingViews::clear_streaming_view() {
  streaming_view_.Clear();
}
inline ::dcv::extensions::StreamingViews_StreamingView* StreamingViews::mutable_streaming_view(int index) {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >*
StreamingViews::mutable_streaming_view() {
  // @@protoc_insertion_point(field_mutable_list:dcv.extensions.StreamingViews.streaming_view)
  return &streaming_view_;
}
inline const ::dcv::extensions::StreamingViews_StreamingView& StreamingViews::_internal_streaming_view(int index) const {
  return streaming_view_.Get(index);
}
inline const ::dcv::extensions::StreamingViews_StreamingView& StreamingViews::streaming_view(int index) const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViews.streaming_view)
  return _internal_streaming_view(index);
}
inline ::dcv::extensions::StreamingViews_StreamingView* StreamingViews::_internal_add_streaming_view() {
  return streaming_view_.Add();
}
inline ::dcv::extensions::StreamingViews_StreamingView* StreamingViews::add_streaming_view() {
  // @@protoc_insertion_point(field_add:dcv.extensions.StreamingViews.streaming_view)
  return _internal_add_streaming_view();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::dcv::extensions::StreamingViews_StreamingView >&
StreamingViews::streaming_view() const {
  // @@protoc_insertion_point(field_list:dcv.extensions.StreamingViews.streaming_view)
  return streaming_view_;
}

// -------------------------------------------------------------------

// GetDcvInfoRequest

// -------------------------------------------------------------------

// GetManifestRequest

// -------------------------------------------------------------------

// SetupVirtualChannelRequest

// string virtual_channel_name = 1;
inline void SetupVirtualChannelRequest::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetupVirtualChannelRequest::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return _internal_virtual_channel_name();
}
inline void SetupVirtualChannelRequest::set_virtual_channel_name(const std::string& value) {
  _internal_set_virtual_channel_name(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline std::string* SetupVirtualChannelRequest::mutable_virtual_channel_name() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return _internal_mutable_virtual_channel_name();
}
inline const std::string& SetupVirtualChannelRequest::_internal_virtual_channel_name() const {
  return virtual_channel_name_.Get();
}
inline void SetupVirtualChannelRequest::_internal_set_virtual_channel_name(const std::string& value) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetupVirtualChannelRequest::set_virtual_channel_name(std::string&& value) {
  
  virtual_channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline void SetupVirtualChannelRequest::set_virtual_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline void SetupVirtualChannelRequest::set_virtual_channel_name(const char* value,
    size_t size) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline std::string* SetupVirtualChannelRequest::_internal_mutable_virtual_channel_name() {
  
  return virtual_channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetupVirtualChannelRequest::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetupVirtualChannelRequest::set_allocated_virtual_channel_name(std::string* virtual_channel_name) {
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}
inline std::string* SetupVirtualChannelRequest::unsafe_arena_release_virtual_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtual_channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetupVirtualChannelRequest::unsafe_arena_set_allocated_virtual_channel_name(
    std::string* virtual_channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtual_channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SetupVirtualChannelRequest.virtual_channel_name)
}

// int64 relay_client_process_id = 2;
inline void SetupVirtualChannelRequest::clear_relay_client_process_id() {
  relay_client_process_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetupVirtualChannelRequest::_internal_relay_client_process_id() const {
  return relay_client_process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetupVirtualChannelRequest::relay_client_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
  return _internal_relay_client_process_id();
}
inline void SetupVirtualChannelRequest::_internal_set_relay_client_process_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  relay_client_process_id_ = value;
}
inline void SetupVirtualChannelRequest::set_relay_client_process_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_relay_client_process_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelRequest.relay_client_process_id)
}

// -------------------------------------------------------------------

// CloseVirtualChannelRequest

// string virtual_channel_name = 1;
inline void CloseVirtualChannelRequest::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloseVirtualChannelRequest::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return _internal_virtual_channel_name();
}
inline void CloseVirtualChannelRequest::set_virtual_channel_name(const std::string& value) {
  _internal_set_virtual_channel_name(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline std::string* CloseVirtualChannelRequest::mutable_virtual_channel_name() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return _internal_mutable_virtual_channel_name();
}
inline const std::string& CloseVirtualChannelRequest::_internal_virtual_channel_name() const {
  return virtual_channel_name_.Get();
}
inline void CloseVirtualChannelRequest::_internal_set_virtual_channel_name(const std::string& value) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloseVirtualChannelRequest::set_virtual_channel_name(std::string&& value) {
  
  virtual_channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline void CloseVirtualChannelRequest::set_virtual_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline void CloseVirtualChannelRequest::set_virtual_channel_name(const char* value,
    size_t size) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline std::string* CloseVirtualChannelRequest::_internal_mutable_virtual_channel_name() {
  
  return virtual_channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloseVirtualChannelRequest::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  return virtual_channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloseVirtualChannelRequest::set_allocated_virtual_channel_name(std::string* virtual_channel_name) {
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}
inline std::string* CloseVirtualChannelRequest::unsafe_arena_release_virtual_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtual_channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CloseVirtualChannelRequest::unsafe_arena_set_allocated_virtual_channel_name(
    std::string* virtual_channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtual_channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.CloseVirtualChannelRequest.virtual_channel_name)
}

// -------------------------------------------------------------------

// SetCursorPointRequest

// .dcv.extensions.Point point = 1;
inline bool SetCursorPointRequest::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool SetCursorPointRequest::has_point() const {
  return _internal_has_point();
}
inline void SetCursorPointRequest::clear_point() {
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::dcv::extensions::Point& SetCursorPointRequest::_internal_point() const {
  const ::dcv::extensions::Point* p = point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::Point*>(
      &::dcv::extensions::_Point_default_instance_);
}
inline const ::dcv::extensions::Point& SetCursorPointRequest::point() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetCursorPointRequest.point)
  return _internal_point();
}
inline void SetCursorPointRequest::unsafe_arena_set_allocated_point(
    ::dcv::extensions::Point* point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SetCursorPointRequest.point)
}
inline ::dcv::extensions::Point* SetCursorPointRequest::release_point() {
  auto temp = unsafe_arena_release_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetCursorPointRequest.point)
  
  ::dcv::extensions::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Point>(GetArena());
    point_ = p;
  }
  return point_;
}
inline ::dcv::extensions::Point* SetCursorPointRequest::mutable_point() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetCursorPointRequest.point)
  return _internal_mutable_point();
}
inline void SetCursorPointRequest::set_allocated_point(::dcv::extensions::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetCursorPointRequest.point)
}

// -------------------------------------------------------------------

// GetStreamingViewsRequest

// -------------------------------------------------------------------

// IsPointInsideStreamingViewsRequest

// .dcv.extensions.Point point = 1;
inline bool IsPointInsideStreamingViewsRequest::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool IsPointInsideStreamingViewsRequest::has_point() const {
  return _internal_has_point();
}
inline void IsPointInsideStreamingViewsRequest::clear_point() {
  if (GetArena() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::dcv::extensions::Point& IsPointInsideStreamingViewsRequest::_internal_point() const {
  const ::dcv::extensions::Point* p = point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::Point*>(
      &::dcv::extensions::_Point_default_instance_);
}
inline const ::dcv::extensions::Point& IsPointInsideStreamingViewsRequest::point() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return _internal_point();
}
inline void IsPointInsideStreamingViewsRequest::unsafe_arena_set_allocated_point(
    ::dcv::extensions::Point* point) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_);
  }
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::release_point() {
  auto temp = unsafe_arena_release_point();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::unsafe_arena_release_point() {
  // @@protoc_insertion_point(field_release:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  
  ::dcv::extensions::Point* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::Point>(GetArena());
    point_ = p;
  }
  return point_;
}
inline ::dcv::extensions::Point* IsPointInsideStreamingViewsRequest::mutable_point() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
  return _internal_mutable_point();
}
inline void IsPointInsideStreamingViewsRequest::set_allocated_point(::dcv::extensions::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(point);
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.IsPointInsideStreamingViewsRequest.point)
}

// -------------------------------------------------------------------

// GetDcvInfoResponse

// .dcv.extensions.GetDcvInfoResponse.DcvRole dcv_role = 1;
inline void GetDcvInfoResponse::clear_dcv_role() {
  dcv_role_ = 0;
}
inline ::dcv::extensions::GetDcvInfoResponse_DcvRole GetDcvInfoResponse::_internal_dcv_role() const {
  return static_cast< ::dcv::extensions::GetDcvInfoResponse_DcvRole >(dcv_role_);
}
inline ::dcv::extensions::GetDcvInfoResponse_DcvRole GetDcvInfoResponse::dcv_role() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_role)
  return _internal_dcv_role();
}
inline void GetDcvInfoResponse::_internal_set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value) {
  
  dcv_role_ = value;
}
inline void GetDcvInfoResponse::set_dcv_role(::dcv::extensions::GetDcvInfoResponse_DcvRole value) {
  _internal_set_dcv_role(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_role)
}

// int64 dcv_process_id = 2;
inline void GetDcvInfoResponse::clear_dcv_process_id() {
  dcv_process_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDcvInfoResponse::_internal_dcv_process_id() const {
  return dcv_process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GetDcvInfoResponse::dcv_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
  return _internal_dcv_process_id();
}
inline void GetDcvInfoResponse::_internal_set_dcv_process_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  dcv_process_id_ = value;
}
inline void GetDcvInfoResponse::set_dcv_process_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_dcv_process_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.GetDcvInfoResponse.dcv_process_id)
}

// .dcv.extensions.SoftwareInfo server_info = 3;
inline bool GetDcvInfoResponse::_internal_has_server_info() const {
  return this != internal_default_instance() && server_info_ != nullptr;
}
inline bool GetDcvInfoResponse::has_server_info() const {
  return _internal_has_server_info();
}
inline void GetDcvInfoResponse::clear_server_info() {
  if (GetArena() == nullptr && server_info_ != nullptr) {
    delete server_info_;
  }
  server_info_ = nullptr;
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::_internal_server_info() const {
  const ::dcv::extensions::SoftwareInfo* p = server_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::SoftwareInfo*>(
      &::dcv::extensions::_SoftwareInfo_default_instance_);
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::server_info() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.server_info)
  return _internal_server_info();
}
inline void GetDcvInfoResponse::unsafe_arena_set_allocated_server_info(
    ::dcv::extensions::SoftwareInfo* server_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_info_);
  }
  server_info_ = server_info;
  if (server_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.GetDcvInfoResponse.server_info)
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_server_info() {
  auto temp = unsafe_arena_release_server_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::unsafe_arena_release_server_info() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.server_info)
  
  ::dcv::extensions::SoftwareInfo* temp = server_info_;
  server_info_ = nullptr;
  return temp;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::_internal_mutable_server_info() {
  
  if (server_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::SoftwareInfo>(GetArena());
    server_info_ = p;
  }
  return server_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_server_info() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.server_info)
  return _internal_mutable_server_info();
}
inline void GetDcvInfoResponse::set_allocated_server_info(::dcv::extensions::SoftwareInfo* server_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete server_info_;
  }
  if (server_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(server_info);
    if (message_arena != submessage_arena) {
      server_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_info, submessage_arena);
    }
    
  } else {
    
  }
  server_info_ = server_info;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.server_info)
}

// .dcv.extensions.SoftwareInfo client_info = 4;
inline bool GetDcvInfoResponse::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool GetDcvInfoResponse::has_client_info() const {
  return _internal_has_client_info();
}
inline void GetDcvInfoResponse::clear_client_info() {
  if (GetArena() == nullptr && client_info_ != nullptr) {
    delete client_info_;
  }
  client_info_ = nullptr;
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::_internal_client_info() const {
  const ::dcv::extensions::SoftwareInfo* p = client_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::SoftwareInfo*>(
      &::dcv::extensions::_SoftwareInfo_default_instance_);
}
inline const ::dcv::extensions::SoftwareInfo& GetDcvInfoResponse::client_info() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetDcvInfoResponse.client_info)
  return _internal_client_info();
}
inline void GetDcvInfoResponse::unsafe_arena_set_allocated_client_info(
    ::dcv::extensions::SoftwareInfo* client_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.GetDcvInfoResponse.client_info)
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::release_client_info() {
  auto temp = unsafe_arena_release_client_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetDcvInfoResponse.client_info)
  
  ::dcv::extensions::SoftwareInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::SoftwareInfo>(GetArena());
    client_info_ = p;
  }
  return client_info_;
}
inline ::dcv::extensions::SoftwareInfo* GetDcvInfoResponse::mutable_client_info() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetDcvInfoResponse.client_info)
  return _internal_mutable_client_info();
}
inline void GetDcvInfoResponse::set_allocated_client_info(::dcv::extensions::SoftwareInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete client_info_;
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(client_info);
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetDcvInfoResponse.client_info)
}

// -------------------------------------------------------------------

// GetManifestResponse

// string manifest_path = 1;
inline void GetManifestResponse::clear_manifest_path() {
  manifest_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetManifestResponse::manifest_path() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetManifestResponse.manifest_path)
  return _internal_manifest_path();
}
inline void GetManifestResponse::set_manifest_path(const std::string& value) {
  _internal_set_manifest_path(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.GetManifestResponse.manifest_path)
}
inline std::string* GetManifestResponse::mutable_manifest_path() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetManifestResponse.manifest_path)
  return _internal_mutable_manifest_path();
}
inline const std::string& GetManifestResponse::_internal_manifest_path() const {
  return manifest_path_.Get();
}
inline void GetManifestResponse::_internal_set_manifest_path(const std::string& value) {
  
  manifest_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetManifestResponse::set_manifest_path(std::string&& value) {
  
  manifest_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.GetManifestResponse.manifest_path)
}
inline void GetManifestResponse::set_manifest_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  manifest_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.GetManifestResponse.manifest_path)
}
inline void GetManifestResponse::set_manifest_path(const char* value,
    size_t size) {
  
  manifest_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.GetManifestResponse.manifest_path)
}
inline std::string* GetManifestResponse::_internal_mutable_manifest_path() {
  
  return manifest_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetManifestResponse::release_manifest_path() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetManifestResponse.manifest_path)
  return manifest_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetManifestResponse::set_allocated_manifest_path(std::string* manifest_path) {
  if (manifest_path != nullptr) {
    
  } else {
    
  }
  manifest_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manifest_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetManifestResponse.manifest_path)
}
inline std::string* GetManifestResponse::unsafe_arena_release_manifest_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.GetManifestResponse.manifest_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return manifest_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetManifestResponse::unsafe_arena_set_allocated_manifest_path(
    std::string* manifest_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (manifest_path != nullptr) {
    
  } else {
    
  }
  manifest_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      manifest_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.GetManifestResponse.manifest_path)
}

// -------------------------------------------------------------------

// SetupVirtualChannelResponse

// string virtual_channel_name = 1;
inline void SetupVirtualChannelResponse::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetupVirtualChannelResponse::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return _internal_virtual_channel_name();
}
inline void SetupVirtualChannelResponse::set_virtual_channel_name(const std::string& value) {
  _internal_set_virtual_channel_name(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline std::string* SetupVirtualChannelResponse::mutable_virtual_channel_name() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return _internal_mutable_virtual_channel_name();
}
inline const std::string& SetupVirtualChannelResponse::_internal_virtual_channel_name() const {
  return virtual_channel_name_.Get();
}
inline void SetupVirtualChannelResponse::_internal_set_virtual_channel_name(const std::string& value) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetupVirtualChannelResponse::set_virtual_channel_name(std::string&& value) {
  
  virtual_channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_name(const char* value,
    size_t size) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline std::string* SetupVirtualChannelResponse::_internal_mutable_virtual_channel_name() {
  
  return virtual_channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetupVirtualChannelResponse::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetupVirtualChannelResponse::set_allocated_virtual_channel_name(std::string* virtual_channel_name) {
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}
inline std::string* SetupVirtualChannelResponse::unsafe_arena_release_virtual_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtual_channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetupVirtualChannelResponse::unsafe_arena_set_allocated_virtual_channel_name(
    std::string* virtual_channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtual_channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_name)
}

// string relay_path = 2;
inline void SetupVirtualChannelResponse::clear_relay_path() {
  relay_path_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetupVirtualChannelResponse::relay_path() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return _internal_relay_path();
}
inline void SetupVirtualChannelResponse::set_relay_path(const std::string& value) {
  _internal_set_relay_path(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline std::string* SetupVirtualChannelResponse::mutable_relay_path() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return _internal_mutable_relay_path();
}
inline const std::string& SetupVirtualChannelResponse::_internal_relay_path() const {
  return relay_path_.Get();
}
inline void SetupVirtualChannelResponse::_internal_set_relay_path(const std::string& value) {
  
  relay_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetupVirtualChannelResponse::set_relay_path(std::string&& value) {
  
  relay_path_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline void SetupVirtualChannelResponse::set_relay_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  relay_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline void SetupVirtualChannelResponse::set_relay_path(const char* value,
    size_t size) {
  
  relay_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline std::string* SetupVirtualChannelResponse::_internal_mutable_relay_path() {
  
  return relay_path_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetupVirtualChannelResponse::release_relay_path() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  return relay_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetupVirtualChannelResponse::set_allocated_relay_path(std::string* relay_path) {
  if (relay_path != nullptr) {
    
  } else {
    
  }
  relay_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relay_path,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}
inline std::string* SetupVirtualChannelResponse::unsafe_arena_release_relay_path() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SetupVirtualChannelResponse.relay_path)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return relay_path_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetupVirtualChannelResponse::unsafe_arena_set_allocated_relay_path(
    std::string* relay_path) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (relay_path != nullptr) {
    
  } else {
    
  }
  relay_path_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      relay_path, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SetupVirtualChannelResponse.relay_path)
}

// int64 relay_server_process_id = 3;
inline void SetupVirtualChannelResponse::clear_relay_server_process_id() {
  relay_server_process_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetupVirtualChannelResponse::_internal_relay_server_process_id() const {
  return relay_server_process_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SetupVirtualChannelResponse::relay_server_process_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
  return _internal_relay_server_process_id();
}
inline void SetupVirtualChannelResponse::_internal_set_relay_server_process_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  relay_server_process_id_ = value;
}
inline void SetupVirtualChannelResponse::set_relay_server_process_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_relay_server_process_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.relay_server_process_id)
}

// bytes virtual_channel_auth_token = 4;
inline void SetupVirtualChannelResponse::clear_virtual_channel_auth_token() {
  virtual_channel_auth_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SetupVirtualChannelResponse::virtual_channel_auth_token() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return _internal_virtual_channel_auth_token();
}
inline void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const std::string& value) {
  _internal_set_virtual_channel_auth_token(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline std::string* SetupVirtualChannelResponse::mutable_virtual_channel_auth_token() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return _internal_mutable_virtual_channel_auth_token();
}
inline const std::string& SetupVirtualChannelResponse::_internal_virtual_channel_auth_token() const {
  return virtual_channel_auth_token_.Get();
}
inline void SetupVirtualChannelResponse::_internal_set_virtual_channel_auth_token(const std::string& value) {
  
  virtual_channel_auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SetupVirtualChannelResponse::set_virtual_channel_auth_token(std::string&& value) {
  
  virtual_channel_auth_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtual_channel_auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline void SetupVirtualChannelResponse::set_virtual_channel_auth_token(const void* value,
    size_t size) {
  
  virtual_channel_auth_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline std::string* SetupVirtualChannelResponse::_internal_mutable_virtual_channel_auth_token() {
  
  return virtual_channel_auth_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SetupVirtualChannelResponse::release_virtual_channel_auth_token() {
  // @@protoc_insertion_point(field_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  return virtual_channel_auth_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SetupVirtualChannelResponse::set_allocated_virtual_channel_auth_token(std::string* virtual_channel_auth_token) {
  if (virtual_channel_auth_token != nullptr) {
    
  } else {
    
  }
  virtual_channel_auth_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_channel_auth_token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}
inline std::string* SetupVirtualChannelResponse::unsafe_arena_release_virtual_channel_auth_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtual_channel_auth_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SetupVirtualChannelResponse::unsafe_arena_set_allocated_virtual_channel_auth_token(
    std::string* virtual_channel_auth_token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtual_channel_auth_token != nullptr) {
    
  } else {
    
  }
  virtual_channel_auth_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtual_channel_auth_token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.SetupVirtualChannelResponse.virtual_channel_auth_token)
}

// -------------------------------------------------------------------

// CloseVirtualChannelResponse

// string virtual_channel_name = 1;
inline void CloseVirtualChannelResponse::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& CloseVirtualChannelResponse::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return _internal_virtual_channel_name();
}
inline void CloseVirtualChannelResponse::set_virtual_channel_name(const std::string& value) {
  _internal_set_virtual_channel_name(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline std::string* CloseVirtualChannelResponse::mutable_virtual_channel_name() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return _internal_mutable_virtual_channel_name();
}
inline const std::string& CloseVirtualChannelResponse::_internal_virtual_channel_name() const {
  return virtual_channel_name_.Get();
}
inline void CloseVirtualChannelResponse::_internal_set_virtual_channel_name(const std::string& value) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void CloseVirtualChannelResponse::set_virtual_channel_name(std::string&& value) {
  
  virtual_channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline void CloseVirtualChannelResponse::set_virtual_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline void CloseVirtualChannelResponse::set_virtual_channel_name(const char* value,
    size_t size) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline std::string* CloseVirtualChannelResponse::_internal_mutable_virtual_channel_name() {
  
  return virtual_channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* CloseVirtualChannelResponse::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  return virtual_channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CloseVirtualChannelResponse::set_allocated_virtual_channel_name(std::string* virtual_channel_name) {
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}
inline std::string* CloseVirtualChannelResponse::unsafe_arena_release_virtual_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtual_channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void CloseVirtualChannelResponse::unsafe_arena_set_allocated_virtual_channel_name(
    std::string* virtual_channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtual_channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.CloseVirtualChannelResponse.virtual_channel_name)
}

// -------------------------------------------------------------------

// SetCursorPointResponse

// -------------------------------------------------------------------

// GetStreamingViewsResponse

// .dcv.extensions.StreamingViews streaming_views = 1;
inline bool GetStreamingViewsResponse::_internal_has_streaming_views() const {
  return this != internal_default_instance() && streaming_views_ != nullptr;
}
inline bool GetStreamingViewsResponse::has_streaming_views() const {
  return _internal_has_streaming_views();
}
inline void GetStreamingViewsResponse::clear_streaming_views() {
  if (GetArena() == nullptr && streaming_views_ != nullptr) {
    delete streaming_views_;
  }
  streaming_views_ = nullptr;
}
inline const ::dcv::extensions::StreamingViews& GetStreamingViewsResponse::_internal_streaming_views() const {
  const ::dcv::extensions::StreamingViews* p = streaming_views_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::StreamingViews*>(
      &::dcv::extensions::_StreamingViews_default_instance_);
}
inline const ::dcv::extensions::StreamingViews& GetStreamingViewsResponse::streaming_views() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return _internal_streaming_views();
}
inline void GetStreamingViewsResponse::unsafe_arena_set_allocated_streaming_views(
    ::dcv::extensions::StreamingViews* streaming_views) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_views_);
  }
  streaming_views_ = streaming_views;
  if (streaming_views) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.GetStreamingViewsResponse.streaming_views)
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::release_streaming_views() {
  auto temp = unsafe_arena_release_streaming_views();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::unsafe_arena_release_streaming_views() {
  // @@protoc_insertion_point(field_release:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  
  ::dcv::extensions::StreamingViews* temp = streaming_views_;
  streaming_views_ = nullptr;
  return temp;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::_internal_mutable_streaming_views() {
  
  if (streaming_views_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::StreamingViews>(GetArena());
    streaming_views_ = p;
  }
  return streaming_views_;
}
inline ::dcv::extensions::StreamingViews* GetStreamingViewsResponse::mutable_streaming_views() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.GetStreamingViewsResponse.streaming_views)
  return _internal_mutable_streaming_views();
}
inline void GetStreamingViewsResponse::set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete streaming_views_;
  }
  if (streaming_views) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(streaming_views);
    if (message_arena != submessage_arena) {
      streaming_views = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_views, submessage_arena);
    }
    
  } else {
    
  }
  streaming_views_ = streaming_views;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.GetStreamingViewsResponse.streaming_views)
}

// -------------------------------------------------------------------

// IsPointInsideStreamingViewsResponse

// int32 view_id = 1;
inline void IsPointInsideStreamingViewsResponse::clear_view_id() {
  view_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsPointInsideStreamingViewsResponse::_internal_view_id() const {
  return view_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IsPointInsideStreamingViewsResponse::view_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
  return _internal_view_id();
}
inline void IsPointInsideStreamingViewsResponse::_internal_set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  view_id_ = value;
}
inline void IsPointInsideStreamingViewsResponse::set_view_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_view_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.IsPointInsideStreamingViewsResponse.view_id)
}

// -------------------------------------------------------------------

// VirtualChannelReadyEvent

// string virtual_channel_name = 1;
inline void VirtualChannelReadyEvent::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VirtualChannelReadyEvent::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return _internal_virtual_channel_name();
}
inline void VirtualChannelReadyEvent::set_virtual_channel_name(const std::string& value) {
  _internal_set_virtual_channel_name(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline std::string* VirtualChannelReadyEvent::mutable_virtual_channel_name() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return _internal_mutable_virtual_channel_name();
}
inline const std::string& VirtualChannelReadyEvent::_internal_virtual_channel_name() const {
  return virtual_channel_name_.Get();
}
inline void VirtualChannelReadyEvent::_internal_set_virtual_channel_name(const std::string& value) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VirtualChannelReadyEvent::set_virtual_channel_name(std::string&& value) {
  
  virtual_channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline void VirtualChannelReadyEvent::set_virtual_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline void VirtualChannelReadyEvent::set_virtual_channel_name(const char* value,
    size_t size) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline std::string* VirtualChannelReadyEvent::_internal_mutable_virtual_channel_name() {
  
  return virtual_channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VirtualChannelReadyEvent::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  return virtual_channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VirtualChannelReadyEvent::set_allocated_virtual_channel_name(std::string* virtual_channel_name) {
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}
inline std::string* VirtualChannelReadyEvent::unsafe_arena_release_virtual_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtual_channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VirtualChannelReadyEvent::unsafe_arena_set_allocated_virtual_channel_name(
    std::string* virtual_channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtual_channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.VirtualChannelReadyEvent.virtual_channel_name)
}

// -------------------------------------------------------------------

// VirtualChannelClosedEvent

// string virtual_channel_name = 1;
inline void VirtualChannelClosedEvent::clear_virtual_channel_name() {
  virtual_channel_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& VirtualChannelClosedEvent::virtual_channel_name() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return _internal_virtual_channel_name();
}
inline void VirtualChannelClosedEvent::set_virtual_channel_name(const std::string& value) {
  _internal_set_virtual_channel_name(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline std::string* VirtualChannelClosedEvent::mutable_virtual_channel_name() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return _internal_mutable_virtual_channel_name();
}
inline const std::string& VirtualChannelClosedEvent::_internal_virtual_channel_name() const {
  return virtual_channel_name_.Get();
}
inline void VirtualChannelClosedEvent::_internal_set_virtual_channel_name(const std::string& value) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VirtualChannelClosedEvent::set_virtual_channel_name(std::string&& value) {
  
  virtual_channel_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline void VirtualChannelClosedEvent::set_virtual_channel_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline void VirtualChannelClosedEvent::set_virtual_channel_name(const char* value,
    size_t size) {
  
  virtual_channel_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline std::string* VirtualChannelClosedEvent::_internal_mutable_virtual_channel_name() {
  
  return virtual_channel_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VirtualChannelClosedEvent::release_virtual_channel_name() {
  // @@protoc_insertion_point(field_release:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  return virtual_channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VirtualChannelClosedEvent::set_allocated_virtual_channel_name(std::string* virtual_channel_name) {
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), virtual_channel_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}
inline std::string* VirtualChannelClosedEvent::unsafe_arena_release_virtual_channel_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return virtual_channel_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VirtualChannelClosedEvent::unsafe_arena_set_allocated_virtual_channel_name(
    std::string* virtual_channel_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (virtual_channel_name != nullptr) {
    
  } else {
    
  }
  virtual_channel_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      virtual_channel_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.VirtualChannelClosedEvent.virtual_channel_name)
}

// -------------------------------------------------------------------

// StreamingViewsChangedEvent

// .dcv.extensions.StreamingViews streaming_views = 1;
inline bool StreamingViewsChangedEvent::_internal_has_streaming_views() const {
  return this != internal_default_instance() && streaming_views_ != nullptr;
}
inline bool StreamingViewsChangedEvent::has_streaming_views() const {
  return _internal_has_streaming_views();
}
inline void StreamingViewsChangedEvent::clear_streaming_views() {
  if (GetArena() == nullptr && streaming_views_ != nullptr) {
    delete streaming_views_;
  }
  streaming_views_ = nullptr;
}
inline const ::dcv::extensions::StreamingViews& StreamingViewsChangedEvent::_internal_streaming_views() const {
  const ::dcv::extensions::StreamingViews* p = streaming_views_;
  return p != nullptr ? *p : *reinterpret_cast<const ::dcv::extensions::StreamingViews*>(
      &::dcv::extensions::_StreamingViews_default_instance_);
}
inline const ::dcv::extensions::StreamingViews& StreamingViewsChangedEvent::streaming_views() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return _internal_streaming_views();
}
inline void StreamingViewsChangedEvent::unsafe_arena_set_allocated_streaming_views(
    ::dcv::extensions::StreamingViews* streaming_views) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(streaming_views_);
  }
  streaming_views_ = streaming_views;
  if (streaming_views) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::release_streaming_views() {
  auto temp = unsafe_arena_release_streaming_views();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::unsafe_arena_release_streaming_views() {
  // @@protoc_insertion_point(field_release:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  
  ::dcv::extensions::StreamingViews* temp = streaming_views_;
  streaming_views_ = nullptr;
  return temp;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::_internal_mutable_streaming_views() {
  
  if (streaming_views_ == nullptr) {
    auto* p = CreateMaybeMessage<::dcv::extensions::StreamingViews>(GetArena());
    streaming_views_ = p;
  }
  return streaming_views_;
}
inline ::dcv::extensions::StreamingViews* StreamingViewsChangedEvent::mutable_streaming_views() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
  return _internal_mutable_streaming_views();
}
inline void StreamingViewsChangedEvent::set_allocated_streaming_views(::dcv::extensions::StreamingViews* streaming_views) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete streaming_views_;
  }
  if (streaming_views) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(streaming_views);
    if (message_arena != submessage_arena) {
      streaming_views = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, streaming_views, submessage_arena);
    }
    
  } else {
    
  }
  streaming_views_ = streaming_views;
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.StreamingViewsChangedEvent.streaming_views)
}

// -------------------------------------------------------------------

// Request

// string request_id = 1;
inline void Request::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Request::request_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.request_id)
  return _internal_request_id();
}
inline void Request::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Request.request_id)
}
inline std::string* Request::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Request::_internal_request_id() const {
  return request_id_.Get();
}
inline void Request::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Request::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.Request.request_id)
}
inline void Request::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.Request.request_id)
}
inline void Request::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.Request.request_id)
}
inline std::string* Request::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Request::release_request_id() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Request::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Request.request_id)
}
inline std::string* Request::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Request::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.request_id)
}

// .dcv.extensions.GetDcvInfoRequest get_dcv_info_request = 10;
inline bool Request::_internal_has_get_dcv_info_request() const {
  return request_case() == kGetDcvInfoRequest;
}
inline bool Request::has_get_dcv_info_request() const {
  return _internal_has_get_dcv_info_request();
}
inline void Request::set_has_get_dcv_info_request() {
  _oneof_case_[0] = kGetDcvInfoRequest;
}
inline void Request::clear_get_dcv_info_request() {
  if (_internal_has_get_dcv_info_request()) {
    if (GetArena() == nullptr) {
      delete request_.get_dcv_info_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::release_get_dcv_info_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_dcv_info_request)
  if (_internal_has_get_dcv_info_request()) {
    clear_has_request();
      ::dcv::extensions::GetDcvInfoRequest* temp = request_.get_dcv_info_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_dcv_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetDcvInfoRequest& Request::_internal_get_dcv_info_request() const {
  return _internal_has_get_dcv_info_request()
      ? *request_.get_dcv_info_request_
      : *reinterpret_cast< ::dcv::extensions::GetDcvInfoRequest*>(&::dcv::extensions::_GetDcvInfoRequest_default_instance_);
}
inline const ::dcv::extensions::GetDcvInfoRequest& Request::get_dcv_info_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_dcv_info_request)
  return _internal_get_dcv_info_request();
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::unsafe_arena_release_get_dcv_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.get_dcv_info_request)
  if (_internal_has_get_dcv_info_request()) {
    clear_has_request();
    ::dcv::extensions::GetDcvInfoRequest* temp = request_.get_dcv_info_request_;
    request_.get_dcv_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_dcv_info_request(::dcv::extensions::GetDcvInfoRequest* get_dcv_info_request) {
  clear_request();
  if (get_dcv_info_request) {
    set_has_get_dcv_info_request();
    request_.get_dcv_info_request_ = get_dcv_info_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.get_dcv_info_request)
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::_internal_mutable_get_dcv_info_request() {
  if (!_internal_has_get_dcv_info_request()) {
    clear_request();
    set_has_get_dcv_info_request();
    request_.get_dcv_info_request_ = CreateMaybeMessage< ::dcv::extensions::GetDcvInfoRequest >(GetArena());
  }
  return request_.get_dcv_info_request_;
}
inline ::dcv::extensions::GetDcvInfoRequest* Request::mutable_get_dcv_info_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_dcv_info_request)
  return _internal_mutable_get_dcv_info_request();
}

// .dcv.extensions.GetManifestRequest get_manifest_request = 11;
inline bool Request::_internal_has_get_manifest_request() const {
  return request_case() == kGetManifestRequest;
}
inline bool Request::has_get_manifest_request() const {
  return _internal_has_get_manifest_request();
}
inline void Request::set_has_get_manifest_request() {
  _oneof_case_[0] = kGetManifestRequest;
}
inline void Request::clear_get_manifest_request() {
  if (_internal_has_get_manifest_request()) {
    if (GetArena() == nullptr) {
      delete request_.get_manifest_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::GetManifestRequest* Request::release_get_manifest_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_manifest_request)
  if (_internal_has_get_manifest_request()) {
    clear_has_request();
      ::dcv::extensions::GetManifestRequest* temp = request_.get_manifest_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_manifest_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetManifestRequest& Request::_internal_get_manifest_request() const {
  return _internal_has_get_manifest_request()
      ? *request_.get_manifest_request_
      : *reinterpret_cast< ::dcv::extensions::GetManifestRequest*>(&::dcv::extensions::_GetManifestRequest_default_instance_);
}
inline const ::dcv::extensions::GetManifestRequest& Request::get_manifest_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_manifest_request)
  return _internal_get_manifest_request();
}
inline ::dcv::extensions::GetManifestRequest* Request::unsafe_arena_release_get_manifest_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.get_manifest_request)
  if (_internal_has_get_manifest_request()) {
    clear_has_request();
    ::dcv::extensions::GetManifestRequest* temp = request_.get_manifest_request_;
    request_.get_manifest_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_manifest_request(::dcv::extensions::GetManifestRequest* get_manifest_request) {
  clear_request();
  if (get_manifest_request) {
    set_has_get_manifest_request();
    request_.get_manifest_request_ = get_manifest_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.get_manifest_request)
}
inline ::dcv::extensions::GetManifestRequest* Request::_internal_mutable_get_manifest_request() {
  if (!_internal_has_get_manifest_request()) {
    clear_request();
    set_has_get_manifest_request();
    request_.get_manifest_request_ = CreateMaybeMessage< ::dcv::extensions::GetManifestRequest >(GetArena());
  }
  return request_.get_manifest_request_;
}
inline ::dcv::extensions::GetManifestRequest* Request::mutable_get_manifest_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_manifest_request)
  return _internal_mutable_get_manifest_request();
}

// .dcv.extensions.SetupVirtualChannelRequest setup_virtual_channel_request = 20;
inline bool Request::_internal_has_setup_virtual_channel_request() const {
  return request_case() == kSetupVirtualChannelRequest;
}
inline bool Request::has_setup_virtual_channel_request() const {
  return _internal_has_setup_virtual_channel_request();
}
inline void Request::set_has_setup_virtual_channel_request() {
  _oneof_case_[0] = kSetupVirtualChannelRequest;
}
inline void Request::clear_setup_virtual_channel_request() {
  if (_internal_has_setup_virtual_channel_request()) {
    if (GetArena() == nullptr) {
      delete request_.setup_virtual_channel_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::release_setup_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.setup_virtual_channel_request)
  if (_internal_has_setup_virtual_channel_request()) {
    clear_has_request();
      ::dcv::extensions::SetupVirtualChannelRequest* temp = request_.setup_virtual_channel_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.setup_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetupVirtualChannelRequest& Request::_internal_setup_virtual_channel_request() const {
  return _internal_has_setup_virtual_channel_request()
      ? *request_.setup_virtual_channel_request_
      : *reinterpret_cast< ::dcv::extensions::SetupVirtualChannelRequest*>(&::dcv::extensions::_SetupVirtualChannelRequest_default_instance_);
}
inline const ::dcv::extensions::SetupVirtualChannelRequest& Request::setup_virtual_channel_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.setup_virtual_channel_request)
  return _internal_setup_virtual_channel_request();
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::unsafe_arena_release_setup_virtual_channel_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.setup_virtual_channel_request)
  if (_internal_has_setup_virtual_channel_request()) {
    clear_has_request();
    ::dcv::extensions::SetupVirtualChannelRequest* temp = request_.setup_virtual_channel_request_;
    request_.setup_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_setup_virtual_channel_request(::dcv::extensions::SetupVirtualChannelRequest* setup_virtual_channel_request) {
  clear_request();
  if (setup_virtual_channel_request) {
    set_has_setup_virtual_channel_request();
    request_.setup_virtual_channel_request_ = setup_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.setup_virtual_channel_request)
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::_internal_mutable_setup_virtual_channel_request() {
  if (!_internal_has_setup_virtual_channel_request()) {
    clear_request();
    set_has_setup_virtual_channel_request();
    request_.setup_virtual_channel_request_ = CreateMaybeMessage< ::dcv::extensions::SetupVirtualChannelRequest >(GetArena());
  }
  return request_.setup_virtual_channel_request_;
}
inline ::dcv::extensions::SetupVirtualChannelRequest* Request::mutable_setup_virtual_channel_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.setup_virtual_channel_request)
  return _internal_mutable_setup_virtual_channel_request();
}

// .dcv.extensions.CloseVirtualChannelRequest close_virtual_channel_request = 21;
inline bool Request::_internal_has_close_virtual_channel_request() const {
  return request_case() == kCloseVirtualChannelRequest;
}
inline bool Request::has_close_virtual_channel_request() const {
  return _internal_has_close_virtual_channel_request();
}
inline void Request::set_has_close_virtual_channel_request() {
  _oneof_case_[0] = kCloseVirtualChannelRequest;
}
inline void Request::clear_close_virtual_channel_request() {
  if (_internal_has_close_virtual_channel_request()) {
    if (GetArena() == nullptr) {
      delete request_.close_virtual_channel_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::release_close_virtual_channel_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.close_virtual_channel_request)
  if (_internal_has_close_virtual_channel_request()) {
    clear_has_request();
      ::dcv::extensions::CloseVirtualChannelRequest* temp = request_.close_virtual_channel_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.close_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::CloseVirtualChannelRequest& Request::_internal_close_virtual_channel_request() const {
  return _internal_has_close_virtual_channel_request()
      ? *request_.close_virtual_channel_request_
      : *reinterpret_cast< ::dcv::extensions::CloseVirtualChannelRequest*>(&::dcv::extensions::_CloseVirtualChannelRequest_default_instance_);
}
inline const ::dcv::extensions::CloseVirtualChannelRequest& Request::close_virtual_channel_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.close_virtual_channel_request)
  return _internal_close_virtual_channel_request();
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::unsafe_arena_release_close_virtual_channel_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.close_virtual_channel_request)
  if (_internal_has_close_virtual_channel_request()) {
    clear_has_request();
    ::dcv::extensions::CloseVirtualChannelRequest* temp = request_.close_virtual_channel_request_;
    request_.close_virtual_channel_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_close_virtual_channel_request(::dcv::extensions::CloseVirtualChannelRequest* close_virtual_channel_request) {
  clear_request();
  if (close_virtual_channel_request) {
    set_has_close_virtual_channel_request();
    request_.close_virtual_channel_request_ = close_virtual_channel_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.close_virtual_channel_request)
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::_internal_mutable_close_virtual_channel_request() {
  if (!_internal_has_close_virtual_channel_request()) {
    clear_request();
    set_has_close_virtual_channel_request();
    request_.close_virtual_channel_request_ = CreateMaybeMessage< ::dcv::extensions::CloseVirtualChannelRequest >(GetArena());
  }
  return request_.close_virtual_channel_request_;
}
inline ::dcv::extensions::CloseVirtualChannelRequest* Request::mutable_close_virtual_channel_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.close_virtual_channel_request)
  return _internal_mutable_close_virtual_channel_request();
}

// .dcv.extensions.SetCursorPointRequest set_cursor_point_request = 30;
inline bool Request::_internal_has_set_cursor_point_request() const {
  return request_case() == kSetCursorPointRequest;
}
inline bool Request::has_set_cursor_point_request() const {
  return _internal_has_set_cursor_point_request();
}
inline void Request::set_has_set_cursor_point_request() {
  _oneof_case_[0] = kSetCursorPointRequest;
}
inline void Request::clear_set_cursor_point_request() {
  if (_internal_has_set_cursor_point_request()) {
    if (GetArena() == nullptr) {
      delete request_.set_cursor_point_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::SetCursorPointRequest* Request::release_set_cursor_point_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.set_cursor_point_request)
  if (_internal_has_set_cursor_point_request()) {
    clear_has_request();
      ::dcv::extensions::SetCursorPointRequest* temp = request_.set_cursor_point_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.set_cursor_point_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetCursorPointRequest& Request::_internal_set_cursor_point_request() const {
  return _internal_has_set_cursor_point_request()
      ? *request_.set_cursor_point_request_
      : *reinterpret_cast< ::dcv::extensions::SetCursorPointRequest*>(&::dcv::extensions::_SetCursorPointRequest_default_instance_);
}
inline const ::dcv::extensions::SetCursorPointRequest& Request::set_cursor_point_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.set_cursor_point_request)
  return _internal_set_cursor_point_request();
}
inline ::dcv::extensions::SetCursorPointRequest* Request::unsafe_arena_release_set_cursor_point_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.set_cursor_point_request)
  if (_internal_has_set_cursor_point_request()) {
    clear_has_request();
    ::dcv::extensions::SetCursorPointRequest* temp = request_.set_cursor_point_request_;
    request_.set_cursor_point_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_set_cursor_point_request(::dcv::extensions::SetCursorPointRequest* set_cursor_point_request) {
  clear_request();
  if (set_cursor_point_request) {
    set_has_set_cursor_point_request();
    request_.set_cursor_point_request_ = set_cursor_point_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.set_cursor_point_request)
}
inline ::dcv::extensions::SetCursorPointRequest* Request::_internal_mutable_set_cursor_point_request() {
  if (!_internal_has_set_cursor_point_request()) {
    clear_request();
    set_has_set_cursor_point_request();
    request_.set_cursor_point_request_ = CreateMaybeMessage< ::dcv::extensions::SetCursorPointRequest >(GetArena());
  }
  return request_.set_cursor_point_request_;
}
inline ::dcv::extensions::SetCursorPointRequest* Request::mutable_set_cursor_point_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.set_cursor_point_request)
  return _internal_mutable_set_cursor_point_request();
}

// .dcv.extensions.GetStreamingViewsRequest get_streaming_views_request = 31;
inline bool Request::_internal_has_get_streaming_views_request() const {
  return request_case() == kGetStreamingViewsRequest;
}
inline bool Request::has_get_streaming_views_request() const {
  return _internal_has_get_streaming_views_request();
}
inline void Request::set_has_get_streaming_views_request() {
  _oneof_case_[0] = kGetStreamingViewsRequest;
}
inline void Request::clear_get_streaming_views_request() {
  if (_internal_has_get_streaming_views_request()) {
    if (GetArena() == nullptr) {
      delete request_.get_streaming_views_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::release_get_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.get_streaming_views_request)
  if (_internal_has_get_streaming_views_request()) {
    clear_has_request();
      ::dcv::extensions::GetStreamingViewsRequest* temp = request_.get_streaming_views_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.get_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetStreamingViewsRequest& Request::_internal_get_streaming_views_request() const {
  return _internal_has_get_streaming_views_request()
      ? *request_.get_streaming_views_request_
      : *reinterpret_cast< ::dcv::extensions::GetStreamingViewsRequest*>(&::dcv::extensions::_GetStreamingViewsRequest_default_instance_);
}
inline const ::dcv::extensions::GetStreamingViewsRequest& Request::get_streaming_views_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.get_streaming_views_request)
  return _internal_get_streaming_views_request();
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::unsafe_arena_release_get_streaming_views_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.get_streaming_views_request)
  if (_internal_has_get_streaming_views_request()) {
    clear_has_request();
    ::dcv::extensions::GetStreamingViewsRequest* temp = request_.get_streaming_views_request_;
    request_.get_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_get_streaming_views_request(::dcv::extensions::GetStreamingViewsRequest* get_streaming_views_request) {
  clear_request();
  if (get_streaming_views_request) {
    set_has_get_streaming_views_request();
    request_.get_streaming_views_request_ = get_streaming_views_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.get_streaming_views_request)
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::_internal_mutable_get_streaming_views_request() {
  if (!_internal_has_get_streaming_views_request()) {
    clear_request();
    set_has_get_streaming_views_request();
    request_.get_streaming_views_request_ = CreateMaybeMessage< ::dcv::extensions::GetStreamingViewsRequest >(GetArena());
  }
  return request_.get_streaming_views_request_;
}
inline ::dcv::extensions::GetStreamingViewsRequest* Request::mutable_get_streaming_views_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.get_streaming_views_request)
  return _internal_mutable_get_streaming_views_request();
}

// .dcv.extensions.IsPointInsideStreamingViewsRequest is_point_inside_streaming_views_request = 32;
inline bool Request::_internal_has_is_point_inside_streaming_views_request() const {
  return request_case() == kIsPointInsideStreamingViewsRequest;
}
inline bool Request::has_is_point_inside_streaming_views_request() const {
  return _internal_has_is_point_inside_streaming_views_request();
}
inline void Request::set_has_is_point_inside_streaming_views_request() {
  _oneof_case_[0] = kIsPointInsideStreamingViewsRequest;
}
inline void Request::clear_is_point_inside_streaming_views_request() {
  if (_internal_has_is_point_inside_streaming_views_request()) {
    if (GetArena() == nullptr) {
      delete request_.is_point_inside_streaming_views_request_;
    }
    clear_has_request();
  }
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::release_is_point_inside_streaming_views_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Request.is_point_inside_streaming_views_request)
  if (_internal_has_is_point_inside_streaming_views_request()) {
    clear_has_request();
      ::dcv::extensions::IsPointInsideStreamingViewsRequest* temp = request_.is_point_inside_streaming_views_request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    request_.is_point_inside_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsRequest& Request::_internal_is_point_inside_streaming_views_request() const {
  return _internal_has_is_point_inside_streaming_views_request()
      ? *request_.is_point_inside_streaming_views_request_
      : *reinterpret_cast< ::dcv::extensions::IsPointInsideStreamingViewsRequest*>(&::dcv::extensions::_IsPointInsideStreamingViewsRequest_default_instance_);
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsRequest& Request::is_point_inside_streaming_views_request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return _internal_is_point_inside_streaming_views_request();
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::unsafe_arena_release_is_point_inside_streaming_views_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Request.is_point_inside_streaming_views_request)
  if (_internal_has_is_point_inside_streaming_views_request()) {
    clear_has_request();
    ::dcv::extensions::IsPointInsideStreamingViewsRequest* temp = request_.is_point_inside_streaming_views_request_;
    request_.is_point_inside_streaming_views_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Request::unsafe_arena_set_allocated_is_point_inside_streaming_views_request(::dcv::extensions::IsPointInsideStreamingViewsRequest* is_point_inside_streaming_views_request) {
  clear_request();
  if (is_point_inside_streaming_views_request) {
    set_has_is_point_inside_streaming_views_request();
    request_.is_point_inside_streaming_views_request_ = is_point_inside_streaming_views_request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Request.is_point_inside_streaming_views_request)
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::_internal_mutable_is_point_inside_streaming_views_request() {
  if (!_internal_has_is_point_inside_streaming_views_request()) {
    clear_request();
    set_has_is_point_inside_streaming_views_request();
    request_.is_point_inside_streaming_views_request_ = CreateMaybeMessage< ::dcv::extensions::IsPointInsideStreamingViewsRequest >(GetArena());
  }
  return request_.is_point_inside_streaming_views_request_;
}
inline ::dcv::extensions::IsPointInsideStreamingViewsRequest* Request::mutable_is_point_inside_streaming_views_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Request.is_point_inside_streaming_views_request)
  return _internal_mutable_is_point_inside_streaming_views_request();
}

inline bool Request::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void Request::clear_has_request() {
  _oneof_case_[0] = REQUEST_NOT_SET;
}
inline Request::RequestCase Request::request_case() const {
  return Request::RequestCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Response

// string request_id = 1;
inline void Response::clear_request_id() {
  request_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Response::request_id() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.request_id)
  return _internal_request_id();
}
inline void Response::set_request_id(const std::string& value) {
  _internal_set_request_id(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.request_id)
}
inline std::string* Response::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& Response::_internal_request_id() const {
  return request_id_.Get();
}
inline void Response::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Response::set_request_id(std::string&& value) {
  
  request_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:dcv.extensions.Response.request_id)
}
inline void Response::set_request_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:dcv.extensions.Response.request_id)
}
inline void Response::set_request_id(const char* value,
    size_t size) {
  
  request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:dcv.extensions.Response.request_id)
}
inline std::string* Response::_internal_mutable_request_id() {
  
  return request_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Response::release_request_id() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Response::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:dcv.extensions.Response.request_id)
}
inline std::string* Response::unsafe_arena_release_request_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.request_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return request_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Response::unsafe_arena_set_allocated_request_id(
    std::string* request_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      request_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.request_id)
}

// .dcv.extensions.Response.Status status = 2;
inline void Response::clear_status() {
  status_ = 0;
}
inline ::dcv::extensions::Response_Status Response::_internal_status() const {
  return static_cast< ::dcv::extensions::Response_Status >(status_);
}
inline ::dcv::extensions::Response_Status Response::status() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::dcv::extensions::Response_Status value) {
  
  status_ = value;
}
inline void Response::set_status(::dcv::extensions::Response_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:dcv.extensions.Response.status)
}

// .dcv.extensions.GetDcvInfoResponse get_dcv_info_response = 10;
inline bool Response::_internal_has_get_dcv_info_response() const {
  return response_case() == kGetDcvInfoResponse;
}
inline bool Response::has_get_dcv_info_response() const {
  return _internal_has_get_dcv_info_response();
}
inline void Response::set_has_get_dcv_info_response() {
  _oneof_case_[0] = kGetDcvInfoResponse;
}
inline void Response::clear_get_dcv_info_response() {
  if (_internal_has_get_dcv_info_response()) {
    if (GetArena() == nullptr) {
      delete response_.get_dcv_info_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::release_get_dcv_info_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_dcv_info_response)
  if (_internal_has_get_dcv_info_response()) {
    clear_has_response();
      ::dcv::extensions::GetDcvInfoResponse* temp = response_.get_dcv_info_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_dcv_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetDcvInfoResponse& Response::_internal_get_dcv_info_response() const {
  return _internal_has_get_dcv_info_response()
      ? *response_.get_dcv_info_response_
      : *reinterpret_cast< ::dcv::extensions::GetDcvInfoResponse*>(&::dcv::extensions::_GetDcvInfoResponse_default_instance_);
}
inline const ::dcv::extensions::GetDcvInfoResponse& Response::get_dcv_info_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_dcv_info_response)
  return _internal_get_dcv_info_response();
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::unsafe_arena_release_get_dcv_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.get_dcv_info_response)
  if (_internal_has_get_dcv_info_response()) {
    clear_has_response();
    ::dcv::extensions::GetDcvInfoResponse* temp = response_.get_dcv_info_response_;
    response_.get_dcv_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_dcv_info_response(::dcv::extensions::GetDcvInfoResponse* get_dcv_info_response) {
  clear_response();
  if (get_dcv_info_response) {
    set_has_get_dcv_info_response();
    response_.get_dcv_info_response_ = get_dcv_info_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.get_dcv_info_response)
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::_internal_mutable_get_dcv_info_response() {
  if (!_internal_has_get_dcv_info_response()) {
    clear_response();
    set_has_get_dcv_info_response();
    response_.get_dcv_info_response_ = CreateMaybeMessage< ::dcv::extensions::GetDcvInfoResponse >(GetArena());
  }
  return response_.get_dcv_info_response_;
}
inline ::dcv::extensions::GetDcvInfoResponse* Response::mutable_get_dcv_info_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_dcv_info_response)
  return _internal_mutable_get_dcv_info_response();
}

// .dcv.extensions.GetManifestResponse get_manifest_response = 11;
inline bool Response::_internal_has_get_manifest_response() const {
  return response_case() == kGetManifestResponse;
}
inline bool Response::has_get_manifest_response() const {
  return _internal_has_get_manifest_response();
}
inline void Response::set_has_get_manifest_response() {
  _oneof_case_[0] = kGetManifestResponse;
}
inline void Response::clear_get_manifest_response() {
  if (_internal_has_get_manifest_response()) {
    if (GetArena() == nullptr) {
      delete response_.get_manifest_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::GetManifestResponse* Response::release_get_manifest_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_manifest_response)
  if (_internal_has_get_manifest_response()) {
    clear_has_response();
      ::dcv::extensions::GetManifestResponse* temp = response_.get_manifest_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_manifest_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetManifestResponse& Response::_internal_get_manifest_response() const {
  return _internal_has_get_manifest_response()
      ? *response_.get_manifest_response_
      : *reinterpret_cast< ::dcv::extensions::GetManifestResponse*>(&::dcv::extensions::_GetManifestResponse_default_instance_);
}
inline const ::dcv::extensions::GetManifestResponse& Response::get_manifest_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_manifest_response)
  return _internal_get_manifest_response();
}
inline ::dcv::extensions::GetManifestResponse* Response::unsafe_arena_release_get_manifest_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.get_manifest_response)
  if (_internal_has_get_manifest_response()) {
    clear_has_response();
    ::dcv::extensions::GetManifestResponse* temp = response_.get_manifest_response_;
    response_.get_manifest_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_manifest_response(::dcv::extensions::GetManifestResponse* get_manifest_response) {
  clear_response();
  if (get_manifest_response) {
    set_has_get_manifest_response();
    response_.get_manifest_response_ = get_manifest_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.get_manifest_response)
}
inline ::dcv::extensions::GetManifestResponse* Response::_internal_mutable_get_manifest_response() {
  if (!_internal_has_get_manifest_response()) {
    clear_response();
    set_has_get_manifest_response();
    response_.get_manifest_response_ = CreateMaybeMessage< ::dcv::extensions::GetManifestResponse >(GetArena());
  }
  return response_.get_manifest_response_;
}
inline ::dcv::extensions::GetManifestResponse* Response::mutable_get_manifest_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_manifest_response)
  return _internal_mutable_get_manifest_response();
}

// .dcv.extensions.SetupVirtualChannelResponse setup_virtual_channel_response = 20;
inline bool Response::_internal_has_setup_virtual_channel_response() const {
  return response_case() == kSetupVirtualChannelResponse;
}
inline bool Response::has_setup_virtual_channel_response() const {
  return _internal_has_setup_virtual_channel_response();
}
inline void Response::set_has_setup_virtual_channel_response() {
  _oneof_case_[0] = kSetupVirtualChannelResponse;
}
inline void Response::clear_setup_virtual_channel_response() {
  if (_internal_has_setup_virtual_channel_response()) {
    if (GetArena() == nullptr) {
      delete response_.setup_virtual_channel_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::release_setup_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.setup_virtual_channel_response)
  if (_internal_has_setup_virtual_channel_response()) {
    clear_has_response();
      ::dcv::extensions::SetupVirtualChannelResponse* temp = response_.setup_virtual_channel_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.setup_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetupVirtualChannelResponse& Response::_internal_setup_virtual_channel_response() const {
  return _internal_has_setup_virtual_channel_response()
      ? *response_.setup_virtual_channel_response_
      : *reinterpret_cast< ::dcv::extensions::SetupVirtualChannelResponse*>(&::dcv::extensions::_SetupVirtualChannelResponse_default_instance_);
}
inline const ::dcv::extensions::SetupVirtualChannelResponse& Response::setup_virtual_channel_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.setup_virtual_channel_response)
  return _internal_setup_virtual_channel_response();
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::unsafe_arena_release_setup_virtual_channel_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.setup_virtual_channel_response)
  if (_internal_has_setup_virtual_channel_response()) {
    clear_has_response();
    ::dcv::extensions::SetupVirtualChannelResponse* temp = response_.setup_virtual_channel_response_;
    response_.setup_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_setup_virtual_channel_response(::dcv::extensions::SetupVirtualChannelResponse* setup_virtual_channel_response) {
  clear_response();
  if (setup_virtual_channel_response) {
    set_has_setup_virtual_channel_response();
    response_.setup_virtual_channel_response_ = setup_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.setup_virtual_channel_response)
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::_internal_mutable_setup_virtual_channel_response() {
  if (!_internal_has_setup_virtual_channel_response()) {
    clear_response();
    set_has_setup_virtual_channel_response();
    response_.setup_virtual_channel_response_ = CreateMaybeMessage< ::dcv::extensions::SetupVirtualChannelResponse >(GetArena());
  }
  return response_.setup_virtual_channel_response_;
}
inline ::dcv::extensions::SetupVirtualChannelResponse* Response::mutable_setup_virtual_channel_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.setup_virtual_channel_response)
  return _internal_mutable_setup_virtual_channel_response();
}

// .dcv.extensions.CloseVirtualChannelResponse close_virtual_channel_response = 21;
inline bool Response::_internal_has_close_virtual_channel_response() const {
  return response_case() == kCloseVirtualChannelResponse;
}
inline bool Response::has_close_virtual_channel_response() const {
  return _internal_has_close_virtual_channel_response();
}
inline void Response::set_has_close_virtual_channel_response() {
  _oneof_case_[0] = kCloseVirtualChannelResponse;
}
inline void Response::clear_close_virtual_channel_response() {
  if (_internal_has_close_virtual_channel_response()) {
    if (GetArena() == nullptr) {
      delete response_.close_virtual_channel_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::release_close_virtual_channel_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.close_virtual_channel_response)
  if (_internal_has_close_virtual_channel_response()) {
    clear_has_response();
      ::dcv::extensions::CloseVirtualChannelResponse* temp = response_.close_virtual_channel_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.close_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::CloseVirtualChannelResponse& Response::_internal_close_virtual_channel_response() const {
  return _internal_has_close_virtual_channel_response()
      ? *response_.close_virtual_channel_response_
      : *reinterpret_cast< ::dcv::extensions::CloseVirtualChannelResponse*>(&::dcv::extensions::_CloseVirtualChannelResponse_default_instance_);
}
inline const ::dcv::extensions::CloseVirtualChannelResponse& Response::close_virtual_channel_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.close_virtual_channel_response)
  return _internal_close_virtual_channel_response();
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::unsafe_arena_release_close_virtual_channel_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.close_virtual_channel_response)
  if (_internal_has_close_virtual_channel_response()) {
    clear_has_response();
    ::dcv::extensions::CloseVirtualChannelResponse* temp = response_.close_virtual_channel_response_;
    response_.close_virtual_channel_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_close_virtual_channel_response(::dcv::extensions::CloseVirtualChannelResponse* close_virtual_channel_response) {
  clear_response();
  if (close_virtual_channel_response) {
    set_has_close_virtual_channel_response();
    response_.close_virtual_channel_response_ = close_virtual_channel_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.close_virtual_channel_response)
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::_internal_mutable_close_virtual_channel_response() {
  if (!_internal_has_close_virtual_channel_response()) {
    clear_response();
    set_has_close_virtual_channel_response();
    response_.close_virtual_channel_response_ = CreateMaybeMessage< ::dcv::extensions::CloseVirtualChannelResponse >(GetArena());
  }
  return response_.close_virtual_channel_response_;
}
inline ::dcv::extensions::CloseVirtualChannelResponse* Response::mutable_close_virtual_channel_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.close_virtual_channel_response)
  return _internal_mutable_close_virtual_channel_response();
}

// .dcv.extensions.SetCursorPointResponse set_cursor_point_response = 30;
inline bool Response::_internal_has_set_cursor_point_response() const {
  return response_case() == kSetCursorPointResponse;
}
inline bool Response::has_set_cursor_point_response() const {
  return _internal_has_set_cursor_point_response();
}
inline void Response::set_has_set_cursor_point_response() {
  _oneof_case_[0] = kSetCursorPointResponse;
}
inline void Response::clear_set_cursor_point_response() {
  if (_internal_has_set_cursor_point_response()) {
    if (GetArena() == nullptr) {
      delete response_.set_cursor_point_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::SetCursorPointResponse* Response::release_set_cursor_point_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.set_cursor_point_response)
  if (_internal_has_set_cursor_point_response()) {
    clear_has_response();
      ::dcv::extensions::SetCursorPointResponse* temp = response_.set_cursor_point_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.set_cursor_point_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::SetCursorPointResponse& Response::_internal_set_cursor_point_response() const {
  return _internal_has_set_cursor_point_response()
      ? *response_.set_cursor_point_response_
      : *reinterpret_cast< ::dcv::extensions::SetCursorPointResponse*>(&::dcv::extensions::_SetCursorPointResponse_default_instance_);
}
inline const ::dcv::extensions::SetCursorPointResponse& Response::set_cursor_point_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.set_cursor_point_response)
  return _internal_set_cursor_point_response();
}
inline ::dcv::extensions::SetCursorPointResponse* Response::unsafe_arena_release_set_cursor_point_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.set_cursor_point_response)
  if (_internal_has_set_cursor_point_response()) {
    clear_has_response();
    ::dcv::extensions::SetCursorPointResponse* temp = response_.set_cursor_point_response_;
    response_.set_cursor_point_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_set_cursor_point_response(::dcv::extensions::SetCursorPointResponse* set_cursor_point_response) {
  clear_response();
  if (set_cursor_point_response) {
    set_has_set_cursor_point_response();
    response_.set_cursor_point_response_ = set_cursor_point_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.set_cursor_point_response)
}
inline ::dcv::extensions::SetCursorPointResponse* Response::_internal_mutable_set_cursor_point_response() {
  if (!_internal_has_set_cursor_point_response()) {
    clear_response();
    set_has_set_cursor_point_response();
    response_.set_cursor_point_response_ = CreateMaybeMessage< ::dcv::extensions::SetCursorPointResponse >(GetArena());
  }
  return response_.set_cursor_point_response_;
}
inline ::dcv::extensions::SetCursorPointResponse* Response::mutable_set_cursor_point_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.set_cursor_point_response)
  return _internal_mutable_set_cursor_point_response();
}

// .dcv.extensions.GetStreamingViewsResponse get_streaming_views_response = 31;
inline bool Response::_internal_has_get_streaming_views_response() const {
  return response_case() == kGetStreamingViewsResponse;
}
inline bool Response::has_get_streaming_views_response() const {
  return _internal_has_get_streaming_views_response();
}
inline void Response::set_has_get_streaming_views_response() {
  _oneof_case_[0] = kGetStreamingViewsResponse;
}
inline void Response::clear_get_streaming_views_response() {
  if (_internal_has_get_streaming_views_response()) {
    if (GetArena() == nullptr) {
      delete response_.get_streaming_views_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::release_get_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.get_streaming_views_response)
  if (_internal_has_get_streaming_views_response()) {
    clear_has_response();
      ::dcv::extensions::GetStreamingViewsResponse* temp = response_.get_streaming_views_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.get_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::GetStreamingViewsResponse& Response::_internal_get_streaming_views_response() const {
  return _internal_has_get_streaming_views_response()
      ? *response_.get_streaming_views_response_
      : *reinterpret_cast< ::dcv::extensions::GetStreamingViewsResponse*>(&::dcv::extensions::_GetStreamingViewsResponse_default_instance_);
}
inline const ::dcv::extensions::GetStreamingViewsResponse& Response::get_streaming_views_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.get_streaming_views_response)
  return _internal_get_streaming_views_response();
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::unsafe_arena_release_get_streaming_views_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.get_streaming_views_response)
  if (_internal_has_get_streaming_views_response()) {
    clear_has_response();
    ::dcv::extensions::GetStreamingViewsResponse* temp = response_.get_streaming_views_response_;
    response_.get_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_get_streaming_views_response(::dcv::extensions::GetStreamingViewsResponse* get_streaming_views_response) {
  clear_response();
  if (get_streaming_views_response) {
    set_has_get_streaming_views_response();
    response_.get_streaming_views_response_ = get_streaming_views_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.get_streaming_views_response)
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::_internal_mutable_get_streaming_views_response() {
  if (!_internal_has_get_streaming_views_response()) {
    clear_response();
    set_has_get_streaming_views_response();
    response_.get_streaming_views_response_ = CreateMaybeMessage< ::dcv::extensions::GetStreamingViewsResponse >(GetArena());
  }
  return response_.get_streaming_views_response_;
}
inline ::dcv::extensions::GetStreamingViewsResponse* Response::mutable_get_streaming_views_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.get_streaming_views_response)
  return _internal_mutable_get_streaming_views_response();
}

// .dcv.extensions.IsPointInsideStreamingViewsResponse is_point_inside_streaming_views_response = 32;
inline bool Response::_internal_has_is_point_inside_streaming_views_response() const {
  return response_case() == kIsPointInsideStreamingViewsResponse;
}
inline bool Response::has_is_point_inside_streaming_views_response() const {
  return _internal_has_is_point_inside_streaming_views_response();
}
inline void Response::set_has_is_point_inside_streaming_views_response() {
  _oneof_case_[0] = kIsPointInsideStreamingViewsResponse;
}
inline void Response::clear_is_point_inside_streaming_views_response() {
  if (_internal_has_is_point_inside_streaming_views_response()) {
    if (GetArena() == nullptr) {
      delete response_.is_point_inside_streaming_views_response_;
    }
    clear_has_response();
  }
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::release_is_point_inside_streaming_views_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Response.is_point_inside_streaming_views_response)
  if (_internal_has_is_point_inside_streaming_views_response()) {
    clear_has_response();
      ::dcv::extensions::IsPointInsideStreamingViewsResponse* temp = response_.is_point_inside_streaming_views_response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    response_.is_point_inside_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsResponse& Response::_internal_is_point_inside_streaming_views_response() const {
  return _internal_has_is_point_inside_streaming_views_response()
      ? *response_.is_point_inside_streaming_views_response_
      : *reinterpret_cast< ::dcv::extensions::IsPointInsideStreamingViewsResponse*>(&::dcv::extensions::_IsPointInsideStreamingViewsResponse_default_instance_);
}
inline const ::dcv::extensions::IsPointInsideStreamingViewsResponse& Response::is_point_inside_streaming_views_response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return _internal_is_point_inside_streaming_views_response();
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::unsafe_arena_release_is_point_inside_streaming_views_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Response.is_point_inside_streaming_views_response)
  if (_internal_has_is_point_inside_streaming_views_response()) {
    clear_has_response();
    ::dcv::extensions::IsPointInsideStreamingViewsResponse* temp = response_.is_point_inside_streaming_views_response_;
    response_.is_point_inside_streaming_views_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Response::unsafe_arena_set_allocated_is_point_inside_streaming_views_response(::dcv::extensions::IsPointInsideStreamingViewsResponse* is_point_inside_streaming_views_response) {
  clear_response();
  if (is_point_inside_streaming_views_response) {
    set_has_is_point_inside_streaming_views_response();
    response_.is_point_inside_streaming_views_response_ = is_point_inside_streaming_views_response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Response.is_point_inside_streaming_views_response)
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::_internal_mutable_is_point_inside_streaming_views_response() {
  if (!_internal_has_is_point_inside_streaming_views_response()) {
    clear_response();
    set_has_is_point_inside_streaming_views_response();
    response_.is_point_inside_streaming_views_response_ = CreateMaybeMessage< ::dcv::extensions::IsPointInsideStreamingViewsResponse >(GetArena());
  }
  return response_.is_point_inside_streaming_views_response_;
}
inline ::dcv::extensions::IsPointInsideStreamingViewsResponse* Response::mutable_is_point_inside_streaming_views_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Response.is_point_inside_streaming_views_response)
  return _internal_mutable_is_point_inside_streaming_views_response();
}

inline bool Response::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void Response::clear_has_response() {
  _oneof_case_[0] = RESPONSE_NOT_SET;
}
inline Response::ResponseCase Response::response_case() const {
  return Response::ResponseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Event

// .dcv.extensions.VirtualChannelReadyEvent virtual_channel_ready_event = 10;
inline bool Event::_internal_has_virtual_channel_ready_event() const {
  return event_case() == kVirtualChannelReadyEvent;
}
inline bool Event::has_virtual_channel_ready_event() const {
  return _internal_has_virtual_channel_ready_event();
}
inline void Event::set_has_virtual_channel_ready_event() {
  _oneof_case_[0] = kVirtualChannelReadyEvent;
}
inline void Event::clear_virtual_channel_ready_event() {
  if (_internal_has_virtual_channel_ready_event()) {
    if (GetArena() == nullptr) {
      delete event_.virtual_channel_ready_event_;
    }
    clear_has_event();
  }
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::release_virtual_channel_ready_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_ready_event)
  if (_internal_has_virtual_channel_ready_event()) {
    clear_has_event();
      ::dcv::extensions::VirtualChannelReadyEvent* temp = event_.virtual_channel_ready_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.virtual_channel_ready_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::VirtualChannelReadyEvent& Event::_internal_virtual_channel_ready_event() const {
  return _internal_has_virtual_channel_ready_event()
      ? *event_.virtual_channel_ready_event_
      : *reinterpret_cast< ::dcv::extensions::VirtualChannelReadyEvent*>(&::dcv::extensions::_VirtualChannelReadyEvent_default_instance_);
}
inline const ::dcv::extensions::VirtualChannelReadyEvent& Event::virtual_channel_ready_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_ready_event)
  return _internal_virtual_channel_ready_event();
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::unsafe_arena_release_virtual_channel_ready_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Event.virtual_channel_ready_event)
  if (_internal_has_virtual_channel_ready_event()) {
    clear_has_event();
    ::dcv::extensions::VirtualChannelReadyEvent* temp = event_.virtual_channel_ready_event_;
    event_.virtual_channel_ready_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_virtual_channel_ready_event(::dcv::extensions::VirtualChannelReadyEvent* virtual_channel_ready_event) {
  clear_event();
  if (virtual_channel_ready_event) {
    set_has_virtual_channel_ready_event();
    event_.virtual_channel_ready_event_ = virtual_channel_ready_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Event.virtual_channel_ready_event)
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::_internal_mutable_virtual_channel_ready_event() {
  if (!_internal_has_virtual_channel_ready_event()) {
    clear_event();
    set_has_virtual_channel_ready_event();
    event_.virtual_channel_ready_event_ = CreateMaybeMessage< ::dcv::extensions::VirtualChannelReadyEvent >(GetArena());
  }
  return event_.virtual_channel_ready_event_;
}
inline ::dcv::extensions::VirtualChannelReadyEvent* Event::mutable_virtual_channel_ready_event() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_ready_event)
  return _internal_mutable_virtual_channel_ready_event();
}

// .dcv.extensions.VirtualChannelClosedEvent virtual_channel_closed_event = 20;
inline bool Event::_internal_has_virtual_channel_closed_event() const {
  return event_case() == kVirtualChannelClosedEvent;
}
inline bool Event::has_virtual_channel_closed_event() const {
  return _internal_has_virtual_channel_closed_event();
}
inline void Event::set_has_virtual_channel_closed_event() {
  _oneof_case_[0] = kVirtualChannelClosedEvent;
}
inline void Event::clear_virtual_channel_closed_event() {
  if (_internal_has_virtual_channel_closed_event()) {
    if (GetArena() == nullptr) {
      delete event_.virtual_channel_closed_event_;
    }
    clear_has_event();
  }
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::release_virtual_channel_closed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.virtual_channel_closed_event)
  if (_internal_has_virtual_channel_closed_event()) {
    clear_has_event();
      ::dcv::extensions::VirtualChannelClosedEvent* temp = event_.virtual_channel_closed_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.virtual_channel_closed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::VirtualChannelClosedEvent& Event::_internal_virtual_channel_closed_event() const {
  return _internal_has_virtual_channel_closed_event()
      ? *event_.virtual_channel_closed_event_
      : *reinterpret_cast< ::dcv::extensions::VirtualChannelClosedEvent*>(&::dcv::extensions::_VirtualChannelClosedEvent_default_instance_);
}
inline const ::dcv::extensions::VirtualChannelClosedEvent& Event::virtual_channel_closed_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.virtual_channel_closed_event)
  return _internal_virtual_channel_closed_event();
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::unsafe_arena_release_virtual_channel_closed_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Event.virtual_channel_closed_event)
  if (_internal_has_virtual_channel_closed_event()) {
    clear_has_event();
    ::dcv::extensions::VirtualChannelClosedEvent* temp = event_.virtual_channel_closed_event_;
    event_.virtual_channel_closed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_virtual_channel_closed_event(::dcv::extensions::VirtualChannelClosedEvent* virtual_channel_closed_event) {
  clear_event();
  if (virtual_channel_closed_event) {
    set_has_virtual_channel_closed_event();
    event_.virtual_channel_closed_event_ = virtual_channel_closed_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Event.virtual_channel_closed_event)
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::_internal_mutable_virtual_channel_closed_event() {
  if (!_internal_has_virtual_channel_closed_event()) {
    clear_event();
    set_has_virtual_channel_closed_event();
    event_.virtual_channel_closed_event_ = CreateMaybeMessage< ::dcv::extensions::VirtualChannelClosedEvent >(GetArena());
  }
  return event_.virtual_channel_closed_event_;
}
inline ::dcv::extensions::VirtualChannelClosedEvent* Event::mutable_virtual_channel_closed_event() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.virtual_channel_closed_event)
  return _internal_mutable_virtual_channel_closed_event();
}

// .dcv.extensions.StreamingViewsChangedEvent streaming_views_changed_event = 30;
inline bool Event::_internal_has_streaming_views_changed_event() const {
  return event_case() == kStreamingViewsChangedEvent;
}
inline bool Event::has_streaming_views_changed_event() const {
  return _internal_has_streaming_views_changed_event();
}
inline void Event::set_has_streaming_views_changed_event() {
  _oneof_case_[0] = kStreamingViewsChangedEvent;
}
inline void Event::clear_streaming_views_changed_event() {
  if (_internal_has_streaming_views_changed_event()) {
    if (GetArena() == nullptr) {
      delete event_.streaming_views_changed_event_;
    }
    clear_has_event();
  }
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::release_streaming_views_changed_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.Event.streaming_views_changed_event)
  if (_internal_has_streaming_views_changed_event()) {
    clear_has_event();
      ::dcv::extensions::StreamingViewsChangedEvent* temp = event_.streaming_views_changed_event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    event_.streaming_views_changed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::StreamingViewsChangedEvent& Event::_internal_streaming_views_changed_event() const {
  return _internal_has_streaming_views_changed_event()
      ? *event_.streaming_views_changed_event_
      : *reinterpret_cast< ::dcv::extensions::StreamingViewsChangedEvent*>(&::dcv::extensions::_StreamingViewsChangedEvent_default_instance_);
}
inline const ::dcv::extensions::StreamingViewsChangedEvent& Event::streaming_views_changed_event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.Event.streaming_views_changed_event)
  return _internal_streaming_views_changed_event();
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::unsafe_arena_release_streaming_views_changed_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.Event.streaming_views_changed_event)
  if (_internal_has_streaming_views_changed_event()) {
    clear_has_event();
    ::dcv::extensions::StreamingViewsChangedEvent* temp = event_.streaming_views_changed_event_;
    event_.streaming_views_changed_event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Event::unsafe_arena_set_allocated_streaming_views_changed_event(::dcv::extensions::StreamingViewsChangedEvent* streaming_views_changed_event) {
  clear_event();
  if (streaming_views_changed_event) {
    set_has_streaming_views_changed_event();
    event_.streaming_views_changed_event_ = streaming_views_changed_event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.Event.streaming_views_changed_event)
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::_internal_mutable_streaming_views_changed_event() {
  if (!_internal_has_streaming_views_changed_event()) {
    clear_event();
    set_has_streaming_views_changed_event();
    event_.streaming_views_changed_event_ = CreateMaybeMessage< ::dcv::extensions::StreamingViewsChangedEvent >(GetArena());
  }
  return event_.streaming_views_changed_event_;
}
inline ::dcv::extensions::StreamingViewsChangedEvent* Event::mutable_streaming_views_changed_event() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.Event.streaming_views_changed_event)
  return _internal_mutable_streaming_views_changed_event();
}

inline bool Event::has_event() const {
  return event_case() != EVENT_NOT_SET;
}
inline void Event::clear_has_event() {
  _oneof_case_[0] = EVENT_NOT_SET;
}
inline Event::EventCase Event::event_case() const {
  return Event::EventCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExtensionMessage

// .dcv.extensions.Request request = 1;
inline bool ExtensionMessage::_internal_has_request() const {
  return msg_case() == kRequest;
}
inline bool ExtensionMessage::has_request() const {
  return _internal_has_request();
}
inline void ExtensionMessage::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void ExtensionMessage::clear_request() {
  if (_internal_has_request()) {
    if (GetArena() == nullptr) {
      delete msg_.request_;
    }
    clear_has_msg();
  }
}
inline ::dcv::extensions::Request* ExtensionMessage::release_request() {
  // @@protoc_insertion_point(field_release:dcv.extensions.ExtensionMessage.request)
  if (_internal_has_request()) {
    clear_has_msg();
      ::dcv::extensions::Request* temp = msg_.request_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::Request& ExtensionMessage::_internal_request() const {
  return _internal_has_request()
      ? *msg_.request_
      : *reinterpret_cast< ::dcv::extensions::Request*>(&::dcv::extensions::_Request_default_instance_);
}
inline const ::dcv::extensions::Request& ExtensionMessage::request() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.ExtensionMessage.request)
  return _internal_request();
}
inline ::dcv::extensions::Request* ExtensionMessage::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.ExtensionMessage.request)
  if (_internal_has_request()) {
    clear_has_msg();
    ::dcv::extensions::Request* temp = msg_.request_;
    msg_.request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExtensionMessage::unsafe_arena_set_allocated_request(::dcv::extensions::Request* request) {
  clear_msg();
  if (request) {
    set_has_request();
    msg_.request_ = request;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.ExtensionMessage.request)
}
inline ::dcv::extensions::Request* ExtensionMessage::_internal_mutable_request() {
  if (!_internal_has_request()) {
    clear_msg();
    set_has_request();
    msg_.request_ = CreateMaybeMessage< ::dcv::extensions::Request >(GetArena());
  }
  return msg_.request_;
}
inline ::dcv::extensions::Request* ExtensionMessage::mutable_request() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.ExtensionMessage.request)
  return _internal_mutable_request();
}

inline bool ExtensionMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void ExtensionMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline ExtensionMessage::MsgCase ExtensionMessage::msg_case() const {
  return ExtensionMessage::MsgCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DcvMessage

// .dcv.extensions.Response response = 2;
inline bool DcvMessage::_internal_has_response() const {
  return msg_case() == kResponse;
}
inline bool DcvMessage::has_response() const {
  return _internal_has_response();
}
inline void DcvMessage::set_has_response() {
  _oneof_case_[0] = kResponse;
}
inline void DcvMessage::clear_response() {
  if (_internal_has_response()) {
    if (GetArena() == nullptr) {
      delete msg_.response_;
    }
    clear_has_msg();
  }
}
inline ::dcv::extensions::Response* DcvMessage::release_response() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.response)
  if (_internal_has_response()) {
    clear_has_msg();
      ::dcv::extensions::Response* temp = msg_.response_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::Response& DcvMessage::_internal_response() const {
  return _internal_has_response()
      ? *msg_.response_
      : *reinterpret_cast< ::dcv::extensions::Response*>(&::dcv::extensions::_Response_default_instance_);
}
inline const ::dcv::extensions::Response& DcvMessage::response() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.response)
  return _internal_response();
}
inline ::dcv::extensions::Response* DcvMessage::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.DcvMessage.response)
  if (_internal_has_response()) {
    clear_has_msg();
    ::dcv::extensions::Response* temp = msg_.response_;
    msg_.response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DcvMessage::unsafe_arena_set_allocated_response(::dcv::extensions::Response* response) {
  clear_msg();
  if (response) {
    set_has_response();
    msg_.response_ = response;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.DcvMessage.response)
}
inline ::dcv::extensions::Response* DcvMessage::_internal_mutable_response() {
  if (!_internal_has_response()) {
    clear_msg();
    set_has_response();
    msg_.response_ = CreateMaybeMessage< ::dcv::extensions::Response >(GetArena());
  }
  return msg_.response_;
}
inline ::dcv::extensions::Response* DcvMessage::mutable_response() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.response)
  return _internal_mutable_response();
}

// .dcv.extensions.Event event = 3;
inline bool DcvMessage::_internal_has_event() const {
  return msg_case() == kEvent;
}
inline bool DcvMessage::has_event() const {
  return _internal_has_event();
}
inline void DcvMessage::set_has_event() {
  _oneof_case_[0] = kEvent;
}
inline void DcvMessage::clear_event() {
  if (_internal_has_event()) {
    if (GetArena() == nullptr) {
      delete msg_.event_;
    }
    clear_has_msg();
  }
}
inline ::dcv::extensions::Event* DcvMessage::release_event() {
  // @@protoc_insertion_point(field_release:dcv.extensions.DcvMessage.event)
  if (_internal_has_event()) {
    clear_has_msg();
      ::dcv::extensions::Event* temp = msg_.event_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::dcv::extensions::Event& DcvMessage::_internal_event() const {
  return _internal_has_event()
      ? *msg_.event_
      : *reinterpret_cast< ::dcv::extensions::Event*>(&::dcv::extensions::_Event_default_instance_);
}
inline const ::dcv::extensions::Event& DcvMessage::event() const {
  // @@protoc_insertion_point(field_get:dcv.extensions.DcvMessage.event)
  return _internal_event();
}
inline ::dcv::extensions::Event* DcvMessage::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_unsafe_arena_release:dcv.extensions.DcvMessage.event)
  if (_internal_has_event()) {
    clear_has_msg();
    ::dcv::extensions::Event* temp = msg_.event_;
    msg_.event_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DcvMessage::unsafe_arena_set_allocated_event(::dcv::extensions::Event* event) {
  clear_msg();
  if (event) {
    set_has_event();
    msg_.event_ = event;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:dcv.extensions.DcvMessage.event)
}
inline ::dcv::extensions::Event* DcvMessage::_internal_mutable_event() {
  if (!_internal_has_event()) {
    clear_msg();
    set_has_event();
    msg_.event_ = CreateMaybeMessage< ::dcv::extensions::Event >(GetArena());
  }
  return msg_.event_;
}
inline ::dcv::extensions::Event* DcvMessage::mutable_event() {
  // @@protoc_insertion_point(field_mutable:dcv.extensions.DcvMessage.event)
  return _internal_mutable_event();
}

inline bool DcvMessage::has_msg() const {
  return msg_case() != MSG_NOT_SET;
}
inline void DcvMessage::clear_has_msg() {
  _oneof_case_[0] = MSG_NOT_SET;
}
inline DcvMessage::MsgCase DcvMessage::msg_case() const {
  return DcvMessage::MsgCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace extensions
}  // namespace dcv

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::dcv::extensions::GetDcvInfoResponse_DcvRole> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcv::extensions::GetDcvInfoResponse_DcvRole>() {
  return ::dcv::extensions::GetDcvInfoResponse_DcvRole_descriptor();
}
template <> struct is_proto_enum< ::dcv::extensions::Response_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::dcv::extensions::Response_Status>() {
  return ::dcv::extensions::Response_Status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_extensions_2eproto
